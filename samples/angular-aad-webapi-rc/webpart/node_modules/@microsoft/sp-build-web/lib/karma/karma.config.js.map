{"version":3,"sources":["karma/karma.config.ts"],"names":[],"mappings":";AAAA,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,wBAA+B,sDAAsD,CAAC,CAAA;AAGtF,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AAEpC,IAAM,SAAS,GAAY,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;AAClE,IAAM,QAAQ,GAAY,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACrC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;AAEtE,IAAM,eAAe,GAAQ,KAAK,CAAC,KAAK,CAAC,SAAgB,CAAC,CAAC,4BAA4B;AACvF,IAAM,gBAAgB,GAAW,eAAe,CAAC,gBAAgB,CAAC;AAElE,IAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAChE,IAAM,eAAe,GAAW,wBAAc,CAAC,yBAAyB,EAAE,cAAc,CAAC,CAAC;AAC1F,IAAM,eAAe,GAAW,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,EAAE,uBAAuB,CAAC,CAAC;AAE3F,iBAAS,UAAC,MAAc;IACtB,IAAM,WAAW,GAAyB;QAExC,2EAA2E;QAC3E,QAAQ,EAAE,OAAO,CAAC,GAAG,EAAE;QAEvB,oBAAoB;QACpB,uEAAuE;QACvE,UAAU,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC;QAEnC,kDAAkD;QAClD,KAAK,EAAE,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC;YACzE,eAAe;YACf,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAC9B;QAED,2BAA2B;QAC3B,OAAO,EAAE,EAAE;QAEX,qCAAqC;QACrC,OAAO,EAAE,KAAK,CAAC,gBAAgB,CAAC,cAAc,CAC5C,CAAC;gBACG,IAAI,EAAE,OAAO;gBACb,gFAAgF;gBAChF,OAAO,EAAE,+FAA+F;gBACxG,MAAM,EAAE,eAAe,CAAC,8BAA8B;aACvD;SACF,EACD,CAAC;gBACC,OAAO,EAAE,QAAQ;gBACjB,SAAS,EAAE,QAAQ;gBACnB,cAAc,EAAE,IAAI;gBACpB,gCAAgC,EAAE,IAAI;gBACtC,wBAAwB,EAAE,IAAI;aAC/B,CAAC,CACH;QAED,iBAAiB,EAAE;YACjB,MAAM,EAAE,IAAI;YACZ,KAAK,EAAE,CAAC,SAAS;SAClB;QAED,+DAA+D;QAC/D,+EAA+E;QAC/E,aAAa,EAAE;gBACb,aAAa,EAAE,CAAC,SAAS,CAAC;;YAC1B,GAAC,eAAe,CAAC,GAAE,CAAC,SAAS,CAAC;;SAC/B;QAED,OAAO,EAAE,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC;YACtC,OAAO,CAAC,8BAA8B,CAAC;SACxC,CAAC;QAEF,+BAA+B;QAC/B,sCAAsC;QACtC,uEAAuE;QACvE,SAAS,EAAE,CAAC,aAAa,EAAE,aAAa,EAAE,UAAU,CAAC;QAErD,kBAAkB,EAAE;YAClB,UAAU,EAAE,6BAA6B;SAC1C;QAED,gBAAgB,EAAE;YAChB,GAAG,EAAE,eAAe;YACpB,SAAS,EAAE;gBACT;oBACE,IAAI,EAAE,MAAM;oBACZ,MAAM,EAAE,IAAI;iBACb;gBACD;oBACE,IAAI,EAAE,MAAM;oBACZ,MAAM,EAAE,IAAI;oBACZ,IAAI,EAAE,kBAAkB;iBACzB;aACF;SACF;QAED,kBAAkB;QAClB,IAAI,EAAE,IAAI;QAEV,6DAA6D;QAC7D,MAAM,EAAE,IAAI;QAEZ,mBAAmB;QACnB,oHAAoH;QACpH,QAAQ,EAAE,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;QAEzD,+EAA+E;QAC/E,SAAS,EAAE,KAAK;QAEhB,uBAAuB;QACvB,+EAA+E;QAC/E,QAAQ,EAAE,CAAC,WAAW,CAAC;QAEvB,8BAA8B;QAC9B,6DAA6D;QAC7D,SAAS,EAAE,IAAI;QAEf,gDAAgD;QAChD,uDAAuD;QACvD,cAAc,EAAE,KAAK;QACrB,wBAAwB,EAAG,IAAI;QAC/B,0BAA0B,EAAG,CAAC;QAC9B,wBAAwB,EAAG,KAAK,CAAG,gBAAgB;KACpD,CAAC;IAEF,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;;AAC1B,CAAC,CAAC","file":"karma/karma.config.js","sourcesContent":["import * as path from 'path';\r\nimport { Config } from 'karma';\r\nimport { resolvePackage } from '@microsoft/sp-build-core-tasks/lib/utilities/Resolve';\r\n\r\nimport { IExtendedKarmaConfig } from './karmaTypes';\r\nimport * as build from './../index';\r\n\r\nconst debugMode: boolean = process.argv.indexOf('--debug') !== -1;\r\nconst shipMode: boolean = process.argv.indexOf('--ship') !== -1 ||\r\n                          process.argv.indexOf('--production') !== -1;\r\n\r\nconst configResources: any = build.karma.resources as any; // tslint:diable-line:no-any\r\nconst bindPolyfillPath: string = configResources.bindPolyfillPath;\r\n\r\nconst spBuildWebRoot: string = path.join(__dirname, '..', '..');\r\nconst spPolyfillsRoot: string = resolvePackage('@microsoft/sp-polyfills', spBuildWebRoot);\r\nconst spPolyfillsPath: string = path.join(spPolyfillsRoot, 'lib', 'FrameworkPolyfills.js');\r\n\r\nexport = (config: Config) => {\r\n  const karmaConfig: IExtendedKarmaConfig = {\r\n\r\n    // base path that will be used to resolve all patterns (eg. files, exclude)\r\n    basePath: process.cwd(),\r\n\r\n    // frameworks to use\r\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\r\n    frameworks: ['mocha', 'sinon-chai'],\r\n\r\n    // list of files / patterns to load in the browser\r\n    files: [bindPolyfillPath].concat([\r\n      path.join(path.dirname(require.resolve('systemjs')), 'dist', 'system.js'),\r\n      spPolyfillsPath,\r\n      path.join('lib', 'tests.js')]\r\n    ),\r\n\r\n    // list of files to exclude\r\n    exclude: [],\r\n\r\n    // webpack config for bundling tests.\r\n    webpack: build.configureWebpack.getKarmaConfig(\r\n      [{\r\n          test: /\\.js$/,\r\n          // @todo VSO:247624 - clean this up when localized resources are properly loaded\r\n          exclude: /(test|node_modules|bower_components|globalize-locales|resx-strings|localized_timezone_cities)/,\r\n          loader: configResources.istanbulInstrumenterLoaderPath\r\n        }\r\n      ],\r\n      [{\r\n        'jsdom': 'window',\r\n        'cheerio': 'window',\r\n        'react/addons': true,\r\n        'react/lib/ExecutionEnvironment': true,\r\n        'react/lib/ReactContext': true\r\n      }]\r\n    ),\r\n\r\n    webpackMiddleware: {\r\n      noInfo: true,\r\n      quiet: !debugMode\r\n    },\r\n\r\n    // preprocess matching files before serving them to the browser\r\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\r\n    preprocessors: {\r\n      'lib/**/*.js': ['webpack'],\r\n      [spPolyfillsPath]: ['webpack']\r\n    },\r\n\r\n    plugins: configResources.plugins.concat([\r\n      require('./karma-test-result-reporter')\r\n    ]),\r\n\r\n    // test results reporter to use\r\n    // possible values: 'dots', 'progress'\r\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\r\n    reporters: ['test-result', 'mocha-clean', 'coverage'],\r\n\r\n    testResultReporter: {\r\n      outputFile: 'temp/testResult/result.json'\r\n    },\r\n\r\n    coverageReporter: {\r\n      dir: 'temp/coverage',\r\n      reporters: [\r\n        {\r\n          type: 'html',\r\n          subdir: 'js'\r\n        },\r\n        {\r\n          type: 'json',\r\n          subdir: './',\r\n          file: 'js-coverage.json'\r\n        }\r\n      ]\r\n    },\r\n\r\n    // web server port\r\n    port: 9876,\r\n\r\n    // enable / disable colors in the output (reporters and logs)\r\n    colors: true,\r\n\r\n    // level of logging\r\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\r\n    logLevel: (shipMode ? config.LOG_INFO : config.LOG_DEBUG),\r\n\r\n    // enable / disable watching file and executing tests whenever any file changes\r\n    autoWatch: false,\r\n\r\n    // start these browsers\r\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\r\n    browsers: ['PhantomJS'],\r\n\r\n    // Continuous Integration mode\r\n    // if true, Karma captures browsers, runs the tests and exits\r\n    singleRun: true,\r\n\r\n    // Increase timeouts to reduce random CI failure\r\n    // See https://github.com/karma-runner/karma/issues/598\r\n    captureTimeout: 10000,             // default 2000\r\n    browserDisconnectTimeout : 5000,   // default 2000\r\n    browserDisconnectTolerance : 5,    // default 0\r\n    browserNoActivityTimeout : 20000   // default 10000\r\n  };\r\n\r\n  config.set(karmaConfig);\r\n};\r\n"],"sourceRoot":"..\\..\\src"}