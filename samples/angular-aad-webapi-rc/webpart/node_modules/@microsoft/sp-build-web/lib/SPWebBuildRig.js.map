{"version":3,"sources":["SPWebBuildRig.ts"],"names":[],"mappings":"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","file":"SPWebBuildRig.js","sourcesContent":["import * as path from 'path';\r\nimport * as yargs from 'yargs';\r\nimport * as gulp from 'gulp';\r\n\r\nimport sass from '@microsoft/gulp-core-build-sass';\r\nimport { serve, reload, trustDevCert, untrustDevCert } from '@microsoft/gulp-core-build-serve';\r\nimport webpack from '@microsoft/gulp-core-build-webpack';\r\nimport karma from '@microsoft/gulp-core-build-karma';\r\nimport * as spBuildCoreTasks from '@microsoft/sp-build-core-tasks';\r\n\r\nimport {\r\n  SPBuildRig,\r\n  BuildRigConstants,\r\n  IConfigurableTask,\r\n  ITaskDefinition,\r\n  typescript,\r\n  IExecutable,\r\n  serial,\r\n  parallel,\r\n  watch,\r\n  ISPBuildRigArgs\r\n} from '@microsoft/sp-build-common';\r\n\r\nimport { WebBuildRigConstants } from './WebBuildRigConstants';\r\n\r\nexport interface ISPWebBuildRigArgs extends ISPBuildRigArgs {\r\n  debug: boolean;\r\n}\r\n\r\nfunction getSchemaFilePath(filename: string): string {\r\n  return path.join(__dirname, 'schemas', filename);\r\n}\r\n\r\nexport class SPWebBuildRig extends SPBuildRig {\r\n  protected args: ISPBuildRigArgs;\r\n\r\n  public initialize(gulp: gulp.Gulp): void {\r\n    super.initialize(gulp);\r\n  }\r\n\r\n  protected getCustomConfigs(): Array<IConfigurableTask> {\r\n    // tslint:disable:max-line-length\r\n    return super.getCustomConfigs().concat([\r\n      {\r\n        callback: serve.mergeConfig.bind(serve),\r\n        configFile: 'serve.json',\r\n        readmeUrl: 'https://github.com/Microsoft/gulp-core-build-serve#servetask',\r\n        schemaFile: getSchemaFilePath('serve.schema.json')\r\n      },\r\n      {\r\n        callback: spBuildCoreTasks.deployAzureStorage.mergeConfig.bind(spBuildCoreTasks.deployAzureStorage),\r\n        configFile: 'deploy-azure-storage.json',\r\n        readmeUrl: 'https://github.com/OfficeDev/SharePointUXFramework/wiki/Notes-on-Azure-Deployment#configuration',\r\n        schemaFile: getSchemaFilePath('deploy-azure-storage.schema.json')\r\n      },\r\n      {\r\n        callback: spBuildCoreTasks.packageSolution.mergeConfig.bind(spBuildCoreTasks.packageSolution),\r\n        configFile: 'package-solution.json',\r\n        readmeUrl: 'https://github.com/OfficeDev/SharePointUXFramework/wiki/Notes-on-Solution-Packaging#packaging',\r\n        schemaFile: getSchemaFilePath('package-solution.schema.json')\r\n      },\r\n      {\r\n        callback: sass.mergeConfig.bind(sass),\r\n        configFile: 'sass.json',\r\n        readmeUrl: 'https://github.com/Microsoft/gulp-core-build-sass/blob/master/src/SassTask.ts',\r\n        schemaFile: getSchemaFilePath('sass.schema.json')\r\n      },\r\n      {\r\n        callback: webpack.mergeConfig.bind(webpack),\r\n        configFile: 'webpack.json',\r\n        readmeUrl: 'https://github.com/Microsoft/gulp-core-build-webpack/blob/master/src/WebpackTask.ts',\r\n        schemaFile: getSchemaFilePath('webpack.schema.json')\r\n      },\r\n      {\r\n        callback: karma.mergeConfig.bind(karma),\r\n        configFile: 'karma.json',\r\n        readmeUrl: 'https://github.com/Microsoft/gulp-core-build-karma/blob/master/src/KarmaTask.ts',\r\n        schemaFile: getSchemaFilePath('karma.schema.json')\r\n      },\r\n      {\r\n        callback: spBuildCoreTasks.configureWebpack.mergeConfig.bind(spBuildCoreTasks.configureWebpack),\r\n        configFile: 'configure-webpack.json',\r\n        readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',\r\n        schemaFile: getSchemaFilePath('configure-webpack.schema.json')\r\n      },\r\n      {\r\n        callback: spBuildCoreTasks.configureExternalBundlingWebpack.mergeConfig.bind(spBuildCoreTasks.configureExternalBundlingWebpack),\r\n        configFile: 'configure-webpack-external-bundling.json',\r\n        readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',\r\n        schemaFile: getSchemaFilePath('configure-webpack-external-bundling.schema.json')\r\n      },\r\n      {\r\n        callback: spBuildCoreTasks.copyAssets.mergeConfig.bind(spBuildCoreTasks.copyAssets),\r\n        configFile: 'prepare-deploy.json',\r\n        readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',\r\n        schemaFile: getSchemaFilePath('copy-assets.schema.json')\r\n      },\r\n      {\r\n        callback: spBuildCoreTasks.writeManifests.mergeConfig.bind(spBuildCoreTasks.writeManifests),\r\n        configFile: 'write-manifests.json',\r\n        readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',\r\n        schemaFile: getSchemaFilePath('write-manifests.schema.json')\r\n      },\r\n      {\r\n        callback: spBuildCoreTasks.copyStaticAssets.mergeConfig.bind(spBuildCoreTasks.copyStaticAssets),\r\n        configFile: 'copy-static-assets.json',\r\n        readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',\r\n        schemaFile: getSchemaFilePath('copy-static-assets.schema.json')\r\n      }\r\n    ]);\r\n    // tslint:enable:max-line-length\r\n  }\r\n\r\n  protected getYargs(): yargs.Argv {\r\n    // tslint:disable:max-line-length\r\n    return super.getYargs()\r\n      .option('debug', {\r\n        describe: 'runs tests in unit mode'\r\n      })\r\n      .command(WebBuildRigConstants.tasks.bundle, 'build, localize, and bundle the project')\r\n      .command(WebBuildRigConstants.tasks.deployAzureStorage, 'upload the assets to a development CDN')\r\n      .command(WebBuildRigConstants.tasks.packageSolution, 'package the project into a SPAPP')\r\n      .command(WebBuildRigConstants.tasks.test, 'build, localize, and bundle the project and run tests, and verify the coverage')\r\n      .command(WebBuildRigConstants.tasks.serve, 'build and bundle the project and run the development server')\r\n      .command(WebBuildRigConstants.tasks.devDeploy, 'deploy the current project to a development Azure CDN for sharing builds with colleagues.')\r\n      .command(WebBuildRigConstants.tasks.trustDevCert, 'generates and trusts a development certificate if one isn\\'t already present')\r\n      .command(WebBuildRigConstants.tasks.untrustDevCert, 'untrusts and deletes the development certificate if it exists')\r\n      .command('default', 'equivalent to bundle and test');\r\n    // tslint:enable:max-line-length\r\n  }\r\n\r\n  protected setupSharedConfig(): void {\r\n    super.setupSharedConfig();\r\n\r\n    // @todo VSO Item: 256316 Bump Gulp-Core-Build to TypeScript 2 and remove this\r\n    typescript.taskConfig.typescript = require('typescript');\r\n\r\n    sass.mergeConfig({\r\n      dropCssFiles: true,  // Drops .css files in the lib directory for webpack,\r\n      warnOnNonCSSModules: true\r\n    });\r\n\r\n    karma.mergeConfig({\r\n      configPath: path.resolve(path.join(__dirname, 'karma', 'karma.config.js'))\r\n    });\r\n\r\n    spBuildCoreTasks.configureWebpack.mergeConfig({\r\n      webpack: webpack,\r\n      configureExternalBundlingWebpackTask: spBuildCoreTasks.configureExternalBundlingWebpack\r\n    });\r\n\r\n    spBuildCoreTasks.configureExternalBundlingWebpack.mergeConfig({\r\n      webpack: webpack,\r\n      configureWebpackTask: spBuildCoreTasks.configureWebpack,\r\n      debugLocale: this.args.locale\r\n    });\r\n\r\n    spBuildCoreTasks.writeManifests.mergeConfig({\r\n      debugLocale: this.args.locale\r\n    });\r\n\r\n    if (this.args.production) {\r\n      spBuildCoreTasks.copyAssets.mergeConfig({\r\n        extsToIgnore: ['.map', '.stats.json', '.stats.html']\r\n      });\r\n    }\r\n  }\r\n\r\n  protected finalizeSharedConfig(): void {\r\n    spBuildCoreTasks.writeManifests.mergeConfig({\r\n      deployCdnPath: spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath,\r\n      debugBasePath:\r\n        `${serve.taskConfig.https ? 'https' : 'http'}://localhost:${serve.taskConfig.port}/`\r\n    });\r\n\r\n    if (this.args.production) {\r\n      spBuildCoreTasks.packageSolution.mergeConfig({\r\n        paths: {\r\n          manifestDir: spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  protected getTasks(): Map<string, ITaskDefinition> {\r\n    const result: Map<string, ITaskDefinition> = super.getTasks();\r\n\r\n    result.set(BuildRigConstants.tasks.build, {\r\n      executable: this.getBuildTask()\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.bundle, {\r\n      executable: this.getBundleTask()\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.devDeploy, {\r\n      executable: spBuildCoreTasks.devDeploy\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.deployAzureStorage, {\r\n      executable: spBuildCoreTasks.deployAzureStorage\r\n    });\r\n    result.set(WebBuildRigConstants.tasks.packageSolution, {\r\n      executable: spBuildCoreTasks.packageSolution\r\n    });\r\n\r\n    // @todo VSO #167343\r\n    result.set(WebBuildRigConstants.tasks.test, {\r\n      executable: this.getTestTask(),\r\n      arguments: (yargs: yargs.Argv) => {\r\n        return yargs\r\n          .option('debug', {\r\n            describe: 'run tests in debug mode'\r\n          })\r\n          .option('match', {\r\n            describe: 'regular expression. Only run tests that match',\r\n            string: true\r\n          });\r\n      }\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.serve, {\r\n      executable: serial(result.get(WebBuildRigConstants.tasks.bundle).executable,\r\n        serve,\r\n        watch(['src/**/*.{ts,tsx,scss,resx,js,json,html}',\r\n          '!src/**/*.{scss.ts,resx.ts}'],\r\n          serial(result.get(WebBuildRigConstants.tasks.bundle).executable, reload))),\r\n      arguments: (yargs: yargs.Argv) => {\r\n        return yargs\r\n          .option('port', {\r\n            description: 'the port to serve on should be the next argument (e.g. \"--port 80\")'\r\n          })\r\n          .option('nobrowser', {\r\n            description: 'don\\'t open a browser after initial bundle'\r\n          });\r\n      }\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.trustDevCert, {\r\n      executable: trustDevCert\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.untrustDevCert, {\r\n      executable: untrustDevCert\r\n    });\r\n\r\n    result.set(BuildRigConstants.tasks.default, result.get(WebBuildRigConstants.tasks.bundle));\r\n\r\n    return result;\r\n  }\r\n\r\n  protected getTestTask(): IExecutable {\r\n    return serial(this.getBundleTask(),\r\n                  (WebBuildRigConstants.flags.enableCasperTests\r\n                    ? parallel(spBuildCoreTasks.casperJSRunner, karma)\r\n                    : karma) as IExecutable);\r\n  }\r\n\r\n  protected getCoreBuildTask(): IExecutable {\r\n    return parallel(\r\n      serial(sass, super.getCoreBuildTask()),\r\n      spBuildCoreTasks.copyStaticAssets);\r\n  }\r\n\r\n  protected getBundleTask(): IExecutable {\r\n    return serial(this.getBuildTask(),\r\n                  spBuildCoreTasks.collectLocalizedResources,\r\n                  spBuildCoreTasks.configureWebpack,\r\n                  webpack, // First webpack instance to create the base bundle\r\n                  spBuildCoreTasks.configureExternalBundlingWebpack,\r\n                  // Second webpack instance to optionally expand the base bundle. This task is disabled if\r\n                  //  configureExternalBundlingWebpack isn't configured to do anything\r\n                  webpack,\r\n                  spBuildCoreTasks.copyAssets,\r\n                  spBuildCoreTasks.writeManifests);\r\n  }\r\n}"],"sourceRoot":"..\\src"}