"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var path = require('path');
var gulp_core_build_sass_1 = require('@microsoft/gulp-core-build-sass');
var gulp_core_build_serve_1 = require('@microsoft/gulp-core-build-serve');
var gulp_core_build_webpack_1 = require('@microsoft/gulp-core-build-webpack');
var gulp_core_build_karma_1 = require('@microsoft/gulp-core-build-karma');
var spBuildCoreTasks = require('@microsoft/sp-build-core-tasks');
var sp_build_common_1 = require('@microsoft/sp-build-common');
var WebBuildRigConstants_1 = require('./WebBuildRigConstants');
function getSchemaFilePath(filename) {
    return path.join(__dirname, 'schemas', filename);
}
var SPWebBuildRig = (function (_super) {
    __extends(SPWebBuildRig, _super);
    function SPWebBuildRig() {
        _super.apply(this, arguments);
    }
    SPWebBuildRig.prototype.initialize = function (gulp) {
        _super.prototype.initialize.call(this, gulp);
    };
    SPWebBuildRig.prototype.getCustomConfigs = function () {
        // tslint:disable:max-line-length
        return _super.prototype.getCustomConfigs.call(this).concat([
            {
                callback: gulp_core_build_serve_1.serve.mergeConfig.bind(gulp_core_build_serve_1.serve),
                configFile: 'serve.json',
                readmeUrl: 'https://github.com/Microsoft/gulp-core-build-serve#servetask',
                schemaFile: getSchemaFilePath('serve.schema.json')
            },
            {
                callback: spBuildCoreTasks.deployAzureStorage.mergeConfig.bind(spBuildCoreTasks.deployAzureStorage),
                configFile: 'deploy-azure-storage.json',
                readmeUrl: 'https://github.com/OfficeDev/SharePointUXFramework/wiki/Notes-on-Azure-Deployment#configuration',
                schemaFile: getSchemaFilePath('deploy-azure-storage.schema.json')
            },
            {
                callback: spBuildCoreTasks.packageSolution.mergeConfig.bind(spBuildCoreTasks.packageSolution),
                configFile: 'package-solution.json',
                readmeUrl: 'https://github.com/OfficeDev/SharePointUXFramework/wiki/Notes-on-Solution-Packaging#packaging',
                schemaFile: getSchemaFilePath('package-solution.schema.json')
            },
            {
                callback: gulp_core_build_sass_1.default.mergeConfig.bind(gulp_core_build_sass_1.default),
                configFile: 'sass.json',
                readmeUrl: 'https://github.com/Microsoft/gulp-core-build-sass/blob/master/src/SassTask.ts',
                schemaFile: getSchemaFilePath('sass.schema.json')
            },
            {
                callback: gulp_core_build_webpack_1.default.mergeConfig.bind(gulp_core_build_webpack_1.default),
                configFile: 'webpack.json',
                readmeUrl: 'https://github.com/Microsoft/gulp-core-build-webpack/blob/master/src/WebpackTask.ts',
                schemaFile: getSchemaFilePath('webpack.schema.json')
            },
            {
                callback: gulp_core_build_karma_1.default.mergeConfig.bind(gulp_core_build_karma_1.default),
                configFile: 'karma.json',
                readmeUrl: 'https://github.com/Microsoft/gulp-core-build-karma/blob/master/src/KarmaTask.ts',
                schemaFile: getSchemaFilePath('karma.schema.json')
            },
            {
                callback: spBuildCoreTasks.configureWebpack.mergeConfig.bind(spBuildCoreTasks.configureWebpack),
                configFile: 'configure-webpack.json',
                readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',
                schemaFile: getSchemaFilePath('configure-webpack.schema.json')
            },
            {
                callback: spBuildCoreTasks.configureExternalBundlingWebpack.mergeConfig.bind(spBuildCoreTasks.configureExternalBundlingWebpack),
                configFile: 'configure-webpack-external-bundling.json',
                readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',
                schemaFile: getSchemaFilePath('configure-webpack-external-bundling.schema.json')
            },
            {
                callback: spBuildCoreTasks.copyAssets.mergeConfig.bind(spBuildCoreTasks.copyAssets),
                configFile: 'prepare-deploy.json',
                readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',
                schemaFile: getSchemaFilePath('copy-assets.schema.json')
            },
            {
                callback: spBuildCoreTasks.writeManifests.mergeConfig.bind(spBuildCoreTasks.writeManifests),
                configFile: 'write-manifests.json',
                readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',
                schemaFile: getSchemaFilePath('write-manifests.schema.json')
            },
            {
                callback: spBuildCoreTasks.copyStaticAssets.mergeConfig.bind(spBuildCoreTasks.copyStaticAssets),
                configFile: 'copy-static-assets.json',
                readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',
                schemaFile: getSchemaFilePath('copy-static-assets.schema.json')
            }
        ]);
        // tslint:enable:max-line-length
    };
    SPWebBuildRig.prototype.getYargs = function () {
        // tslint:disable:max-line-length
        return _super.prototype.getYargs.call(this)
            .option('debug', {
            describe: 'runs tests in unit mode'
        })
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle, 'build, localize, and bundle the project')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.deployAzureStorage, 'upload the assets to a development CDN')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.packageSolution, 'package the project into a SPAPP')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.test, 'build, localize, and bundle the project and run tests, and verify the coverage')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.serve, 'build and bundle the project and run the development server')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.devDeploy, 'deploy the current project to a development Azure CDN for sharing builds with colleagues.')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.trustDevCert, 'generates and trusts a development certificate if one isn\'t already present')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.untrustDevCert, 'untrusts and deletes the development certificate if it exists')
            .command('default', 'equivalent to bundle and test');
        // tslint:enable:max-line-length
    };
    SPWebBuildRig.prototype.setupSharedConfig = function () {
        _super.prototype.setupSharedConfig.call(this);
        // @todo VSO Item: 256316 Bump Gulp-Core-Build to TypeScript 2 and remove this
        sp_build_common_1.typescript.taskConfig.typescript = require('typescript');
        gulp_core_build_sass_1.default.mergeConfig({
            dropCssFiles: true,
            warnOnNonCSSModules: true
        });
        gulp_core_build_karma_1.default.mergeConfig({
            configPath: path.resolve(path.join(__dirname, 'karma', 'karma.config.js'))
        });
        spBuildCoreTasks.configureWebpack.mergeConfig({
            webpack: gulp_core_build_webpack_1.default,
            configureExternalBundlingWebpackTask: spBuildCoreTasks.configureExternalBundlingWebpack
        });
        spBuildCoreTasks.configureExternalBundlingWebpack.mergeConfig({
            webpack: gulp_core_build_webpack_1.default,
            configureWebpackTask: spBuildCoreTasks.configureWebpack,
            debugLocale: this.args.locale
        });
        spBuildCoreTasks.writeManifests.mergeConfig({
            debugLocale: this.args.locale
        });
        if (this.args.production) {
            spBuildCoreTasks.copyAssets.mergeConfig({
                extsToIgnore: ['.map', '.stats.json', '.stats.html']
            });
        }
    };
    SPWebBuildRig.prototype.finalizeSharedConfig = function () {
        spBuildCoreTasks.writeManifests.mergeConfig({
            deployCdnPath: spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath,
            debugBasePath: (gulp_core_build_serve_1.serve.taskConfig.https ? 'https' : 'http') + "://localhost:" + gulp_core_build_serve_1.serve.taskConfig.port + "/"
        });
        if (this.args.production) {
            spBuildCoreTasks.packageSolution.mergeConfig({
                paths: {
                    manifestDir: spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath
                }
            });
        }
    };
    SPWebBuildRig.prototype.getTasks = function () {
        var result = _super.prototype.getTasks.call(this);
        result.set(sp_build_common_1.BuildRigConstants.tasks.build, {
            executable: this.getBuildTask()
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle, {
            executable: this.getBundleTask()
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.devDeploy, {
            executable: spBuildCoreTasks.devDeploy
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.deployAzureStorage, {
            executable: spBuildCoreTasks.deployAzureStorage
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.packageSolution, {
            executable: spBuildCoreTasks.packageSolution
        });
        // @todo VSO #167343
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.test, {
            executable: this.getTestTask(),
            arguments: function (yargs) {
                return yargs
                    .option('debug', {
                    describe: 'run tests in debug mode'
                })
                    .option('match', {
                    describe: 'regular expression. Only run tests that match',
                    string: true
                });
            }
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.serve, {
            executable: sp_build_common_1.serial(result.get(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle).executable, gulp_core_build_serve_1.serve, sp_build_common_1.watch(['src/**/*.{ts,tsx,scss,resx,js,json,html}',
                '!src/**/*.{scss.ts,resx.ts}'], sp_build_common_1.serial(result.get(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle).executable, gulp_core_build_serve_1.reload))),
            arguments: function (yargs) {
                return yargs
                    .option('port', {
                    description: 'the port to serve on should be the next argument (e.g. "--port 80")'
                })
                    .option('nobrowser', {
                    description: 'don\'t open a browser after initial bundle'
                });
            }
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.trustDevCert, {
            executable: gulp_core_build_serve_1.trustDevCert
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.untrustDevCert, {
            executable: gulp_core_build_serve_1.untrustDevCert
        });
        result.set(sp_build_common_1.BuildRigConstants.tasks.default, result.get(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle));
        return result;
    };
    SPWebBuildRig.prototype.getTestTask = function () {
        return sp_build_common_1.serial(this.getBundleTask(), (WebBuildRigConstants_1.WebBuildRigConstants.flags.enableCasperTests
            ? sp_build_common_1.parallel(spBuildCoreTasks.casperJSRunner, gulp_core_build_karma_1.default)
            : gulp_core_build_karma_1.default));
    };
    SPWebBuildRig.prototype.getCoreBuildTask = function () {
        return sp_build_common_1.parallel(sp_build_common_1.serial(gulp_core_build_sass_1.default, _super.prototype.getCoreBuildTask.call(this)), spBuildCoreTasks.copyStaticAssets);
    };
    SPWebBuildRig.prototype.getBundleTask = function () {
        return sp_build_common_1.serial(this.getBuildTask(), spBuildCoreTasks.collectLocalizedResources, spBuildCoreTasks.configureWebpack, gulp_core_build_webpack_1.default, // First webpack instance to create the base bundle
        spBuildCoreTasks.configureExternalBundlingWebpack, 
        // Second webpack instance to optionally expand the base bundle. This task is disabled if
        //  configureExternalBundlingWebpack isn't configured to do anything
        gulp_core_build_webpack_1.default, spBuildCoreTasks.copyAssets, spBuildCoreTasks.writeManifests);
    };
    return SPWebBuildRig;
}(sp_build_common_1.SPBuildRig));
exports.SPWebBuildRig = SPWebBuildRig;

//# sourceMappingURL=SPWebBuildRig.js.map
