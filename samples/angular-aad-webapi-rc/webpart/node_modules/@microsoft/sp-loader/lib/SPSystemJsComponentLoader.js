"use strict";
require('set-webpack-public-path!');
var sp_core_library_1 = require('@microsoft/sp-core-library');
var sp_telemetry_1 = require('@ms/sp-telemetry');
var SystemJsLoader_1 = require('./SystemJsLoader');
var ManifestStore_1 = require('./stores/ManifestStore');
var ComponentStore_1 = require('./stores/ComponentStore');
var DebugManifestPrompt_1 = require('./DebugManifestPrompt');
var DebugManifestProvider_1 = require('./DebugManifestProvider');
var componentConstants = require('./utilities/componentConstants');
var telemetryConstants = require('./utilities/telemetryConstants');
var normalizeName_1 = require('./normalizeName');
var stringFormat_1 = require('./utilities/stringFormat');
var SPLoader_resx_1 = require('./SPLoader.resx');
var SPSystemJsComponentLoader = (function () {
    function SPSystemJsComponentLoader() {
        if (!SPSystemJsComponentLoader._headElement) {
            SPSystemJsComponentLoader._headElement = document.getElementsByTagName('head')[0];
        }
        this._systemJsLoader = SystemJsLoader_1.default.instance;
    }
    SPSystemJsComponentLoader.prototype.start = function (preloadedData) {
        var _this = this;
        var qosMonitor = new sp_telemetry_1._QosMonitor(telemetryConstants.startQosScenarioName);
        var result = new Promise(function (resolve, reject) {
            _this._initialize(preloadedData).then(function () {
                if (preloadedData) {
                    var applicationManifestId = preloadedData.clientSideApplicationId
                        ? preloadedData.clientSideApplicationId
                        : (preloadedData.clientSideApplicationManifest
                            ? preloadedData.clientSideApplicationManifest.id
                            : undefined);
                    var applicationManifest_1 = ManifestStore_1.default.instance.getManifest(applicationManifestId);
                    var platformManifest = ManifestStore_1.default.instance.getManifest(componentConstants.spClientPreviewComponentId);
                    if (applicationManifest_1 && platformManifest) {
                        var loadingComplete_1 = false;
                        Promise.all([
                            _this.loadComponent(platformManifest),
                            _this.loadComponent(applicationManifest_1)
                        ])
                            .then(function (modules) {
                            loadingComplete_1 = true;
                            var platform = modules[0]; 
                            var application = modules[1];
                            if (!platform || !application) {
                                reject(new Error(stringFormat_1.default(SPLoader_resx_1.default.platformOrApplicationFailedToLoadError, componentConstants.spClientPreviewName, applicationManifest_1.loaderConfig.entryModuleId)));
                            }
                            else {
                                platform._spShell.start(application, preloadedData)
                                    .then(function (application) {
                                    qosMonitor.writeSuccess();
                                    resolve(application);
                                })
                                    .catch(function (error) {
                                    console.error(stringFormat_1.default(SPLoader_resx_1.default.applicationFailedToInitializeError, error));
                                    qosMonitor.writeExpectedFailure(telemetryConstants.shellStartExpectedFailure, error);
                                    reject(error);
                                });
                            }
                        }).catch(function (e) {
                            if (!loadingComplete_1) {
                                console.error(stringFormat_1.default(SPLoader_resx_1.default.applicationFailedToLoadError, applicationManifest_1.loaderConfig.entryModuleId, e));
                            }
                            qosMonitor.writeUnexpectedFailure(undefined, e);
                            reject(e);
                        });
                    }
                    else {
                        var error = new Error(stringFormat_1.default(SPLoader_resx_1.default.invalidManifestError, applicationManifestId));
                        qosMonitor.writeExpectedFailure(telemetryConstants.invalidManifestExpectedFailure, error);
                        reject(error);
                    }
                }
                else {
                    var error = new Error(SPLoader_resx_1.default.invaliPreloadedDataError);
                    qosMonitor.writeExpectedFailure(telemetryConstants.invalidPreloadedDataExpectedFailure, error);
                    reject(error);
                }
            });
        });
        result.catch(function (error) {
            console.error(error);
            throw error;
        });
        return result;
    };
    SPSystemJsComponentLoader.prototype.loadScript = function (url, options) {
        sp_core_library_1.Validate.isNonemptyString(url, 'url');
        if (options && options.globalExportsName) {
            var globalMetaConfig = {
                meta: {}
            };
            globalMetaConfig.meta[url] = {
                format: 'global',
                exports: options.globalExportsName
            };
            this._systemJsLoader.systemConfig(globalMetaConfig);
        }
        return this._systemJsLoader.systemImport(url);
    };
    SPSystemJsComponentLoader.prototype.loadComponent = function (manifest) {
        sp_core_library_1.Validate.isNotNullOrUndefined(manifest, 'manifest');
        var cachedModule = ComponentStore_1.default.instance.getComponentById(manifest.id);
        if (cachedModule) {
            return cachedModule;
        }
        this._systemJsLoader.configure(manifest);
        this._loadComponentDependencies(manifest);
        this._loadPathDependencies(manifest);
        return this._loadEntryPoint(manifest);
    };
    SPSystemJsComponentLoader.prototype.loadComponentById = function (id, version) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        var manifest = ManifestStore_1.default.instance.getManifest(id);
        return this.loadComponent(manifest);
    };
    SPSystemJsComponentLoader.prototype.registerManifests = function (manifests) {
        ManifestStore_1.default.instance.registerManifests(manifests, false);
    };
    Object.defineProperty(SPSystemJsComponentLoader.prototype, "manifests", {
        get: function () {
            return ManifestStore_1.default.instance.getRegisteredManifests();
        },
        enumerable: true,
        configurable: true
    });
    SPSystemJsComponentLoader.prototype.loadCss = function (url) {
        sp_core_library_1.Validate.isNonemptyString(url, 'url');
        var linkTag = document.createElement('link');
        linkTag.rel = 'stylesheet';
        linkTag.type = 'text/css';
        linkTag.href = url;
        SPSystemJsComponentLoader._headElement.appendChild(linkTag);
    };
    SPSystemJsComponentLoader.prototype._forceLocalManifests = function () {
        return this._loadDebugManifests(true, true, ['https://localhost:4321/temp/manifests.js',
            'http://localhost:4321/temp/manifests.js'], true);
    };
    SPSystemJsComponentLoader.prototype.getManifestById = function (id, version) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        return ManifestStore_1.default.instance.getManifest(id);
    };
    SPSystemJsComponentLoader.prototype._initialize = function (preloadedData) {
        var _this = this;
        return new Promise(function (resolve) {
            ManifestStore_1.default.instance.registerPreloadedManifests(preloadedData);
            _this._loadDebugManifests().then(function () {
                if (preloadedData && preloadedData.spPageContextInfo) {
                    SPSystemJsComponentLoader._currentLocale = preloadedData.spPageContextInfo.currentUICultureName;
                }
                if (NPM_BUILD) {
                    ManifestStore_1.default.instance.registerManifests([
                        require("@ms/sp-telemetry/dist/" + componentConstants.spTelemetryComponentId + ".manifest.json"),
                        require("@ms/odsp-utilities-bundle/dist/" + componentConstants.odspUtilitiesBundleComponentId + ".manifest.json")
                    ], false);
                }
                _this._setComponent(ManifestStore_1.default.instance.getManifest(componentConstants.spLoaderComponentId), require('./index'));
                _this._setComponent(ManifestStore_1.default.instance.getManifest(componentConstants.spCoreLibraryComponentId), require('@microsoft/sp-core-library'));
                _this._setComponent(ManifestStore_1.default.instance.getManifest(componentConstants.spLodashSubsetComponentId), require('@microsoft/sp-lodash-subset'));
                _this._setComponent(ManifestStore_1.default.instance.getManifest(componentConstants.spTelemetryComponentId), require('@ms/sp-telemetry'));
                _this._setComponent(ManifestStore_1.default.instance.getManifest(componentConstants.odspUtilitiesBundleComponentId), require('@ms/sp-telemetry/lib/odsp-utilities/odsp-utilities-exporter'));
                resolve();
            });
        });
    };
    SPSystemJsComponentLoader.prototype._setComponent = function (manifest, componentModule) {
        if (!manifest) {
            return;
        }
        var normalizedName = normalizeName_1.default(manifest);
        this._systemJsLoader.ensure(normalizedName, componentModule);
        ComponentStore_1.default.instance.storeComponentById(manifest.id, Promise.resolve(componentModule));
    };
    SPSystemJsComponentLoader.prototype._loadComponentDependencies = function (manifest) {
        var resources = manifest.loaderConfig.scriptResources;
        var _loop_1 = function(name_1) {
            if (resources[name_1].type === 'component' && !resources[name_1].shouldNotPreload) {
                var moduleConfiguration_1 = resources[name_1];
                try {
                    var resourceManifest = ManifestStore_1.default.instance.getManifest(moduleConfiguration_1.id);
                    if (!resourceManifest) {
                        throw new Error(stringFormat_1.default(SPLoader_resx_1.default.manifestNotFoundError, moduleConfiguration_1.id));
                    }
                    this_1.loadComponent(resourceManifest).catch(function (error) {
                        sp_core_library_1.Log.error(SPSystemJsComponentLoader._loadComponentLogSource, new Error(stringFormat_1.default(SPLoader_resx_1.default.loadComponentDependencyError, name_1, manifest.id, manifest.alias)));
                    });
                }
                catch (error) {
                    if (moduleConfiguration_1.failoverPath) {
                        this_1._systemJsLoader.systemImport(normalizeName_1.normalizeFailoverPathName(name_1)).catch(function (error) {
                            sp_core_library_1.Log.error(SPSystemJsComponentLoader._loadComponentLogSource, new Error(stringFormat_1.default(SPLoader_resx_1.default.loadComponentDependencyFailoverPathError, name_1, moduleConfiguration_1.failoverPath, manifest.id, manifest.alias)));
                        });
                    }
                    else {
                        throw error;
                    }
                }
            }
        };
        var this_1 = this;
        for (var name_1 in resources) {
            _loop_1(name_1);
        }
    };
    SPSystemJsComponentLoader.prototype._loadPathDependencies = function (manifest) {
        var resources = manifest.loaderConfig.scriptResources;
        var _loop_2 = function(name_2) {
            if ((resources[name_2].type === 'path' || resources[name_2].type === 'localizedPath')
                && !resources[name_2].shouldNotPreload) {
                if (name_2 !== manifest.loaderConfig.entryModuleId) {
                    this_2._systemJsLoader.systemImport(normalizeName_1.default(manifest, name_2)).catch(function (error) {
                        sp_core_library_1.Log.error(SPSystemJsComponentLoader._loadComponentLogSource, new Error(stringFormat_1.default(SPLoader_resx_1.default.loadPathDependencyError, name_2, manifest.id, manifest.alias)));
                    });
                }
            }
        };
        var this_2 = this;
        for (var name_2 in resources) {
            _loop_2(name_2);
        }
    };
    SPSystemJsComponentLoader.prototype._loadEntryPoint = function (manifest) {
        var _this = this;
        var entryPointModule = this._systemJsLoader.systemImport(normalizeName_1.default(manifest)).catch(function (error) {
            sp_core_library_1.Log.error(SPSystemJsComponentLoader._loadComponentLogSource, new Error(stringFormat_1.default(SPLoader_resx_1.default.loadEntryPointError, manifest.id, manifest.alias)));
            throw new Error(stringFormat_1.default(SPLoader_resx_1.default.loadComponentError, manifest.id, manifest.alias, error.message));
        });
        this._saveModuleInComponentStore(manifest, entryPointModule);
        return entryPointModule.then(function (module) {
            return _this._getExportFromModule(manifest, module);
        });
    };
    SPSystemJsComponentLoader.prototype._saveModuleInComponentStore = function (manifest, module) {
        ComponentStore_1.default.instance.storeComponentById(manifest.id, module);
        if (manifest.loaderConfig.exportName) {
            ComponentStore_1.default.instance.storeComponentById(manifest.id, module.then(function (loadedModule) {
                return loadedModule[manifest.loaderConfig.exportName];
            }));
        }
    };
    SPSystemJsComponentLoader.prototype._getExportFromModule = function (manifest, module) {
        var retValue = module;
        if (manifest.loaderConfig.exportName) {
            retValue = module[manifest.loaderConfig.exportName];
            this._systemJsLoader.ensure(normalizeName_1.default(manifest, manifest.loaderConfig.exportName), retValue);
        }
        return retValue;
    };
    SPSystemJsComponentLoader.prototype._loadDebugManifests = function (noPrompt, noCache, alternativeManifestsFiles, noAlert) {
        if (noPrompt === void 0) { noPrompt = false; }
        if (noCache === void 0) { noCache = false; }
        if (noAlert === void 0) { noAlert = false; }
        if (noPrompt) {
            DebugManifestPrompt_1.default.instance.dangerouslyForce();
        }
        return DebugManifestProvider_1.default.instance.getDebugManifests(noCache, alternativeManifestsFiles, noAlert).then(function (debugManifests) {
            ManifestStore_1.default.instance.registerDebugManifests(debugManifests);
            return DebugManifestPrompt_1.default.instance.
                ensureDebugAllowed(!!debugManifests && Object.keys(debugManifests).length > 0).then(function (result) {
            });
        });
    };
    SPSystemJsComponentLoader._loadComponentLogSource = 'SPComponentLoader.loadComponent';
    return SPSystemJsComponentLoader;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPSystemJsComponentLoader;
