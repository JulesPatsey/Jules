"use strict";
var chai_1 = require('chai');
var SPSystemJsComponentLoader_1 = require('./../SPSystemJsComponentLoader');
var normalizeName_1 = require('./../normalizeName');
var ComponentStore_1 = require('./../stores/ComponentStore');
var SystemJsLoader_1 = require('./../SystemJsLoader');
var TestManifests_1 = require('./TestManifests');
describe('SPSystemJsComponentLoader tests', function () {
    var componentLoader;
    before(function () {
        componentLoader = new SPSystemJsComponentLoader_1.default();
    });
    describe('System.config()', function () {
        it('throws if called', function () {
            chai_1.assert.throws(function () { System.config({}); });
        });
    });
    describe('loadScript()', function () {
        var systemJsLoaderMock;
        beforeEach(function () {
            systemJsLoaderMock = sinon.mock(SystemJsLoader_1.default.instance);
        });
        afterEach(function () {
            systemJsLoaderMock.restore();
        });
        it('loads script without global name', function () {
            var url = 'thisIsAUrl';
            var retValue = new Promise(function () { }); 
            systemJsLoaderMock.expects('systemConfig').never();
            systemJsLoaderMock.expects('systemImport').once().withExactArgs(url).returns(retValue);
            var module = componentLoader.loadScript(url); 
            chai_1.assert.equal(module, retValue);
            systemJsLoaderMock.verify();
        });
        it('loads script with global name', function () {
            var url = 'thisIsAUrl';
            var options = {
                globalExportsName: 'thisIsAName'
            };
            var configMeta = {}; 
            configMeta[url] = {
                format: 'global',
                exports: options.globalExportsName
            };
            var systemJsConfig = {
                meta: configMeta
            };
            var retValue = new Promise(function () { }); 
            systemJsLoaderMock.expects('systemConfig').once().withExactArgs(systemJsConfig);
            systemJsLoaderMock.expects('systemImport').once().withExactArgs(url).returns(retValue);
            var module = componentLoader.loadScript(url, options); 
            chai_1.assert.equal(module, retValue);
            systemJsLoaderMock.verify();
        });
    });
    describe('loadComponent()', function () {
        it('loads component from cache, if available', function (done) {
            var expectedOutput = 'thisIsTheModuleObject';
            var retValue = new Promise(function (resolve) { resolve(expectedOutput); });
            var componentStoreMock = sinon.mock(ComponentStore_1.default.instance);
            componentStoreMock.expects('getComponentById').once().withArgs(TestManifests_1.manifest.id).returns(retValue);
            var systemMock = sinon.mock(System);
            systemMock.expects('import').never();
            var actualOutput = componentLoader.loadComponent(TestManifests_1.manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                componentStoreMock.verify();
                componentStoreMock.restore();
                systemMock.verify();
                systemMock.restore();
                done();
            });
        });
        it('loads component without dependencies', function (done) {
            var expectedOutput = 'thisIsTheModuleObject';
            var retValue = new Promise(function (resolve) { resolve(expectedOutput); });
            var normalizedName = normalizeName_1.default(TestManifests_1.manifest);
            var systemMock = sinon.mock(System);
            systemMock.expects('import').once().withArgs(normalizedName).returns(retValue);
            var actualOutput = componentLoader.loadComponent(TestManifests_1.manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                chai_1.assert.isDefined(System.packages[normalizedName]); 
                systemMock.verify();
                systemMock.restore();
                done();
            });
        });
    });
});
