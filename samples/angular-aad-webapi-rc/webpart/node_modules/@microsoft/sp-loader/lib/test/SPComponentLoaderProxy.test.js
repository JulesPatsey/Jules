"use strict";
var chai_1 = require('chai');
var SPComponentLoaderProxy_1 = require('./../SPComponentLoaderProxy');
var MockSPComponentLoader_1 = require('./mocks/MockSPComponentLoader');
var TestManifests_1 = require('./TestManifests');
var componentLoaderImpl = new MockSPComponentLoader_1.default();
describe('SPComponentLoaderProxy tests', function () {
    describe('SPComponentLoaderProxy is initialized', function () {
        before(function () {
            SPComponentLoaderProxy_1.default.initialize(componentLoaderImpl);
        });
        after(function () {
            SPComponentLoaderProxy_1.default._instance = undefined; 
        });
        describe('loadCss(string)', function () {
            it('loadCss(string) calls real instance', function () {
                var loadCssSpy = sinon.spy(componentLoaderImpl, 'loadCss');
                var str = 'thisIsAString';
                SPComponentLoaderProxy_1.default.loadCss(str);
                chai_1.assert.isTrue(loadCssSpy.calledOnce);
                chai_1.assert.isTrue(loadCssSpy.calledWithExactly(str));
                loadCssSpy.restore();
            });
        });
        describe('loadScript(string, ILoadScriptOptions?)', function () {
            var loadScriptSpy;
            beforeEach(function () {
                loadScriptSpy = sinon.spy(componentLoaderImpl, 'loadScript');
            });
            afterEach(function () {
                loadScriptSpy.restore();
            });
            it('loadScript(string) calls real instance', function () {
                var str = 'thisIsAString';
                SPComponentLoaderProxy_1.default.loadScript(str);
                chai_1.assert.isTrue(loadScriptSpy.calledOnce);
                chai_1.assert.isTrue(loadScriptSpy.calledWithExactly(str, undefined));
            });
            it('loadScript(string, ILoadScriptOptions) calls real instance', function () {
                var str = 'thisIsAString';
                var options = {};
                SPComponentLoaderProxy_1.default.loadScript(str, options);
                chai_1.assert.isTrue(loadScriptSpy.calledOnce);
                chai_1.assert.isTrue(loadScriptSpy.calledWithExactly(str, options));
            });
        });
        describe('loadComponent(IClientSideComponentManifest)', function () {
            it('loadComponent(IClientSideComponentManifest) calls real instance', function () {
                var loadComponentSpy = sinon.spy(componentLoaderImpl, 'loadComponent');
                SPComponentLoaderProxy_1.default.loadComponent(TestManifests_1.manifest);
                chai_1.assert.isTrue(loadComponentSpy.calledOnce);
                chai_1.assert.isTrue(loadComponentSpy.calledWithExactly(TestManifests_1.manifest));
                loadComponentSpy.restore();
            });
        });
        describe('loadComponentById(string, string?)', function () {
            var loadComponentByIdSpy;
            beforeEach(function () {
                loadComponentByIdSpy = sinon.spy(componentLoaderImpl, 'loadComponentById');
            });
            afterEach(function () {
                loadComponentByIdSpy.restore();
            });
            it('loadComponentById(string) calls real instance', function () {
                var id = 'thisIsAnId';
                loadComponentByIdSpy.reset();
                SPComponentLoaderProxy_1.default.loadComponentById(id);
                chai_1.assert.isTrue(loadComponentByIdSpy.calledOnce);
                chai_1.assert.isTrue(loadComponentByIdSpy.calledWithExactly(id, undefined));
            });
            it('loadComponentById(string, string) calls real instance', function () {
                var id = 'thisIsAnId';
                var version = 'thisIsAVersion';
                loadComponentByIdSpy.reset();
                SPComponentLoaderProxy_1.default.loadComponentById(id, version);
                chai_1.assert.isTrue(loadComponentByIdSpy.calledOnce);
                chai_1.assert.isTrue(loadComponentByIdSpy.calledWithExactly(id, version));
            });
        });
        describe('registerManifests(IClientSideComponentManifest)', function () {
            it('registerManifests(IClientSideComponentManifest) calls real instance', function () {
                var registerManifestsSpy = sinon.spy(componentLoaderImpl, 'registerManifests');
                SPComponentLoaderProxy_1.default.registerManifests([TestManifests_1.manifest]);
                chai_1.assert.isTrue(registerManifestsSpy.calledOnce);
                chai_1.assert.isTrue(registerManifestsSpy.calledWithExactly([TestManifests_1.manifest]));
                registerManifestsSpy.restore();
            });
        });
        describe('getManifestById(string, string?)', function () {
            var getManifestByIdSpy;
            beforeEach(function () {
                getManifestByIdSpy = sinon.spy(componentLoaderImpl, 'getManifestById');
            });
            afterEach(function () {
                getManifestByIdSpy.restore();
            });
            it('getManifestById(string) calls real instance', function () {
                var id = 'thisIsAnId';
                getManifestByIdSpy.reset();
                SPComponentLoaderProxy_1.default.getManifestById(id);
                chai_1.assert.isTrue(getManifestByIdSpy.calledOnce);
                chai_1.assert.isTrue(getManifestByIdSpy.calledWithExactly(id, undefined));
            });
            it('getManifestById(string, string) calls real instance', function () {
                var id = 'thisIsAnId';
                var version = 'thisIsAVersion';
                getManifestByIdSpy.reset();
                SPComponentLoaderProxy_1.default.getManifestById(id, version);
                chai_1.assert.isTrue(getManifestByIdSpy.calledOnce);
                chai_1.assert.isTrue(getManifestByIdSpy.calledWithExactly(id, version));
            });
        });
        describe('_forceLocalManifests()', function () {
            it('_forceLocalManifests() calls real instance', function () {
                var _forceLocalManifestsSpy = sinon.spy(componentLoaderImpl, '_forceLocalManifests');
                SPComponentLoaderProxy_1.default._forceLocalManifests();
                chai_1.assert.isTrue(_forceLocalManifestsSpy.calledOnce);
                _forceLocalManifestsSpy.restore();
            });
        });
        describe('start()', function () {
            it('start() calls real instance', function () {
                var startSpy = sinon.spy(componentLoaderImpl, 'start');
                var applicationData = {
                    clientSideApplicationId: undefined,
                    clientSideApplicationManifest: undefined,
                    manifests: undefined,
                    spPageContextInfo: undefined
                };
                SPComponentLoaderProxy_1.default.start(applicationData);
                chai_1.assert.isTrue(startSpy.calledOnce);
                chai_1.assert.isTrue(startSpy.calledWithExactly(applicationData));
                startSpy.restore();
            });
        });
    });
});
