"use strict";
var chai_1 = require('chai');
var ManifestStore_1 = require('../stores/ManifestStore');
require('es6-collections');
describe('ManifestStore tests', function () {
    describe('Adding an internal manifest', function () {
        var imageWebPartId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var imageWebPartAlias = 'ImageWebpart';
        var webpartManifest = {
            manifestVersion: 2,
            componentType: 'WebPart',
            id: imageWebPartId,
            alias: imageWebPartAlias,
            isInternal: true,
            version: '0.0.1',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            },
            preconfiguredEntries: []
        };
        before(function () {
            ManifestStore_1.default.instance.registerManifests([webpartManifest], true);
        });
        it('should get isInternal as true', function (done) {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(imageWebPartId);
            chai_1.assert.isTrue(fetchedManifest.isInternal);
            done();
        });
        it('should get alias back', function (done) {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(imageWebPartId);
            chai_1.assert.equal(fetchedManifest.alias, imageWebPartAlias);
            done();
        });
    });
    describe('Adding a third-party manifest', function () {
        var customWebPartId = '00000000-0000-0000-0000-000000000000';
        var customWebPartAlias = 'CustomWebpart';
        var webpartManifest = {
            manifestVersion: 2,
            componentType: 'WebPart',
            id: customWebPartId,
            alias: customWebPartAlias,
            version: '0.0.1',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            },
            preconfiguredEntries: []
        };
        before(function () {
            ManifestStore_1.default.instance.registerManifests([webpartManifest], true);
        });
        it('should get isInternal as false', function (done) {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(customWebPartId);
            chai_1.assert.isFalse(!!fetchedManifest.isInternal);
            done();
        });
        it('should get alias back', function (done) {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(customWebPartId);
            chai_1.assert.equal(fetchedManifest.alias, customWebPartAlias);
            done();
        });
    });
});
