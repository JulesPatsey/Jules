/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file ManifestStore.ts
 */
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { IApplicationPreloadedData } from './../ISPComponentLoader';
export interface IManifestStoreEntry {
    /**
     * The manifest's ID.
     */
    id: string;
    /**
     * The manifest V2 payload.
     */
    manifest: IClientSideComponentManifest;
    /**
     * A debug manifest V2 payload, if one has been provided.
     */
    debugManifest?: IClientSideComponentManifest;
}
/**
 * This class maintains a cache of the manifests on the current page.
 */
export default class ManifestStore {
    private static _instance;
    static readonly instance: ManifestStore;
    private _manifests;
    /**
     * Register the preloaded manifests on the manifest store.
     *
     * @param preloadedData - The preloaded data
     *
     * @internal
     */
    registerPreloadedManifests(preloadedData: IApplicationPreloadedData): void;
    /**
     * Register debug manifests on the manifest store.
     *
     * @param manifests - A dictionary of debug manifests.
     *
     * @internal
     */
    registerDebugManifests(manifests: {
        [id: string]: IClientSideComponentManifest;
    }): void;
    /**
     * Return a manifest by its component id and version.
     *
     * If version is not provided, it will return the only available version. If more than
     * one version is available and version is not provided, returns undefined.
     *
     * Only return a debug manifest is debug is allowed. If a manifest isn't found by
     * the provided id, return undefined.
     *
     * @param id      - The component id of the manifest to retrieve.
     * @param version - The version of the component of the manifest to retrieve.
     * @returns         The retrieved manifest, or undefined if one could not be found.
     */
    getManifest(id: string, version?: string): IClientSideComponentManifest;
    /**
     * Get all registered manifests.
     *
     * @returns The registered manifests.
     */
    getRegisteredManifests(): IClientSideComponentManifest[];
    /**
     * Returns a map of manifest IDs to manfiests.
     *
     * @return {{ [key: string]: IManifestStoreEntry }}: A map of manifest IDs to manfiests.
     *
     * @internal
     */
    getManifestMap(): {
        [key: string]: IManifestStoreEntry;
    };
    /**
     * Loads additional manifests into the manifest store, updating existing manifests.
     *
     * @param manifests - The manifests to load into the store.
     */
    registerManifests(manifests: IClientSideComponentManifest[], overwriteExisting: boolean): void;
    /**
     * This function contains some magic to load special packages (React and React-DOM) while we're serving
     *  from a local workbench without bunding any of them. This function shouldn't have any effect in any context other
     *  than the local workbench and for specific packages.
     */
    private _initializeNpmModule();
    private _getManifestFromStoreEntry(manifestEntry);
    private _addManifest(manifest, overwriteExisting);
}
