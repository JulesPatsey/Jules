"use strict";
var DebugManifestPrompt_1 = require('./../DebugManifestPrompt');
var componentConstants = require('./../utilities/componentConstants');
var ManifestStore = (function () {
    function ManifestStore() {
        this._manifests = new Map();
    }
    Object.defineProperty(ManifestStore, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new ManifestStore();
                this._instance._initializeNpmModule();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    ManifestStore.prototype.registerPreloadedManifests = function (preloadedData) {
        if (preloadedData) {
            if (preloadedData.clientSideApplicationManifest) {
                this._addManifest(preloadedData.clientSideApplicationManifest, true);
            }
            if (preloadedData.manifests && preloadedData.manifests.length) {
                this.registerManifests(preloadedData.manifests, true);
            }
        }
        var globalManifests = window.g_webPartManifests;
        if (globalManifests && globalManifests.length) {
            this.registerManifests(globalManifests, true);
        }
    };
    ManifestStore.prototype.registerDebugManifests = function (manifests) {
        if (manifests) {
            for (var id in manifests) {
                if (!this._manifests.get(id)) {
                    this._manifests.set(id, {
                        id: id,
                        manifest: undefined
                    });
                }
                this._manifests.get(id).debugManifest = manifests[id];
            }
        }
    };
    ManifestStore.prototype.getManifest = function (id, version) {
        var manifestEntry = this._manifests.get(id);
        return this._getManifestFromStoreEntry(manifestEntry);
    };
    ManifestStore.prototype.getRegisteredManifests = function () {
        var _this = this;
        var result = [];
        this._manifests.forEach(function (manifestEntry) {
            var manifest = _this._getManifestFromStoreEntry(manifestEntry);
            if (manifest) {
                result.push(manifest);
            }
        });
        return result;
    };
    ManifestStore.prototype.getManifestMap = function () {
        var result = {};
        this._manifests.forEach(function (value, key) { return result[key] = value; });
        return result;
    };
    ManifestStore.prototype.registerManifests = function (manifests, overwriteExisting) {
        var _this = this;
        manifests.forEach(function (manifest) { return _this._addManifest(manifest, overwriteExisting); });
    };
    ManifestStore.prototype._initializeNpmModule = function () {
        if (NPM_BUILD) {
            var url = require('url');
            var relativeReactUrl = '__RELATIVE_REACT_PATH__'; 
            var relativeReactDomUrl = '__RELATIVE_REACT_DOM_PATH__'; 
            if (relativeReactUrl !== '__RELATIVE_' + 'REACT_PATH__' &&
                relativeReactDomUrl !== '__RELATIVE_' + 'REACT_DOM_PATH__') {
                var reactUrl = url.resolve(__webpack_public_path__, relativeReactUrl);
                var reactManifest = {
                    id: componentConstants.reactComponentId,
                    manifestVersion: 2,
                    componentType: 'Library',
                    alias: 'react',
                    version: '__REACT_VERSION__',
                    loaderConfig: {
                        internalModuleBaseUrls: [],
                        entryModuleId: 'react',
                        scriptResources: {
                            'react': {
                                type: 'path',
                                path: reactUrl
                            }
                        }
                    }
                };
                this._addManifest(reactManifest, false);
                var reactDomUrl = url.resolve(__webpack_public_path__, relativeReactDomUrl);
                var reactDomManifest = {
                    id: componentConstants.reactDomComponentId,
                    manifestVersion: 2,
                    componentType: 'Library',
                    alias: 'react-dom',
                    version: '__REACT_DOM_VERSION__',
                    loaderConfig: {
                        internalModuleBaseUrls: [],
                        entryModuleId: 'react-dom',
                        scriptResources: {
                            'react-dom': {
                                type: 'path',
                                path: reactDomUrl
                            },
                            'react': {
                                type: 'component',
                                id: componentConstants.reactComponentId,
                                version: '__REACT_VERSION__' 
                            }
                        }
                    }
                };
                this._addManifest(reactDomManifest, false);
            }
            else {
                throw new Error('The loader was unable to locate React or React-DOM. This indicates a problem occured ' +
                    'during npm install. Try deleting and re-running npm install.');
            }
        }
    };
    ManifestStore.prototype._getManifestFromStoreEntry = function (manifestEntry) {
        var allowDebug = DebugManifestPrompt_1.default.instance.peek();
        if (manifestEntry) {
            if (allowDebug && manifestEntry.debugManifest) {
                return manifestEntry.debugManifest;
            }
            else {
                return manifestEntry.manifest;
            }
        }
        else {
            return undefined;
        }
    };
    ManifestStore.prototype._addManifest = function (manifest, overwriteExisting) {
        var existingEntry = this._manifests.get(manifest.id);
        if (existingEntry) {
            if (overwriteExisting || !existingEntry.manifest) {
                existingEntry.manifest = manifest;
            }
        }
        else {
            this._manifests.set(manifest.id, { id: manifest.id, manifest: manifest });
        }
    };
    return ManifestStore;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ManifestStore;
