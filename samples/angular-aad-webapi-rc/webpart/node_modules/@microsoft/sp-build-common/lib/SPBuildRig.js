/// <reference path="./../typings/tsd.d.ts" />
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var path = require('path');
var coreBuild = require('@microsoft/gulp-core-build');
var sp_tslint_rules_1 = require('@microsoft/sp-tslint-rules');
var gulp_core_build_typescript_1 = require('@microsoft/gulp-core-build-typescript');
var BuildRig_1 = require('./BuildRig');
var BuildRigConstants_1 = require('./BuildRigConstants');
exports.preCopy = new coreBuild.CopyTask();
exports.postCopy = new coreBuild.CopyTask();
/**
 * Helper function to ensure that the schemas from this directory are loaded
 */
function getSchemaFilePath(filename) {
    return path.join(__dirname, 'schemas', filename);
}
/**
 * This class represents the basic shared build rig for all SPFx Rigs. It defines a few
 * simple sub-tasks, and only registers a "build" task.
 */
var SPBuildRig = (function (_super) {
    __extends(SPBuildRig, _super);
    function SPBuildRig() {
        _super.apply(this, arguments);
        this._preBuildTasks = [];
        this._postTypescriptTasks = [];
        this._postBuildTasks = [];
    }
    SPBuildRig.prototype.initialize = function (gulp) {
        _super.prototype.initialize.call(this, gulp);
    };
    /**
     * Register additional sub-tasks to run before the typescript subtask.
     * Note, this is meant to be used in a gulpfile.js to inject one-off subtasks
     */
    SPBuildRig.prototype.addPreBuildTask = function (tasks) {
        this._addTaskOrListOfTasks(tasks, this._preBuildTasks);
    };
    /**
     * Register additional sub-tasks to run after the typescript subtask.
     * Note, this is meant to be used in a gulpfile.js to inject one-off subtasks
     */
    SPBuildRig.prototype.addPostTypescriptTask = function (tasks) {
        this._addTaskOrListOfTasks(tasks, this._postTypescriptTasks);
    };
    /**
     * Register additional sub-tasks to run after the typescript subtask.
     * @deprecated
     */
    SPBuildRig.prototype.addBuildTasks = function (tasks) {
        this._addTaskOrListOfTasks(tasks, this._postTypescriptTasks);
    };
    /**
     * Register additional sub-tasks to run after the entire build.
     * Note, this is meant to be used in a gulpfile.js to inject one-off subtasks
     */
    SPBuildRig.prototype.addPostBuildTask = function (tasks) {
        this._addTaskOrListOfTasks(tasks, this._postBuildTasks);
    };
    /**
     * Register the custom configurations
     * @todo 253526 this code should be pushed into gulp-core-build
     */
    SPBuildRig.prototype.getCustomConfigs = function () {
        return _super.prototype.getCustomConfigs.call(this).concat([
            {
                callback: exports.preCopy.mergeConfig.bind(exports.preCopy),
                configFile: 'pre-copy.json',
                readmeUrl: 'https://github.com/Microsoft/gulp-core-build/blob/master/src/CopyTask.ts',
                schemaFile: getSchemaFilePath('copy.schema.json')
            },
            {
                callback: exports.postCopy.mergeConfig.bind(exports.postCopy),
                configFile: 'post-copy.json',
                readmeUrl: 'https://github.com/Microsoft/gulp-core-build/blob/master/src/CopyTask.ts',
                schemaFile: getSchemaFilePath('copy.schema.json')
            },
            {
                callback: gulp_core_build_typescript_1.typescript.setConfig.bind(gulp_core_build_typescript_1.typescript),
                configFile: 'typescript.json',
                readmeUrl: 'https://github.com/Microsoft/gulp-core-build-typescript/blob/master/src/TypeScriptTask.ts',
                schemaFile: getSchemaFilePath('typescript.schema.json')
            },
            {
                callback: gulp_core_build_typescript_1.tslint.mergeConfig.bind(gulp_core_build_typescript_1.tslint),
                configFile: 'tslint.json',
                readmeUrl: 'https://github.com/Microsoft/gulp-core-build-typescript/blob/master/src/TSLintTask.ts',
                schemaFile: getSchemaFilePath('tslint.schema.json')
            }
        ]);
    };
    /**
     * Registers the command line arguments which are available for this rig
     * @todo 253519 this code should be moved into gulp-core-build/the task definitions
     */
    SPBuildRig.prototype.getYargs = function () {
        return _super.prototype.getYargs.call(this)
            .option('locale', {
            alias: 'l',
            describe: 'override the default culture (e.g. "fr-fr")',
            string: true
        })
            .command(BuildRigConstants_1.BuildRigConstants.tasks.build, 'build the project')
            .command(BuildRigConstants_1.BuildRigConstants.tasks.default, 'equivalent to bundle');
    };
    /**
     * Register 2 tasks, build and default, which simply copy files, then run typescript and tslint
     */
    SPBuildRig.prototype.getTasks = function () {
        var result = new Map();
        result.set(BuildRigConstants_1.BuildRigConstants.tasks.build, { executable: this.getBuildTask() });
        result.set(BuildRigConstants_1.BuildRigConstants.tasks.default, { executable: this.getBuildTask() });
        return result;
    };
    /**
     * Override this function to overwrite the "build" task
     */
    SPBuildRig.prototype.getBuildTask = function () {
        return coreBuild.serial(exports.preCopy, coreBuild.serial(this._preBuildTasks), this.getCoreBuildTask(), coreBuild.serial(this._postBuildTasks), exports.postCopy);
    };
    /**
     * Override this function to redefine the core build loop
     */
    SPBuildRig.prototype.getCoreBuildTask = function () {
        return coreBuild.parallel(gulp_core_build_typescript_1.tslint, coreBuild.serial(coreBuild.serial(gulp_core_build_typescript_1.typescript, gulp_core_build_typescript_1.removeTripleSlash), coreBuild.serial.apply(coreBuild, this._postTypescriptTasks)));
    };
    SPBuildRig.prototype.setupSharedConfig = function () {
        // Ensure that the SPFx tslint rules are activated
        sp_tslint_rules_1.initializeTslintTask(gulp_core_build_typescript_1.tslint);
        gulp_core_build_typescript_1.tslint.mergeConfig({
            displayAsWarning: true
        });
        // @todo the typescript compiler should be specified here
        exports.preCopy.name = 'pre-copy';
        exports.postCopy.name = 'post-copy';
    };
    /**
     * This function cleans up the shared config by populating task config properties that depend on other tasks'
     *  user-defined properties.
     */
    SPBuildRig.prototype.finalizeSharedConfig = function () { };
    SPBuildRig.prototype._addTaskOrListOfTasks = function (tasks, array) {
        if (tasks.length) {
            array.push.apply(array, tasks);
        }
        else {
            array.push(tasks);
        }
    };
    return SPBuildRig;
}(BuildRig_1.BuildRig));
exports.SPBuildRig = SPBuildRig;

//# sourceMappingURL=SPBuildRig.js.map
