{"version":3,"sources":["jsonUtilities/SchemaValidator.ts"],"names":[],"mappings":";AAAA,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,IAAO,SAAS,WAAW,UAAU,CAAC,CAAC;AACvC,IAAO,GAAG,WAAW,KAAK,CAAC,CAAC;AAE5B,IAAM,SAAS,GAAW,SAAS,CAAC;AAQpC;;GAEG;AACH;IAAA;IAsEA,CAAC;IA/DC;;;;OAIG;IACW,mCAAmB,GAAjC,UAA2C,YAAoB,EAAE,cAAsB;QACrF,IAAM,IAAI,GAAY,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAY,CAAC;QAC1E,IAAM,MAAM,GAAW,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;QAClE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACW,wBAAQ,GAAtB,UAAuB,IAAQ,EAAE,MAAU,EAAE,YAAqB;QAChE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YAClD,IAAM,KAAK,GAA2B,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC;YAC3E,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAC3D,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAEa,wCAAwB,GAAtC,UAAuC,KAA6B,EAAE,YAAqB;QACzF,IAAM,YAAY,GAChB,CAAC,YAAY,GAAG,yBAAuB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAI,EAAE,CAAC,GAAK,GAAG,EAAE,CAAC;YACpF,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QAE9D,MAAM,CAAC,EAAE,CAAC,GAAG,GAAG,SAAS,GAAG,YAAY,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;IAC7D,CAAC;IAEa,qCAAqB,GAAnC,UAA6C,QAAgB;QAC3D,IAAM,QAAQ,GAAW,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,SAAiB,CAAC;QACtB,IAAI,CAAC;YACF,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9C,CAAE;QAAA,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,qBAAkB,QAAQ,QAAI,GAAG,EAAE,CAAC,GAAG,GAAG,QAAK,KAAK,CAAC,OAAO,CAAE,CAAC,CAAC;QAClF,CAAC;QAED,sEAAsE;QACtE,OAAO,SAAS,CAAC,SAAS,CAAC,CAAC;QAC5B,MAAM,CAAC,SAAoB,CAAC;IAC9B,CAAC;IAEc,0CAA0B,GAAzC,UAA0C,MAA6B;QAAvE,iBAIC;QAHC,IAAM,SAAS,GAAa,EAAE,CAAC;QAC/B,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,IAAO,SAAS,CAAC,IAAI,OAAd,SAAS,EAAS,KAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/E,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAEc,mCAAmB,GAAlC,UAAmC,KAA0B;QAA7D,iBASC;QARC,IAAM,WAAW,GAAa,EAAE,CAAC;QAEjC,qCAAqC;QACrC,CAAE,KAAa,CAAC,OAAgC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,UAAC,QAAQ;YACvE,WAAW,CAAC,IAAI,OAAhB,WAAW,EAAS,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,CAAC,OAAI,KAAK,CAAC,IAAI,UAAK,KAAK,CAAC,OAAO,CAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAClE,CAAC;;IApEc,gCAAgB,GAAsB,IAAI,SAAS,CAAC;QACjE,iBAAiB,EAAE,IAAI;QACvB,eAAe,EAAE,IAAI;QACrB,UAAU,EAAE,IAAI;KACjB,CAAC,CAAC;IAiEL,sBAAC;AAAD,CAtEA,AAsEC,IAAA;AAtEY,uBAAe,kBAsE3B,CAAA","file":"jsonUtilities/SchemaValidator.js","sourcesContent":["import * as os from 'os';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nimport Validator = require('z-schema');\r\nimport jju = require('jju');\r\n\r\nconst schemaKey: string = '$schema';\r\n\r\nexport interface ISchemaValidatorResult {\r\n  details?: ZSchema.SchemaError[];\r\n  name?: string;\r\n  message?: string;\r\n}\r\n\r\n/**\r\n * Wrapper functions around z-schema which help improve ease of use\r\n */\r\nexport class SchemaValidator {\r\n  private static _schemaValidator: ZSchema.Validator = new Validator({\r\n    breakOnFirstError: true,\r\n    noExtraKeywords: true,\r\n    noTypeless: true\r\n  });\r\n\r\n  /**\r\n   * A function which validates a dataFile against a schemFile, both specified\r\n   * as paths. It will throw if there is an issue with the file,\r\n   * otherwise it will return the validated datafile.\r\n   */\r\n  public static readAndValidateJson<TResult>(dataFilePath: string, schemaFilePath: string): TResult {\r\n    const data: TResult = this.readCommentedJsonFile(dataFilePath) as TResult;\r\n    const schema: Object = this.readCommentedJsonFile(schemaFilePath);\r\n    this.validate(data, schema, dataFilePath);\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * A function which validates a data object against a schema object.\r\n   * It will throw if there is an issue with the data object.\r\n   * For an improved error message, pass the filename in the optional third parameter\r\n   */\r\n  public static validate(data: {}, schema: {}, dataFilePath?: string): void {\r\n    if (!this._schemaValidator.validate(data, schema)) {\r\n      const error: ISchemaValidatorResult = this._schemaValidator.getLastError();\r\n      throw this.getFormattedErrorMessage(error, dataFilePath);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  public static getFormattedErrorMessage(error: ISchemaValidatorResult, dataFilePath?: string): string {\r\n    const errorMessage: string =\r\n      (dataFilePath ? `Error parsing file '${path.basename(dataFilePath)}'${os.EOL}` : '') +\r\n      this._extractInnerErrorMessages(error.details).join(os.EOL);\r\n\r\n    return os.EOL + 'ERROR: ' + errorMessage + os.EOL + os.EOL;\r\n  }\r\n\r\n  public static readCommentedJsonFile<TResult>(filename: string): TResult {\r\n    const contents: Buffer = fs.readFileSync(filename);\r\n    let rawConfig: Object;\r\n    try {\r\n       rawConfig = jju.parse(contents.toString());\r\n    } catch (error) {\r\n      throw new Error(`Error reading '${filename}':` + os.EOL + `  ${error.message}`);\r\n    }\r\n\r\n    // it would eventually be nice to infer the schema based on this value\r\n    delete rawConfig[schemaKey];\r\n    return rawConfig as TResult;\r\n  }\r\n\r\n  private static _extractInnerErrorMessages(errors: ZSchema.SchemaError[]): string[] {\r\n    const errorList: string[] = [];\r\n    errors.map((error) => { errorList.push(...this._formatZSchemaError(error)); });\r\n    return errorList;\r\n  }\r\n\r\n  private static _formatZSchemaError(error: ZSchema.SchemaError): string[] {\r\n    const innerErrors: string[] = [];\r\n\r\n    /* tslint:disable-next-line:no-any */\r\n    ((error as any).details as ZSchema.SchemaError[] || []).forEach((innerErr) => {\r\n      innerErrors.push(...this._formatZSchemaError(innerErr));\r\n    });\r\n\r\n    return [`(${error.path}) ${error.message}`].concat(innerErrors);\r\n  };\r\n}\r\n"],"sourceRoot":"/src"}