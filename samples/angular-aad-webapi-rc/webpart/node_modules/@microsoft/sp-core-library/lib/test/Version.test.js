"use strict";
var chai_1 = require('chai');
var Version_1 = require('../Version');
describe('Version tests', function () {
    var invalidVersions = ['', ' ', '1', '.1', '1 . 0', '1.0.', '100', '1.0.0.0.0', '0000', '1000', 'a', '1.a', 'a.1', 'a.b', '1.0.a',
        '1.-1', '-1', '-1.1'];
    var validVersionsNoPatch = ['1.0', '0.1', '100.000', '00.09', '999.999', '01.01', '1.1000'];
    var validVersionsWithPatch = ['1.0.0', '1.0.1', '100.000.009', '00.09.09', '0.0.01', '01.01.01'];
    var validVersionsWithRevision = ['1.0.0.0', '1.0.0.1', '100.000.000.001', '0.0.01.02', '01.01.01.01'];
    it('isValid', function () {
        for (var _i = 0, invalidVersions_1 = invalidVersions; _i < invalidVersions_1.length; _i++) {
            var v = invalidVersions_1[_i];
            chai_1.expect(Version_1.default.isValid(v)).to.be.false;
        }
        for (var _a = 0, validVersionsWithRevision_1 = validVersionsWithRevision; _a < validVersionsWithRevision_1.length; _a++) {
            var v = validVersionsWithRevision_1[_a];
            chai_1.expect(Version_1.default.isValid(v)).to.be.true;
            chai_1.expect(Version_1.default.tryParse(v).revision).not.to.be.undefined;
        }
        for (var _b = 0, validVersionsWithPatch_1 = validVersionsWithPatch; _b < validVersionsWithPatch_1.length; _b++) {
            var v = validVersionsWithPatch_1[_b];
            chai_1.expect(Version_1.default.isValid(v)).to.be.true;
            chai_1.expect(Version_1.default.tryParse(v).patch).not.to.be.undefined;
            chai_1.expect(Version_1.default.tryParse(v).revision).to.be.undefined;
        }
        for (var _c = 0, validVersionsNoPatch_1 = validVersionsNoPatch; _c < validVersionsNoPatch_1.length; _c++) {
            var v = validVersionsNoPatch_1[_c];
            chai_1.expect(Version_1.default.isValid(v)).to.be.true;
            chai_1.expect(Version_1.default.tryParse(v).patch).to.be.undefined;
            chai_1.expect(Version_1.default.tryParse(v).revision).to.be.undefined;
        }
    });
    it('parse', function () {
        var v = Version_1.default.tryParse('1.2.3.4');
        chai_1.expect(v.major).to.be.equal(1);
        chai_1.expect(v.minor).to.be.equal(2);
        chai_1.expect(v.patch).to.be.equal(3);
        chai_1.expect(v.revision).to.be.equal(4);
    });
    it('lt / gt', function () {
        var sortedVersions = ['0.0.0', '0.0.1', '1.0.0', '1.1.0', '1.1.99', '1.2', '1.2.1', '1.9', '2.0.0'];
        for (var i = 0; i < sortedVersions.length - 1; i++) {
            var older = Version_1.default.tryParse(sortedVersions[i]);
            var newer = Version_1.default.tryParse(sortedVersions[i + 1]);
            chai_1.expect(older.lessThan(newer)).to.be.true;
            chai_1.expect(newer.greaterThan(older)).to.be.true;
            chai_1.expect(older.greaterThan(newer)).to.be.false;
            chai_1.expect(newer.lessThan(older)).to.be.false;
        }
    });
    it('eq', function () {
        var base = Version_1.default.tryParse('1.0.0');
        var eq = [Version_1.default.tryParse('1.0'), Version_1.default.tryParse('1.0.0'), Version_1.default.tryParse('01.00.00')];
        var neq = [Version_1.default.tryParse('1.0.1'), Version_1.default.tryParse('1.1.0'), Version_1.default.tryParse('0.0.0')];
        for (var _i = 0, eq_1 = eq; _i < eq_1.length; _i++) {
            var v = eq_1[_i];
            chai_1.expect(base.equals(v)).to.be.true;
        }
        for (var _a = 0, neq_1 = neq; _a < neq_1.length; _a++) {
            var v = neq_1[_a];
            chai_1.expect(base.equals(v)).to.be.false;
        }
    });
    it('eq with leading zeros', function () {
        chai_1.expect((Version_1.default.tryParse('1.2.3')).equals(Version_1.default.tryParse('01.02.03'))).to.be.true;
    });
    it('toString()', function () {
        for (var _i = 0, _a = validVersionsNoPatch.concat(validVersionsWithPatch); _i < _a.length; _i++) {
            var vstr = _a[_i];
            var v = Version_1.default.tryParse(vstr);
            chai_1.expect(Version_1.default.tryParse(v.toString()).equals(v)).to.be.true;
        }
    });
});
