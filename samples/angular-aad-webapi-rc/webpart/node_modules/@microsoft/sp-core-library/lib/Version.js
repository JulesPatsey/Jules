"use strict";
var Version = (function () {
    function Version(major, minor, patch, revision) {
        this._major = major;
        this._minor = minor;
        this._patch = patch;
        this._revision = revision;
    }
    Version.isValid = function (versionString) {
        return Version.tryParse(versionString) !== undefined;
    };
    Version.parse = function (versionString) {
        var version = Version.tryParse(versionString);
        if (version) {
            return version;
        }
        throw new Error("Invalid version string: \"" + versionString + "\"");
    };
    Version.tryParse = function (versionString) {
        var versionRegex = /^([0-9]+)\.([0-9]+)(?:\.([0-9]+)(?:\.([0-9]+))?)?$/g;
        var regexExecRes = versionRegex.exec(versionString);
        if (regexExecRes) {
            return new Version(parseInt(regexExecRes[1], 10), parseInt(regexExecRes[2], 10), regexExecRes[3] ? parseInt(regexExecRes[3], 10) : undefined, regexExecRes[4] ? parseInt(regexExecRes[4], 10) : undefined);
        }
        return undefined;
    };
    Version._compare = function (v1, v2) {
        if (v1.major !== v2.major) {
            return v1.major > v2.major ? 1 : -1;
        }
        if (v1.minor !== v2.minor) {
            return v1.minor > v2.minor ? 1 : -1;
        }
        if ((v1.patch || 0) !== (v2.patch || 0)) {
            return (v1.patch || 0) > (v2.patch || 0) ? 1 : -1;
        }
        if ((v1.revision || 0) !== (v2.revision || 0)) {
            return (v1.revision || 0) > (v2.revision || 0) ? 1 : -1;
        }
        return 0;
    };
    Object.defineProperty(Version.prototype, "major", {
        get: function () {
            return this._major;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "minor", {
        get: function () {
            return this._minor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "patch", {
        get: function () {
            return this._patch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "revision", {
        get: function () {
            return this._revision;
        },
        enumerable: true,
        configurable: true
    });
    Version.prototype.lessThan = function (compareWith) {
        return Version._compare(this, compareWith) < 0;
    };
    Version.prototype.greaterThan = function (compareWith) {
        return Version._compare(this, compareWith) > 0;
    };
    Version.prototype.equals = function (compareWith) {
        return Version._compare(this, compareWith) === 0;
    };
    Version.prototype.toString = function () {
        var str = this.major + "." + this.minor;
        if (this.patch) {
            str += "." + this.patch;
            if (this.revision) {
                str += "." + this.revision;
            }
        }
        return str;
    };
    return Version;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Version;
