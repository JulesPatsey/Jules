"use strict";
var ServiceScope = (function () {
    function ServiceScope(parent) {
        this._parent = parent;
        this._registrations = {};
        this._pendingCallbacks = [];
        this._finished = false;
        this._autocreating = false;
    }
    ServiceScope.startNewRoot = function () {
        return new ServiceScope(undefined);
    };
    ServiceScope.prototype.createAndProvide = function (serviceKey, simpleServiceClass) {
        return this.provide(serviceKey, new simpleServiceClass(this));
    };
    ServiceScope.prototype.createDefaultAndProvide = function (serviceKey) {
        var service = serviceKey.defaultCreator(this);
        return this.provide(serviceKey, service);
    };
    ServiceScope.prototype.consume = function (serviceKey) {
        if (!this._finished) {
            throw new Error('Cannot consume services because the scope is not finished yet');
        }
        if (this._autocreating) {
            throw new Error('Cannot consume services during autocreation');
        }
        var registration = this._registrations[serviceKey.id];
        if (registration) {
            return registration.service;
        }
        if (this._parent) {
            return this._parent.consume(serviceKey);
        }
        var autocreatedService;
        this._autocreating = true;
        try {
            autocreatedService = serviceKey.defaultCreator(this);
            this._registrations[serviceKey.id] = { serviceKey: serviceKey, service: autocreatedService };
        }
        finally {
            this._autocreating = false;
        }
        this._processPendingCallbacks();
        return autocreatedService;
    };
    ServiceScope.prototype.finish = function () {
        if (this._finished) {
            throw new Error('Already finished');
        }
        this._finished = true;
        this._processPendingCallbacks();
    };
    ServiceScope.prototype.getParent = function () {
        return this._parent;
    };
    ServiceScope.prototype.whenFinished = function (callback) {
        if (this._finished && !this._autocreating) {
            callback();
        }
        else {
            this._pendingCallbacks.push(callback);
        }
    };
    ServiceScope.prototype.provide = function (serviceKey, service) {
        if (this._finished) {
            throw new Error('Cannot register service because the scope is already finished');
        }
        if (this._registrations[serviceKey.id]) {
            throw new Error('The specified service key has already been registered in this scope');
        }
        this._registrations[serviceKey.id] = { serviceKey: serviceKey, service: service };
        return service;
    };
    ServiceScope.prototype.startNewChild = function () {
        return new ServiceScope(this);
    };
    ServiceScope.prototype._processPendingCallbacks = function () {
        var pendingCallbacks = this._pendingCallbacks;
        this._pendingCallbacks = [];
        for (var _i = 0, pendingCallbacks_1 = pendingCallbacks; _i < pendingCallbacks_1.length; _i++) {
            var pendingCallback = pendingCallbacks_1[_i];
            pendingCallback();
        }
    };
    return ServiceScope;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ServiceScope;
