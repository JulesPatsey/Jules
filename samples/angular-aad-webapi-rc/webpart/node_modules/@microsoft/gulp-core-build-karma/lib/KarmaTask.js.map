{"version":3,"sources":["KarmaTask.ts"],"names":[],"mappings":"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","file":"KarmaTask.js","sourcesContent":["import { GulpTask, IBuildConfig } from '@microsoft/gulp-core-build';\r\n\r\nimport * as gulp from 'gulp';\r\nimport * as path from 'path';\r\nimport * as KarmaType from 'karma';\r\n\r\nexport interface IKarmaTaskConfig {\r\n  configPath: string;\r\n}\r\n\r\nexport class KarmaTask extends GulpTask<IKarmaTaskConfig> {\r\n\r\n  public name: string = 'karma';\r\n\r\n  public taskConfig: IKarmaTaskConfig = {\r\n    configPath: './karma.config.js'\r\n  };\r\n\r\n  public get resources(): Object {\r\n    if (!this._resources) {\r\n      this._resources = {\r\n        bindPolyfillPath: require.resolve('phantomjs-polyfill/bind-polyfill.js'),\r\n        istanbulInstrumenterLoaderPath: require.resolve('istanbul-instrumenter-loader'),\r\n        plugins: [\r\n          require('karma-webpack'),\r\n          require('karma-mocha'),\r\n          require('karma-coverage'),\r\n          require('karma-mocha-clean-reporter'),\r\n          require('karma-phantomjs-launcher'),\r\n          require('karma-sinon-chai')\r\n        ]\r\n      };\r\n    }\r\n\r\n    return this._resources;\r\n  }\r\n\r\n  private _resources: Object;\r\n\r\n  public isEnabled(buildConfig: IBuildConfig): boolean {\r\n    return (\r\n      super.isEnabled(buildConfig) &&\r\n      this.taskConfig.configPath !== null // tslint:disable-line:no-null-keyword\r\n    );\r\n  }\r\n\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: (error?: Error | string) => void): void {\r\n    const { configPath }: IKarmaTaskConfig = this.taskConfig;\r\n\r\n    if (!this.fileExists(configPath)) {\r\n      const shouldInitKarma: boolean = (process.argv.indexOf('--initkarma') > -1);\r\n\r\n      if (!shouldInitKarma) {\r\n        this.logWarning(\r\n          `No karma config has been provided. ` +\r\n          `Run again using --initkarma to create a default config, or call ` +\r\n          ` karma.setConfig({ configPath: null }) in your gulpfile.`);\r\n      } else {\r\n        this.copyFile(path.resolve(__dirname, '../karma.config.js'));\r\n        this.copyFile(path.resolve(__dirname, '../tests.js'), 'src/tests.js');\r\n\r\n        // install dev dependencies?\r\n        // phantomjs-polyfill?\r\n        //\r\n        // install typings for mocha/chai/sinon?\r\n      }\r\n\r\n      completeCallback();\r\n    } else {\r\n      const karma: typeof KarmaType = require('karma'); // tslint:disable-line\r\n      const server: KarmaType.Server = karma.Server;\r\n      const singleRun: boolean = (process.argv.indexOf('--debug') === -1);\r\n      const matchIndex: number = (process.argv.indexOf('--match'));\r\n      const matchString: string = (matchIndex === -1) ? '' : process.argv[matchIndex + 1];\r\n\r\n      new server({\r\n        client: {\r\n          mocha: {\r\n            grep: matchString\r\n          }\r\n        },\r\n        configFile: this.resolvePath(configPath),\r\n        singleRun: singleRun\r\n      }, (exitCode) => {\r\n        if (exitCode) {\r\n          completeCallback('Error(s) occured during karma.');\r\n        } else {\r\n          completeCallback();\r\n        }\r\n      }).start();\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}