{
  "errors": [],
  "warnings": [],
  "version": "1.13.3",
  "hash": "90f2c072aa909ed8658c",
  "publicPath": "",
  "assetsByChunkName": {
    "sp-client-base": [
      "sp-client-base.js",
      "sp-client-base.js.map"
    ]
  },
  "assets": [
    {
      "name": "sp-client-base.js",
      "size": 18081,
      "chunks": [
        0
      ],
      "chunkNames": [
        "sp-client-base"
      ]
    },
    {
      "name": "sp-client-base.js.map",
      "size": 26775,
      "chunks": [
        0
      ],
      "chunkNames": [
        "sp-client-base"
      ]
    }
  ],
  "chunks": [
    {
      "id": 0,
      "rendered": true,
      "initial": true,
      "entry": true,
      "extraAsync": false,
      "size": 15545,
      "names": [
        "sp-client-base"
      ],
      "files": [
        "sp-client-base.js",
        "sp-client-base.js.map"
      ],
      "hash": "57dca9221436b9e60bab",
      "parents": [],
      "origins": [
        {
          "moduleId": 0,
          "module": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\index.js",
          "moduleIdentifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\index.js",
          "moduleName": "./lib/index.js",
          "loc": "",
          "name": "sp-client-base",
          "reasons": []
        }
      ]
    }
  ],
  "modules": [
    {
      "id": 0,
      "identifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\index.js",
      "name": "./lib/index.js",
      "index": 0,
      "index2": 9,
      "size": 289,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": null,
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [],
      "source": "\"use strict\";\nrequire('set-webpack-public-path!');\nvar SPGlobalErrorHandler_1 = require('./error/SPGlobalErrorHandler');\nexports.SPGlobalErrorHandler = SPGlobalErrorHandler_1.default;\nvar Compare_1 = require('./Compare');\nexports.Compare = Compare_1.default;\nrequire('ZIndexScheme.scss');\n"
    },
    {
      "id": 1,
      "identifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\@microsoft\\loader-set-webpack-public-path\\lib\\index.js!",
      "name": "D:/agent/1/_work/24/s/common/~/@microsoft/loader-set-webpack-public-path/lib",
      "index": 1,
      "index2": 0,
      "size": 708,
      "cacheable": false,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\index.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\index.js",
          "module": "./lib/index.js",
          "moduleName": "./lib/index.js",
          "type": "cjs require",
          "userRequest": "set-webpack-public-path!",
          "loc": "2:0-35"
        }
      ],
      "source": "var scripts = document.getElementsByTagName('script');\r\nvar regex = new RegExp('ScriptLoadName-DoNotChange', 'i');\r\nvar found = false;\r\n\r\nif (scripts && scripts.length) {\r\n  for (var i = 0; i < scripts.length; i++) {\r\n    if (!scripts[i]) continue;\r\n    var path = scripts[i].getAttribute('src');\r\n    if (path && path.match(regex)) {\r\n      __webpack_public_path__ = path.substring(0, path.lastIndexOf('/') + 1);\r\n      found = true;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nif (!found) {\r\n  for (var global in window.__setWebpackPublicPathLoaderSrcRegistry__) {\r\n    if (global && global.match(regex)) {\r\n      __webpack_public_path__ = global.substring(0, global.lastIndexOf('/') + 1);\r\n      break;\r\n    }\r\n  }\r\n}"
    },
    {
      "id": 2,
      "identifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\error\\SPGlobalErrorHandler.js",
      "name": "./lib/error/SPGlobalErrorHandler.js",
      "index": 2,
      "index2": 2,
      "size": 1907,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\index.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\index.js",
          "module": "./lib/index.js",
          "moduleName": "./lib/index.js",
          "type": "cjs require",
          "userRequest": "./error/SPGlobalErrorHandler",
          "loc": "3:29-68"
        }
      ],
      "source": "\"use strict\";\nvar sp_telemetry_1 = require('@ms/sp-telemetry');\nvar SPGlobalErrorHandler = (function () {\n    function SPGlobalErrorHandler() {\n    }\n    SPGlobalErrorHandler.basicTracingHandler = function (message, filename, lineno, colno, error) {\n        var eventName = 'window.onerror';\n        if (SPGlobalErrorHandler._isFromFile(filename, 'QUILL')) {\n            SPGlobalErrorHandler._logErrorFromFile(message, lineno, colno, error, eventName, SPGlobalErrorHandler._quillLogSource);\n        }\n        else if (SPGlobalErrorHandler._isFromFile(filename, 'CKEDITOR')) {\n            SPGlobalErrorHandler._logErrorFromFile(message, lineno, colno, error, eventName, SPGlobalErrorHandler._ckLogSource);\n        }\n        else {\n            var genericError = error ||\n                new Error(\"Error:\" + message + \", file:\" + filename + \", line:\" + lineno + \", column:\" + colno);\n            sp_telemetry_1._TraceLogger.logError(SPGlobalErrorHandler._genericLogSource, genericError, eventName);\n        }\n    };\n    SPGlobalErrorHandler._isFromFile = function (filename, match) {\n        return filename && filename.toUpperCase().indexOf(match) !== -1;\n    };\n    SPGlobalErrorHandler._logErrorFromFile = function (message, lineno, colno, error, eventName, logSource) {\n        var fileError = error ||\n            new Error(\"Error:\" + message + \", line:\" + lineno + \", column:\" + colno);\n        sp_telemetry_1._TraceLogger.logError(logSource, fileError, eventName);\n    };\n    SPGlobalErrorHandler._quillLogSource = sp_telemetry_1._LogSource.create('QuillGlobalError');\n    SPGlobalErrorHandler._ckLogSource = sp_telemetry_1._LogSource.create('CKGlobalError');\n    SPGlobalErrorHandler._genericLogSource = sp_telemetry_1._LogSource.create('OtherGlobalError');\n    return SPGlobalErrorHandler;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = SPGlobalErrorHandler;\n"
    },
    {
      "id": 3,
      "identifier": "external \"@ms/sp-telemetry\"",
      "name": "external \"@ms/sp-telemetry\"",
      "index": 3,
      "index2": 1,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\error\\SPGlobalErrorHandler.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 2,
          "moduleIdentifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\error\\SPGlobalErrorHandler.js",
          "module": "./lib/error/SPGlobalErrorHandler.js",
          "moduleName": "./lib/error/SPGlobalErrorHandler.js",
          "type": "cjs require",
          "userRequest": "@ms/sp-telemetry",
          "loc": "2:21-48"
        }
      ]
    },
    {
      "id": 4,
      "identifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\Compare.js",
      "name": "./lib/Compare.js",
      "index": 4,
      "index2": 3,
      "size": 1051,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\index.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\index.js",
          "module": "./lib/index.js",
          "moduleName": "./lib/index.js",
          "type": "cjs require",
          "userRequest": "./Compare",
          "loc": "5:16-36"
        }
      ],
      "source": "\"use strict\";\nvar Compare = (function () {\n    function Compare() {\n    }\n    Compare.shallowCompare = function (objA, objB) {\n        if (objA === objB) {\n            return true;\n        }\n        if (typeof objA !== 'object' || !objA || typeof objB !== 'object' || !objB) {\n            return false;\n        }\n        var keysA = Object.keys(objA);\n        var keysB = Object.keys(objB);\n        var keyLength = keysA.length;\n        if (keyLength !== keysB.length) {\n            return false;\n        }\n        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n        for (var i = 0; i < keyLength; i++) {\n            var key = keysA[i];\n            if (!bHasOwnProperty(key)) {\n                return false;\n            }\n            var valueA = objA[key];\n            var valueB = objB[key];\n            if (valueA !== valueB) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return Compare;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Compare;\n"
    },
    {
      "id": 5,
      "identifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\ZIndexScheme.scss.js",
      "name": "./lib/ZIndexScheme.scss.js",
      "index": 5,
      "index2": 8,
      "size": 29,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\index.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\index.js",
          "module": "./lib/index.js",
          "moduleName": "./lib/index.js",
          "type": "cjs require",
          "userRequest": "ZIndexScheme.scss",
          "loc": "7:0-28"
        }
      ],
      "source": "require('ZIndexScheme.css');\n"
    },
    {
      "id": 6,
      "identifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\@microsoft\\loader-load-themed-styles\\lib\\index.js!D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\css-loader\\index.js?-minimize!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\ZIndexScheme.css",
      "name": "./lib/ZIndexScheme.css",
      "index": 6,
      "index2": 7,
      "size": 453,
      "cacheable": false,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\ZIndexScheme.scss.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 5,
          "moduleIdentifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\ZIndexScheme.scss.js",
          "module": "./lib/ZIndexScheme.scss.js",
          "moduleName": "./lib/ZIndexScheme.scss.js",
          "type": "cjs require",
          "userRequest": "ZIndexScheme.css",
          "loc": "1:0-27"
        }
      ],
      "source": "var content = require(\"!!./../../../common/node_modules/css-loader/index.js?-minimize!./ZIndexScheme.css\");\nvar loader = require(\"D:\\\\agent\\\\1\\\\_work\\\\24\\\\s\\\\common\\\\node_modules\\\\@microsoft\\\\load-themed-styles\\\\lib\\\\index.js\");\n\nif(typeof content === \"string\") content = [[module.id, content]];\n\n// add the styles to the DOM\nfor (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);\n\nif(content.locals) module.exports = content.locals;"
    },
    {
      "id": 7,
      "identifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\css-loader\\index.js?-minimize!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\ZIndexScheme.css",
      "name": "D:/agent/1/_work/24/s/common/~/css-loader?-minimize!./lib/ZIndexScheme.css",
      "index": 7,
      "index2": 5,
      "size": 214,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\@microsoft\\loader-load-themed-styles\\lib\\index.js!D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\css-loader\\index.js?-minimize!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\ZIndexScheme.css",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 6,
          "moduleIdentifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\@microsoft\\loader-load-themed-styles\\lib\\index.js!D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\css-loader\\index.js?-minimize!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\ZIndexScheme.css",
          "module": "./lib/ZIndexScheme.css",
          "moduleName": "./lib/ZIndexScheme.css",
          "type": "cjs require",
          "userRequest": "!!./../../../common/node_modules/css-loader/index.js?-minimize!./ZIndexScheme.css",
          "loc": "1:14-106"
        }
      ],
      "source": "exports = module.exports = require(\"./../../../common/node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".ms-LayerHost-overlay{z-index:1000!important}\", \"\"]);\n\n// exports\n"
    },
    {
      "id": 8,
      "identifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\css-loader\\lib\\css-base.js",
      "name": "D:/agent/1/_work/24/s/common/~/css-loader/lib/css-base.js",
      "index": 8,
      "index2": 4,
      "size": 1506,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\css-loader\\index.js?-minimize!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\ZIndexScheme.css",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 7,
          "moduleIdentifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\css-loader\\index.js?-minimize!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\ZIndexScheme.css",
          "module": "D:/agent/1/_work/24/s/common/~/css-loader?-minimize!./lib/ZIndexScheme.css",
          "moduleName": "D:/agent/1/_work/24/s/common/~/css-loader?-minimize!./lib/ZIndexScheme.css",
          "type": "cjs require",
          "userRequest": "./../../../common/node_modules/css-loader/lib/css-base.js",
          "loc": "1:27-95"
        }
      ],
      "source": "/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n"
    },
    {
      "id": 9,
      "identifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\source-map-loader\\index.js!D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\@microsoft\\load-themed-styles\\lib\\index.js",
      "name": "D:/agent/1/_work/24/s/common/~/@microsoft/load-themed-styles/lib/index.js",
      "index": 9,
      "index2": 6,
      "size": 9346,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\@microsoft\\loader-load-themed-styles\\lib\\index.js!D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\css-loader\\index.js?-minimize!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\ZIndexScheme.css",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 6,
          "moduleIdentifier": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\@microsoft\\loader-load-themed-styles\\lib\\index.js!D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\css-loader\\index.js?-minimize!D:\\agent\\1\\_work\\24\\s\\spfx-core\\sp-client-base\\lib\\ZIndexScheme.css",
          "module": "./lib/ZIndexScheme.css",
          "moduleName": "./lib/ZIndexScheme.css",
          "type": "cjs require",
          "userRequest": "D:\\agent\\1\\_work\\24\\s\\common\\node_modules\\@microsoft\\load-themed-styles\\lib\\index.js",
          "loc": "2:13-119"
        }
      ],
      "source": "/**\n * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value\n * to use if that slot is not specified by the theme.\n */\n\"use strict\";\n// IE needs to inject styles using cssText. However, we need to evaluate this lazily, so this\n// value will initialize as undefined, and later will be set once on first loadStyles injection.\nvar _injectStylesWithCssText;\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\n// load-themed-styles hosted on the page.\nvar _root = (typeof window === 'undefined') ? global : window; // tslint:disable-line:no-any\nvar _themeState = _root.__themeState__ = _root.__themeState__ || {\n    theme: undefined,\n    lastStyleElement: undefined,\n    registeredStyles: []\n};\n/**\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\n */\n/* tslint:disable: max-line-length */\nvar _themeTokenRegex = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\n/* tslint:enable: max-line-length */\n/** Maximum style text length, for supporting IE style restrictions. */\nvar MAX_STYLE_CONTENT_SIZE = 10000;\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\n * event is fired.\n * @param {string | ThemableArray} styles Themable style text to register.\n */\nfunction loadStyles(styles) {\n    var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);\n    if (_injectStylesWithCssText === undefined) {\n        _injectStylesWithCssText = shouldUseCssText();\n    }\n    applyThemableStyles(styleParts);\n}\nexports.loadStyles = loadStyles;\n/**\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\n * @param {(styles: string) => void} a loadStyles callback that gets called when styles are loaded or reloaded\n */\nfunction configureLoadStyles(callback) {\n    _themeState.loadStyles = callback;\n}\nexports.configureLoadStyles = configureLoadStyles;\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\n * is fired.\n * @param {string} styleText Style to register.\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\n */\nfunction applyThemableStyles(stylesArray, styleRecord) {\n    if (_themeState.loadStyles) {\n        var styles = resolveThemableArray(stylesArray);\n        _themeState.loadStyles(styles);\n    }\n    else {\n        _injectStylesWithCssText ?\n            registerStylesIE(stylesArray, styleRecord) :\n            registerStyles(stylesArray, styleRecord);\n    }\n}\n/**\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\n * replaced.\n * @param {theme} theme JSON object of theme tokens to values.\n */\nfunction loadTheme(theme) {\n    _themeState.theme = theme;\n    // reload styles.\n    reloadStyles();\n}\nexports.loadTheme = loadTheme;\n/**\n * Reloads styles.\n */\nfunction reloadStyles() {\n    if (_themeState.theme) {\n        for (var _i = 0, _a = _themeState.registeredStyles; _i < _a.length; _i++) {\n            var styleRecord = _a[_i];\n            applyThemableStyles(styleRecord.themableStyle, styleRecord);\n        }\n    }\n}\n/**\n * Find theme tokens and replaces them with provided theme values.\n * @param {string} styles Tokenized styles to fix.\n */\nfunction detokenize(styles) {\n    if (styles) {\n        styles = resolveThemableArray(splitStyles(styles));\n    }\n    return styles;\n}\nexports.detokenize = detokenize;\n/**\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\n */\nfunction resolveThemableArray(splitStyleArray) {\n    var theme = _themeState.theme;\n    var resolvedCss;\n    if (splitStyleArray) {\n        // Resolve the array of theming instructions to an array of strings.\n        // Then join the array to produce the final CSS string.\n        var resolvedArray = splitStyleArray.map(function (currentValue) {\n            var themeSlot = currentValue.theme;\n            if (themeSlot) {\n                // A theming annotation. Resolve it.\n                var themedValue = theme ? theme[themeSlot] : undefined;\n                var defaultValue = currentValue.defaultValue;\n                // Warn to console if we hit an unthemed value even when themes are provided.\n                // Allow the themedValue to be undefined to explicitly request the default value.\n                if (theme && !themedValue && console && !(themeSlot in theme)) {\n                    /* tslint:disable: max-line-length */\n                    console.warn(\"Theming value not provided for \\\"\" + themeSlot + \"\\\". Falling back to \\\"\" + (defaultValue || 'inherit') + \"\\\".\");\n                }\n                return themedValue || defaultValue || 'inherit';\n            }\n            else {\n                // A non-themable string. Preserve it.\n                return currentValue.rawString;\n            }\n        });\n        resolvedCss = resolvedArray.join('');\n    }\n    return resolvedCss;\n}\n/**\n * Split tokenized CSS into an array of strings and theme specification objects\n * @param {string} styles Tokenized styles to split.\n */\nfunction splitStyles(styles) {\n    var result = [];\n    if (styles) {\n        var pos = 0; // Current position in styles.\n        var tokenMatch = void 0;\n        while (tokenMatch = _themeTokenRegex.exec(styles)) {\n            var matchIndex = tokenMatch.index;\n            if (matchIndex > pos) {\n                result.push({\n                    rawString: styles.substring(pos, matchIndex)\n                });\n            }\n            result.push({\n                theme: tokenMatch[1],\n                defaultValue: tokenMatch[2] // May be undefined\n            });\n            // index of the first character after the current match\n            pos = _themeTokenRegex.lastIndex;\n        }\n        // Push the rest of the string after the last match.\n        result.push({\n            rawString: styles.substring(pos)\n        });\n    }\n    return result;\n}\nexports.splitStyles = splitStyles;\n/**\n * Registers a set of style text. If it is registered too early, we will register it when the\n * window.load event is fired.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\nfunction registerStyles(styleArray, styleRecord) {\n    var head = document.getElementsByTagName('head')[0];\n    var styleElement = document.createElement('style');\n    styleElement.type = 'text/css';\n    styleElement.appendChild(document.createTextNode(resolveThemableArray(styleArray)));\n    if (styleRecord) {\n        head.replaceChild(styleElement, styleRecord.styleElement);\n        styleRecord.styleElement = styleElement;\n    }\n    else {\n        head.appendChild(styleElement);\n    }\n    if (!styleRecord) {\n        _themeState.registeredStyles.push({\n            styleElement: styleElement,\n            themableStyle: styleArray\n        });\n    }\n}\n/**\n * Registers a set of style text, for IE 9 and below, which has a ~30 style element limit so we need\n * to register slightly differently.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\nfunction registerStylesIE(styleArray, styleRecord) {\n    var head = document.getElementsByTagName('head')[0];\n    var lastStyleElement = _themeState.lastStyleElement, registeredStyles = _themeState.registeredStyles;\n    var stylesheet = lastStyleElement ? lastStyleElement.styleSheet : undefined;\n    var lastStyleContent = stylesheet ? stylesheet.cssText : '';\n    var lastRegisteredStyle = registeredStyles[registeredStyles.length - 1];\n    var resolvedStyleText = resolveThemableArray(styleArray);\n    if (!lastStyleElement || (lastStyleContent.length + resolvedStyleText.length) > MAX_STYLE_CONTENT_SIZE) {\n        lastStyleElement = document.createElement('style');\n        lastStyleElement.type = 'text/css';\n        if (styleRecord) {\n            head.replaceChild(lastStyleElement, styleRecord.styleElement);\n            styleRecord.styleElement = lastStyleElement;\n        }\n        else {\n            head.appendChild(lastStyleElement);\n        }\n        if (!styleRecord) {\n            lastRegisteredStyle = {\n                styleElement: lastStyleElement,\n                themableStyle: styleArray\n            };\n            registeredStyles.push(lastRegisteredStyle);\n        }\n    }\n    lastStyleElement.styleSheet.cssText += detokenize(resolvedStyleText);\n    Array.prototype.push.apply(lastRegisteredStyle.themableStyle, styleArray); // concat in-place\n    // Preserve the theme state.\n    _themeState.lastStyleElement = lastStyleElement;\n}\n/**\n * Checks to see if styleSheet exists as a property off of a style element.\n * This will determine if style registration should be done via cssText (<= IE9) or not\n */\nfunction shouldUseCssText() {\n    var useCSSText = false;\n    if (typeof document !== 'undefined') {\n        var emptyStyle = document.createElement('style');\n        emptyStyle.type = 'text/css';\n        useCSSText = !!emptyStyle.styleSheet;\n    }\n    return useCSSText;\n}\n\n"
    }
  ],
  "filteredModules": 0,
  "children": []
}