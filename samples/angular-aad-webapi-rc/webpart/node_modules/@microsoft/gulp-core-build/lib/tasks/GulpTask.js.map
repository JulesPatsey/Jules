{"version":3,"sources":["tasks/GulpTask.ts"],"names":[],"mappings":"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","file":"tasks/GulpTask.js","sourcesContent":["/* tslint:disable:max-line-length */\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\n\r\nimport { GulpProxy } from '../GulpProxy';\r\nimport { IExecutable } from '../IExecutable';\r\nimport { IBuildConfig } from '../IBuildConfig';\r\nimport { log, verbose, error, fileError, fileWarning,\r\n  warn, logEndSubtask, logStartSubtask } from '../logging';\r\nimport gutil = require('gulp-util');\r\nimport gulp = require('gulp');\r\nimport through2 = require('through2');\r\n\r\n/* tslint:disable:typedef */\r\nconst eos = require('end-of-stream');\r\n/* tslint:enable:typedef */\r\n\r\nimport { args } from '../State';\r\nimport { SchemaValidator } from '../jsonUtilities/SchemaValidator';\r\n\r\nexport abstract class GulpTask<TASK_CONFIG> implements IExecutable {\r\n  public name: string;\r\n  public buildConfig: IBuildConfig;\r\n  public taskConfig: TASK_CONFIG;\r\n  public cleanMatch: string[];\r\n\r\n  private _schema: Object;\r\n\r\n  /**\r\n   * A JSON Schema object which will be used to validate this task's configuration file\r\n   */\r\n  public get schema(): Object {\r\n    return this._schema ?\r\n      this._schema :\r\n      this._schema = this.loadSchema();\r\n  }\r\n\r\n  /**\r\n   * Override this function to provide a schema which will be used to validate\r\n   * the task's configuration file.\r\n   */\r\n  public loadSchema(): Object {\r\n    return undefined;\r\n  };\r\n\r\n  /**\r\n   * Shallow merges config settings into the task config.\r\n   */\r\n  public setConfig(taskConfig: TASK_CONFIG): void {\r\n    /* tslint:disable:typedef */\r\n    const objectAssign = require('object-assign');\r\n    /* tslint:enable:typedef */\r\n\r\n    this.taskConfig = objectAssign({}, this.taskConfig, taskConfig);\r\n  }\r\n\r\n  /**\r\n   * Deep merges config settings into task config.\r\n   */\r\n  public mergeConfig(taskConfig: TASK_CONFIG): void {\r\n    /* tslint:disable:typedef */\r\n    const merge = require('lodash.merge');\r\n    /* tslint:enable:typedef */\r\n\r\n    this.taskConfig = merge({}, this.taskConfig, taskConfig);\r\n  }\r\n\r\n  /**\r\n   * Replaces task config settings with new settings.\r\n   */\r\n  public replaceConfig(taskConfig: TASK_CONFIG): void {\r\n    this.taskConfig = taskConfig;\r\n  }\r\n\r\n  public onRegister(): void {\r\n    const configFilename: string = this._getConfigFilePath();\r\n    const schema: Object = this.schema;\r\n\r\n    let rawConfig: TASK_CONFIG = this._readConfigFile(configFilename, schema);\r\n\r\n    if (rawConfig) {\r\n      this.mergeConfig(rawConfig);\r\n    }\r\n  }\r\n\r\n  public isEnabled(buildConfig: IBuildConfig): boolean {\r\n    return (!buildConfig || !buildConfig.isRedundantBuild);\r\n  }\r\n\r\n  public abstract executeTask(gulp: gulp.Gulp | GulpProxy, completeCallback?: (result?: Object) => void): Promise<Object> | NodeJS.ReadWriteStream | void;\r\n\r\n  public log(message: string): void {\r\n    log(`[${gutil.colors.cyan(this.name)}] ${message}`);\r\n  }\r\n\r\n  public logVerbose(message: string): void {\r\n    verbose(`[${gutil.colors.cyan(this.name)}] ${message}`);\r\n  }\r\n\r\n  public logWarning(message: string): void {\r\n    warn(`[${gutil.colors.cyan(this.name)}] ${message}`);\r\n  }\r\n\r\n  public logError(message: string): void {\r\n    error(`[${gutil.colors.cyan(this.name)}] ${message}`);\r\n  }\r\n\r\n  public fileError(filePath: string, line: number, column: number, errorCode: string, message: string): void {\r\n    fileError(this.name, filePath, line, column, errorCode, message);\r\n  }\r\n\r\n  public fileWarning(filePath: string, line: number, column: number, errorCode: string, message: string): void {\r\n    fileWarning(this.name, filePath, line, column, errorCode, message);\r\n  }\r\n\r\n  public getCleanMatch(buildConfig: IBuildConfig, taskConfig: TASK_CONFIG = this.taskConfig): string[] {\r\n    return this.cleanMatch;\r\n  }\r\n\r\n  public execute(config: IBuildConfig): Promise<void> {\r\n    this.buildConfig = config;\r\n\r\n    const startTime: [number, number] = process.hrtime();\r\n\r\n    logStartSubtask(this.name);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      /* tslint:disable:typedef */\r\n      let stream;\r\n      /* tslint:enable:typedef */\r\n\r\n      try {\r\n        if (!this.executeTask) {\r\n          throw new Error('The task subclass is missing the \"executeTask\" method.');\r\n        }\r\n\r\n        stream = this.executeTask(this.buildConfig.gulp, (result?: Object) => {\r\n          if (!result) {\r\n            resolve();\r\n          } else {\r\n            reject(result);\r\n          }\r\n        });\r\n      } catch (e) {\r\n        this.logError(e);\r\n        reject(e);\r\n      }\r\n\r\n      if (stream) {\r\n        if (stream.then) {\r\n          stream.then(resolve, reject);\r\n        } else if (stream.pipe) {\r\n          // wait for stream to end\r\n\r\n          eos(stream, {\r\n            error: true,\r\n            readable: stream.readable,\r\n            writable: stream.writable && !stream.readable\r\n          }, (err: Object) => {\r\n            if (err) {\r\n              reject(err);\r\n            } else {\r\n              resolve();\r\n            }\r\n          });\r\n\r\n          // Make sure the stream is completly read\r\n          stream.pipe(through2.obj(\r\n            (file: gutil.File,\r\n              encoding: string,\r\n              callback: (p?: Object) => void) => {\r\n                'use strict';\r\n                callback();\r\n            },\r\n            (callback: () => void) => {\r\n              'use strict';\r\n              callback();\r\n            }));\r\n\r\n        } else if (this.executeTask.length === 1) {\r\n          resolve(stream);\r\n        }\r\n      } else if (this.executeTask.length === 1) {\r\n        resolve(stream);\r\n      }\r\n    })\r\n      .then(() => {\r\n        logEndSubtask(this.name, startTime);\r\n      },\r\n      (ex) => {\r\n        logEndSubtask(this.name, startTime, ex);\r\n        throw ex;\r\n      });\r\n  }\r\n\r\n  public resolvePath(localPath: string): string {\r\n    /* tslint:disable:typedef */\r\n    const path = require('path');\r\n    /* tslint:enable:typedef */\r\n    if (path.isAbsolute(localPath)) {\r\n      return path.resolve(localPath);\r\n    }\r\n    return path.resolve(path.join(this.buildConfig.rootPath, localPath));\r\n  }\r\n\r\n  public fileExists(localPath: string): boolean {\r\n    /* tslint:disable:typedef */\r\n    const fs = require('fs');\r\n    /* tslint:enable:typedef */\r\n    let doesExist: boolean = false;\r\n    const fullPath: string = this.resolvePath(localPath);\r\n\r\n    try {\r\n      doesExist = fs.statSync(fullPath).isFile();\r\n    } catch (e) { /* no-op */ }\r\n\r\n    return doesExist;\r\n  }\r\n\r\n  public copyFile(localSourcePath: string, localDestPath?: string): void {\r\n    /* tslint:disable:typedef */\r\n    const path = require('path');\r\n    const fs = require('fs-extra');\r\n    /* tslint:enable:typedef */\r\n\r\n    const fullSourcePath: string = path.resolve(__dirname, localSourcePath);\r\n    const fullDestPath: string = path.resolve(\r\n      this.buildConfig.rootPath,\r\n      (localDestPath || path.basename(localSourcePath)));\r\n\r\n    fs.copySync(fullSourcePath, fullDestPath);\r\n  }\r\n\r\n  public readJSONSync(localPath: string): Object {\r\n    const fullPath: string = this.resolvePath(localPath);\r\n    let result: Object = undefined;\r\n\r\n    /* tslint:disable:typedef */\r\n    const fs = require('fs');\r\n    /* tslint:enable:typedef */\r\n\r\n    try {\r\n      let content: string = fs.readFileSync(fullPath, 'utf8');\r\n      result = JSON.parse(content);\r\n    } catch (e) { /* no-op */ }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns the path to the config file used to configure this task\r\n   */\r\n  protected _getConfigFilePath(): string {\r\n    return path.join(process.cwd(), 'config', `${this.name}.json`);\r\n  }\r\n\r\n  /**\r\n   * Loads a JSON file, supports reading JSON files with comments\r\n   */\r\n  protected _readCommentedJsonFile(filename: string): TASK_CONFIG {\r\n    return SchemaValidator.readCommentedJsonFile(filename) as TASK_CONFIG;\r\n  }\r\n\r\n  /**\r\n   * Helper function which loads a custom config file from disk, runs the SchemaValidator on it,\r\n   * and then apply it to the callback defined on the IConfigurableTask\r\n   */\r\n  private _readConfigFile(filename: string, schema?: Object): TASK_CONFIG {\r\n    if (!fs.existsSync(filename)) {\r\n      return undefined;\r\n    } else {\r\n      if (args['verbose']) { // tslint:disable-line:no-string-literal\r\n        console.log(`Found config file: ${path.basename(filename)}`);\r\n      }\r\n\r\n      const rawData: TASK_CONFIG =  this._readCommentedJsonFile(filename);\r\n\r\n      if (schema) {\r\n        SchemaValidator.validate(rawData, schema, filename);\r\n      }\r\n\r\n      return rawData;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}