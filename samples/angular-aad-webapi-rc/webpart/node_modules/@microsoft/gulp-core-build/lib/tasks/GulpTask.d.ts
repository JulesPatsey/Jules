/// <reference types="es6-promise" />
/// <reference types="node" />
import { GulpProxy } from '../GulpProxy';
import { IExecutable } from '../IExecutable';
import { IBuildConfig } from '../IBuildConfig';
import gulp = require('gulp');
export declare abstract class GulpTask<TASK_CONFIG> implements IExecutable {
    name: string;
    buildConfig: IBuildConfig;
    taskConfig: TASK_CONFIG;
    cleanMatch: string[];
    private _schema;
    /**
     * A JSON Schema object which will be used to validate this task's configuration file
     */
    readonly schema: Object;
    /**
     * Override this function to provide a schema which will be used to validate
     * the task's configuration file.
     */
    loadSchema(): Object;
    /**
     * Shallow merges config settings into the task config.
     */
    setConfig(taskConfig: TASK_CONFIG): void;
    /**
     * Deep merges config settings into task config.
     */
    mergeConfig(taskConfig: TASK_CONFIG): void;
    /**
     * Replaces task config settings with new settings.
     */
    replaceConfig(taskConfig: TASK_CONFIG): void;
    onRegister(): void;
    isEnabled(buildConfig: IBuildConfig): boolean;
    abstract executeTask(gulp: gulp.Gulp | GulpProxy, completeCallback?: (result?: Object) => void): Promise<Object> | NodeJS.ReadWriteStream | void;
    log(message: string): void;
    logVerbose(message: string): void;
    logWarning(message: string): void;
    logError(message: string): void;
    fileError(filePath: string, line: number, column: number, errorCode: string, message: string): void;
    fileWarning(filePath: string, line: number, column: number, errorCode: string, message: string): void;
    getCleanMatch(buildConfig: IBuildConfig, taskConfig?: TASK_CONFIG): string[];
    execute(config: IBuildConfig): Promise<void>;
    resolvePath(localPath: string): string;
    fileExists(localPath: string): boolean;
    copyFile(localSourcePath: string, localDestPath?: string): void;
    readJSONSync(localPath: string): Object;
    /**
     * Returns the path to the config file used to configure this task
     */
    protected _getConfigFilePath(): string;
    /**
     * Loads a JSON file, supports reading JSON files with comments
     */
    protected _readCommentedJsonFile(filename: string): TASK_CONFIG;
    /**
     * Helper function which loads a custom config file from disk, runs the SchemaValidator on it,
     * and then apply it to the callback defined on the IConfigurableTask
     */
    private _readConfigFile(filename, schema?);
}
