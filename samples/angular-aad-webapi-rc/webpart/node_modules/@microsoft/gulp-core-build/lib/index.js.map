{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\nimport * as path from 'path';\r\n\r\nimport { GulpTask } from './tasks/GulpTask';\r\nimport { GulpProxy } from './GulpProxy';\r\nimport { IExecutable } from './IExecutable';\r\nimport { IBuildConfig } from './IBuildConfig';\r\nimport { CleanTask } from './tasks/CleanTask';\r\nimport { args } from './State';\r\nexport { IExecutable } from './IExecutable';\r\nimport { initialize as initializeLogging, markTaskCreationTime, generateGulpError, setWatchMode } from './logging';\r\nimport { getFlagValue, setConfigDefaults } from './config';\r\nimport * as gulp from 'gulp';\r\n\r\nexport * from './IBuildConfig';\r\nexport * from './logging';\r\nexport * from './tasks/CopyTask';\r\nexport * from './tasks/GenerateShrinkwrapTask';\r\nexport * from './tasks/GulpTask';\r\nexport * from './tasks/CleanTask';\r\nexport * from './tasks/ValidateShrinkwrapTask';\r\n\r\n/* tslint:disable:variable-name */\r\nrequire('es6-promise').polyfill();\r\n/* tslint:enable:variable-name */\r\n\r\n// tslint:disable-next-line:no-any\r\nconst packageJSON: any = require(path.resolve(process.cwd(), 'package.json'));\r\nconst _taskMap: { [key: string]: IExecutable } = {};\r\nconst _uniqueTasks: IExecutable[] = [];\r\n\r\nconst packageFolder: string =\r\n  (packageJSON.directories && packageJSON.directories.packagePath) ?\r\n  packageJSON.directories.packagePath : '';\r\n\r\nlet _buildConfig: IBuildConfig = {\r\n  packageFolder,\r\n  srcFolder: 'src',\r\n  distFolder: path.join(packageFolder, 'dist'),\r\n  libAMDFolder: undefined,\r\n  libFolder: path.join(packageFolder, 'lib'),\r\n  tempFolder: 'temp',\r\n  properties: {},\r\n  relogIssues: getFlagValue('relogIssues', true),\r\n  showToast: getFlagValue('showToast', true),\r\n  buildSuccessIconPath: path.resolve(__dirname, 'pass.png'),\r\n  buildErrorIconPath: path.resolve(__dirname, 'fail.png'),\r\n  verbose: getFlagValue('verbose', false),\r\n  production: getFlagValue('production', false),\r\n  args: args,\r\n  shouldWarningsFailBuild: false\r\n};\r\n\r\n/**\r\n * Merges the given build config settings into existing settings.\r\n *\r\n * @param  {IBuildConfig} The build config settings.\r\n */\r\nexport function setConfig(config: IBuildConfig): void {\r\n  /* tslint:disable:typedef */\r\n  const objectAssign = require('object-assign');\r\n  /* tslint:enable:typedef */\r\n\r\n  _buildConfig = objectAssign({}, _buildConfig, config);\r\n}\r\n\r\n/**\r\n * Merges the given build config settings into existing settings.\r\n *\r\n * @param  {IBuildConfig} The build config settings.\r\n */\r\nexport function mergeConfig(config: IBuildConfig): void {\r\n  /* tslint:disable:typedef */\r\n  const merge = require('lodash.merge');\r\n  /* tslint:enable:typedef */\r\n\r\n  _buildConfig = merge({}, _buildConfig, config);\r\n}\r\n\r\n/**\r\n * Replaces the build config.\r\n *\r\n * @param  {IBuildConfig} config\r\n */\r\nexport function replaceConfig(config: IBuildConfig): void {\r\n  _buildConfig = config;\r\n}\r\n\r\n/**\r\n * Gets the current config.\r\n *\r\n * @returns IBuildConfig\r\n */\r\nexport function getConfig(): IBuildConfig {\r\n  return _buildConfig;\r\n}\r\n\r\n/**\r\n * Defines a gulp task and maps it to a given IExecutable.\r\n *\r\n * @param  {string} taskName\r\n * @param  {IExecutable} task\r\n * @returns IExecutable\r\n */\r\nexport function task(taskName: string, task: IExecutable): IExecutable {\r\n  _taskMap[taskName] = task;\r\n\r\n  _trackTask(task);\r\n\r\n  return task;\r\n}\r\n\r\n/**\r\n * The callback interface for a custom task definition.\r\n * The task should either return a Promise, a stream, or call the\r\n * callback function (passing in an object value if there was an error).\r\n */\r\nexport interface ICustomGulpTask {\r\n  (gulp: gulp.Gulp | GulpProxy, buildConfig: IBuildConfig, done: (failure?: Object) => void):\r\n    Promise<Object> | NodeJS.ReadWriteStream | void;\r\n}\r\n\r\nclass CustomTask extends GulpTask<void> {\r\n  private _fn: ICustomGulpTask;\r\n  constructor(name: string, fn: ICustomGulpTask) {\r\n    super();\r\n    this.name = name;\r\n    this._fn = fn.bind(this);\r\n  }\r\n\r\n  public executeTask(gulp: gulp.Gulp | GulpProxy, completeCallback?: (failure?: Object) => void):\r\n    Promise<Object> | NodeJS.ReadWriteStream | void {\r\n    return this._fn(gulp, getConfig(), completeCallback);\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a new subtask from a function callback. Useful as a shorthand way\r\n * of defining tasks directly in a gulpfile.\r\n *\r\n * @param {string} taskName - the name of the task, appearing in build logs\r\n * @param {boolean} addCommandLine - true if this task should be registered to the command line\r\n * @param {ICustomGulpTask} fn - the callback function to execute when this task runs\r\n */\r\nexport function subTask(taskName: string, fn: ICustomGulpTask): IExecutable {\r\n  const customTask: CustomTask = new CustomTask(taskName, fn);\r\n  return customTask;\r\n}\r\n\r\n/**\r\n * Defines a gulp watch and maps it to a given IExecutable.\r\n *\r\n * @param  {string} watchMatch\r\n * @param  {IExecutable} task\r\n * @returns IExecutable\r\n */\r\nexport function watch(watchMatch: string | string[], task: IExecutable): IExecutable {\r\n  /* tslint:disable:typedef */\r\n  const notifier = require('node-notifier');\r\n  /* tslint:enable:typedef */\r\n\r\n  _trackTask(task);\r\n\r\n  let isWatchRunning: boolean = false;\r\n  let shouldRerunWatch: boolean = false;\r\n  let lastError: boolean = undefined;\r\n\r\n  return {\r\n    execute: (buildConfig: IBuildConfig): Promise<void> => {\r\n\r\n      setWatchMode();\r\n      buildConfig.gulp.watch(watchMatch, _runWatch);\r\n\r\n      function _runWatch(): void {\r\n        if (isWatchRunning) {\r\n          shouldRerunWatch = true;\r\n        } else {\r\n          isWatchRunning = true;\r\n\r\n          _executeTask(task, buildConfig)\r\n            .then(() => {\r\n              if (buildConfig.showToast && lastError) {\r\n                lastError = undefined;\r\n\r\n                notifier.notify({\r\n                  title: 'Build succeeded',\r\n                  message: packageJSON.name,\r\n                  icon: buildConfig.buildSuccessIconPath\r\n                });\r\n              }\r\n              _finalizeWatch();\r\n            })\r\n            .catch((error) => {\r\n              if (buildConfig.showToast) {\r\n                if (!lastError || lastError !== error) {\r\n                  lastError = error;\r\n                  notifier.notify({\r\n                    title: 'Build failed',\r\n                    message: error,\r\n                    icon: buildConfig.buildErrorIconPath\r\n                  });\r\n                }\r\n              }\r\n              _finalizeWatch();\r\n            });\r\n        }\r\n      }\r\n\r\n      function _finalizeWatch(): void {\r\n        isWatchRunning = false;\r\n\r\n        if (shouldRerunWatch) {\r\n          shouldRerunWatch = false;\r\n          _runWatch();\r\n        }\r\n      }\r\n\r\n      return Promise.resolve<void>();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Takes in IExecutables as arguments and returns an IExecutable that will execute them in serial.\r\n *\r\n * @param  {IExecutable[]} ...tasks\r\n * @returns IExecutable\r\n */\r\nexport function serial(...tasks: Array<IExecutable[] | IExecutable>): IExecutable {\r\n  const flatTasks: IExecutable[] = <IExecutable[]>_flatten(tasks);\r\n\r\n  for (const task of flatTasks) {\r\n    _trackTask(task);\r\n  }\r\n\r\n  return {\r\n    execute: (buildConfig: IBuildConfig): Promise<void> => {\r\n      let output: Promise<void> = Promise.resolve<void>();\r\n\r\n      for (let task of flatTasks) {\r\n        output = output.then(() => _executeTask(task, buildConfig));\r\n      }\r\n\r\n      return output;\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Takes in IExecutables as arguments and returns an IExecutable that will execute them in parallel.\r\n *\r\n * @param  {IExecutable[]} ...tasks\r\n * @returns IExecutable\r\n */\r\nexport function parallel(...tasks: Array<IExecutable[] | IExecutable>): IExecutable {\r\n  const flattenTasks: IExecutable[] = _flatten<IExecutable>(tasks);\r\n\r\n  for (const task of flattenTasks) {\r\n    _trackTask(task);\r\n  }\r\n\r\n  return {\r\n    // tslint:disable-next-line:no-any\r\n    execute: (buildConfig: IBuildConfig): Promise<any> => {\r\n      return new Promise<void[]>((resolve, reject) => {\r\n        const promises: Promise<void>[] = [];\r\n        for (const task of flattenTasks) {\r\n          promises.push(_executeTask(task, buildConfig));\r\n        }\r\n\r\n        // Use promise all to make sure errors are propagated correctly\r\n      Promise.all<void>(promises).then(resolve, reject);\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Initializes the gulp tasks.\r\n *\r\n * @param  {any} gulp\r\n */\r\nexport function initialize(gulp: gulp.Gulp): void {\r\n  _buildConfig.rootPath = process.cwd();\r\n  _buildConfig.gulp = new GulpProxy(gulp);\r\n  _buildConfig.uniqueTasks = _uniqueTasks;\r\n\r\n  _handleCommandLineArguments();\r\n\r\n  setConfigDefaults(_buildConfig);\r\n\r\n  for (const task of _buildConfig.uniqueTasks) {\r\n    if (task.onRegister) {\r\n      task.onRegister();\r\n    }\r\n  }\r\n\r\n  initializeLogging(gulp, undefined, undefined);\r\n\r\n  Object.keys(_taskMap).forEach(taskName => _registerTask(gulp, taskName, _taskMap[taskName]));\r\n\r\n  markTaskCreationTime();\r\n}\r\n\r\n/**\r\n * Registers a given gulp task given a name and an IExecutable.\r\n *\r\n * @param  {any} gulp\r\n * @param  {string} taskName\r\n * @param  {IExecutable} task\r\n */\r\nfunction _registerTask(gulp: gulp.Gulp, taskName: string, task: IExecutable): void {\r\n  gulp.task(taskName, (cb) => {\r\n    _executeTask(task, _buildConfig)\r\n      .then(() => {\r\n        cb();\r\n      },\r\n      (error: Error) => {\r\n        cb(generateGulpError(error));\r\n      });\r\n  });\r\n}\r\n\r\n/**\r\n * Executes a given IExecutable.\r\n *\r\n * @param  {IExecutable} task\r\n * @param  {IBuildConfig} buildConfig\r\n * @returns Promise\r\n */\r\nfunction _executeTask(task: IExecutable, buildConfig: IBuildConfig): Promise<void> {\r\n  // Try to fallback to the default task if provided.\r\n  if (task && !task.execute) {\r\n    /* tslint:disable:no-any */\r\n    if ((task as any).default) {\r\n      task = (task as any).default;\r\n    }\r\n    /* tslint:enable:no-any */\r\n  }\r\n\r\n  // If the task is missing, throw a meaningful error.\r\n  if (!task || !task.execute) {\r\n    return Promise.reject(new Error(`A task was scheduled, but the task was null. This probably means the task wasn't imported correctly.`));\r\n  }\r\n\r\n  if (task.isEnabled === undefined || task.isEnabled(buildConfig)) {\r\n    const startTime: [number, number] = process.hrtime();\r\n\r\n    if (buildConfig.onTaskStart && task.name) {\r\n      buildConfig.onTaskStart(task.name);\r\n    }\r\n\r\n    const taskPromise: Promise<void> = task.execute(buildConfig)\r\n      .then(() => {\r\n        if (buildConfig.onTaskEnd && task.name) {\r\n          buildConfig.onTaskEnd(task.name, process.hrtime(startTime));\r\n        }\r\n      },\r\n      // tslint:disable-next-line:no-any\r\n      (error: any) => {\r\n        if (buildConfig.onTaskEnd && task.name) {\r\n          buildConfig.onTaskEnd(task.name, process.hrtime(startTime), error);\r\n        }\r\n\r\n        return Promise.reject(error);\r\n      });\r\n\r\n    return taskPromise;\r\n  }\r\n\r\n  // No-op otherwise.\r\n  return Promise.resolve<void>();\r\n}\r\n\r\nfunction _trackTask(task: IExecutable): void {\r\n  if (_uniqueTasks.indexOf(task) < 0) {\r\n    _uniqueTasks.push(task);\r\n  }\r\n}\r\n\r\n/**\r\n * Flattens a set of arrays into a single array.\r\n *\r\n * @param  {T} arr\r\n */\r\nfunction _flatten<T>(arr: Array<T | T[]>): T[] {\r\n  let output: T[] = [];\r\n\r\n  for (let toFlatten of arr) {\r\n    if (Array.isArray(toFlatten)) {\r\n      output = output.concat(toFlatten);\r\n    } else {\r\n      output.push(toFlatten);\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction _handleCommandLineArguments(): void {\r\n  _handleTasksListArguments();\r\n}\r\n\r\nfunction _handleTasksListArguments(): void {\r\n  /* tslint:disable-next-line:no-string-literal */\r\n  if (args['tasks'] || args['tasks-simple'] || args['T']) {\r\n    global['dontWatchExit'] = true; // tslint:disable-line:no-string-literal\r\n  }\r\n}\r\n\r\nexport const clean: IExecutable = new CleanTask();\r\n\r\n// Register default clean task.\r\ntask('clean', clean);\r\n"],"sourceRoot":"..\\src"}