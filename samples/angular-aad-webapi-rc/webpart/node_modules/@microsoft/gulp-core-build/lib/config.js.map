{"version":3,"sources":["config.ts"],"names":[],"mappings":";AAAA,sBAAqB,SAAS,CAAC,CAAA;AAE/B,IAAM,2BAA2B,GAAW,MAAM,CAAC;AAEnD,IAAI,cAAc,GAAW,EAAE,CAAC;AAEhC,2BAAkC,aAAqB;IACrD,cAAc,GAAG,aAAa,CAAC;AACjC,CAAC;AAFe,yBAAiB,oBAEhC,CAAA;AAED,wBAA+B,IAAY,EAAE,YAA+B;IAE1E,qDAAqD;IACrD,IAAM,WAAW,GAAW,2BAA2B,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC7E,IAAM,QAAQ,GAAW,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAClD,IAAM,SAAS,GAAqB,YAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAE7D,MAAM,CAAC,kBAAkB,CAAC,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;AACrF,CAAC;AARe,sBAAc,iBAQ7B,CAAA;AAED,sBAA6B,IAAY,EAAE,YAAsB;IAC/D,IAAM,WAAW,GAAqB,cAAc,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAEzE,MAAM,CAAC,WAAW,KAAK,MAAM,IAAI,WAAW,KAAK,IAAI,CAAC;AACxD,CAAC;AAJe,oBAAY,eAI3B,CAAA;AAED,2BAA2B;AAC3B;IAA4B,cAA6B;SAA7B,WAA6B,CAA7B,sBAA6B,CAA7B,IAA6B;QAA7B,6BAA6B;;IACzD,0BAA0B;IACxB,GAAG,CAAC,CAAc,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,CAAC;QAAlB,IAAM,GAAG,aAAA;QACZ,EAAE,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,GAAG,CAAC;QACb,CAAC;KACF;IAED,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC","file":"config.js","sourcesContent":["import { args } from './State';\r\n\r\nconst ENVIRONMENT_VARIABLE_PREFIX: string = 'GCB_';\r\n\r\nlet _defaultValues: Object = {};\r\n\r\nexport function setConfigDefaults(defaultValues: Object): void {\r\n  _defaultValues = defaultValues;\r\n}\r\n\r\nexport function getConfigValue(name: string, defaultValue?: string | boolean): string | boolean {\r\n\r\n  // Try to get config value from environment variable.\r\n  const envVariable: string = ENVIRONMENT_VARIABLE_PREFIX + name.toUpperCase();\r\n  const envValue: string = process.env[envVariable];\r\n  const argsValue: string | boolean = args[name.toLowerCase()];\r\n\r\n  return _firstDefinedValue(argsValue, envValue, defaultValue, _defaultValues[name]);\r\n}\r\n\r\nexport function getFlagValue(name: string, defaultValue?: boolean): boolean {\r\n  const configValue: string | boolean = getConfigValue(name, defaultValue);\r\n\r\n  return configValue === 'true' || configValue === true;\r\n}\r\n\r\n/* tslint:disable:no-any */\r\nfunction _firstDefinedValue(...args: (string | boolean)[]): any {\r\n/* tslint:enable:no-any */\r\n  for (const arg of args) {\r\n    if (arg !== undefined) {\r\n      return arg;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}"],"sourceRoot":"..\\src"}