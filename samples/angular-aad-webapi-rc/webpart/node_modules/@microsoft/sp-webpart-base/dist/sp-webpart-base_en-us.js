define(["@microsoft/sp-page-context","@microsoft/decorators","@ms/sp-telemetry","@microsoft/sp-core-library","@microsoft/sp-loader","@microsoft/sp-http","@microsoft/sp-lodash-subset","react-dom","react","office-ui-fabric-react","@microsoft/sp-client-base","@microsoft/sp-component-base"], function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2),__webpack_require__(8),__webpack_require__(3),__webpack_require__(4),__webpack_require__(5),__webpack_require__(6),__webpack_require__(7),__webpack_require__(1),__webpack_require__(9),__webpack_require__(10),__webpack_require__(11),__webpack_require__(12),__webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_76__, __WEBPACK_EXTERNAL_MODULE_77__, __WEBPACK_EXTERNAL_MODULE_80__, __WEBPACK_EXTERNAL_MODULE_90__, __WEBPACK_EXTERNAL_MODULE_91__, __WEBPACK_EXTERNAL_MODULE_92__, __WEBPACK_EXTERNAL_MODULE_94__, __WEBPACK_EXTERNAL_MODULE_95__, __WEBPACK_EXTERNAL_MODULE_97__, __WEBPACK_EXTERNAL_MODULE_109__, __WEBPACK_EXTERNAL_MODULE_134__) { return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// install a JSONP callback for chunk loading
	/******/ 	var parentJsonpFunction = window["webpackJsonp974a7777_0990_4136_8fa6_95d80114c2e0"];
	/******/ 	window["webpackJsonp974a7777_0990_4136_8fa6_95d80114c2e0"] = function webpackJsonpCallback(chunkIds, moreModules) {
	/******/ 		// add "moreModules" to the modules object,
	/******/ 		// then flag all "chunkIds" as loaded and fire callback
	/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
	/******/ 		for(;i < chunkIds.length; i++) {
	/******/ 			chunkId = chunkIds[i];
	/******/ 			if(installedChunks[chunkId])
	/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
	/******/ 			installedChunks[chunkId] = 0;
	/******/ 		}
	/******/ 		for(moduleId in moreModules) {
	/******/ 			modules[moduleId] = moreModules[moduleId];
	/******/ 		}
	/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
	/******/ 		while(callbacks.length)
	/******/ 			callbacks.shift().call(null, __webpack_require__);
	/******/
	/******/ 	};
	/******/
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// object to store loaded and loading chunks
	/******/ 	// "0" means "already loaded"
	/******/ 	// Array means "loading", array contains callbacks
	/******/ 	var installedChunks = {
	/******/ 		0:0
	/******/ 	};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/ 	// This file contains only the entry chunk.
	/******/ 	// The chunk loading function for additional chunks
	/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
	/******/ 		// "0" is the signal for "already loaded"
	/******/ 		if(installedChunks[chunkId] === 0)
	/******/ 			return callback.call(null, __webpack_require__);
	/******/
	/******/ 		// an array means "currently loading".
	/******/ 		if(installedChunks[chunkId] !== undefined) {
	/******/ 			installedChunks[chunkId].push(callback);
	/******/ 		} else {
	/******/ 			// start chunk loading
	/******/ 			installedChunks[chunkId] = [callback];
	/******/ 			var head = document.getElementsByTagName('head')[0];
	/******/ 			var script = document.createElement('script');
	/******/ 			script.type = 'text/javascript';
	/******/ 			script.charset = 'utf-8';
	/******/ 			script.async = true;
	/******/
	/******/ 			script.src = __webpack_require__.p + "" + chunkId + "." + ({"1":"sp-webpart-base-propertypane"}[chunkId]||chunkId) + "_" + {"1":"8097b8b2a0859bda2186"}[chunkId] + ".js";
	/******/ 			head.appendChild(script);
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		__webpack_require__(1);
		var PropertyPaneDefinitions_1 = __webpack_require__(2);
		exports.WebPartConfigurationEvent = PropertyPaneDefinitions_1.WebPartConfigurationEvent;
		var BaseClientSideWebPart_1 = __webpack_require__(3);
		exports.BaseClientSideWebPart = BaseClientSideWebPart_1.default;
		var ClientSideWebPartManager_1 = __webpack_require__(89);
		exports.ClientSideWebPartManager = ClientSideWebPartManager_1.default;
		var ReactWebPart_1 = __webpack_require__(136);
		exports.ReactWebPart = ReactWebPart_1.default;
		var ReservedEventNames_1 = __webpack_require__(102);
		exports.ReservedEventNames = ReservedEventNames_1.default;
		var WebPartDataConverter_1 = __webpack_require__(137);
		exports.WebPartDataConverter = WebPartDataConverter_1.default;
		var EventAggregator_1 = __webpack_require__(101);
		exports.EventAggregator = EventAggregator_1.default;
		var Placeholder_1 = __webpack_require__(139);
		exports.Placeholder = Placeholder_1.default;
		var PlaceholderSpinner_1 = __webpack_require__(96);
		exports.PlaceholderSpinner = PlaceholderSpinner_1.default;
		var WebPartForm_1 = __webpack_require__(142);
		exports.WebPartForm = WebPartForm_1.default;
		var PropertyPaneDefinitions_2 = __webpack_require__(2);
		exports.PropertyPaneState = PropertyPaneDefinitions_2.PropertyPaneState;
		var IPropertyPaneField_1 = __webpack_require__(114);
		exports.PropertyPaneFieldType = IPropertyPaneField_1.PropertyPaneFieldType;
		var PropertyPaneCustomField_1 = __webpack_require__(143);
		exports.PropertyPaneCustomField = PropertyPaneCustomField_1.PropertyPaneCustomField;
		var IPropertyPaneButton_1 = __webpack_require__(144);
		exports.PropertyPaneButtonType = IPropertyPaneButton_1.PropertyPaneButtonType;
		var PropertyPaneButton_1 = __webpack_require__(145);
		exports.PropertyPaneButton = PropertyPaneButton_1.PropertyPaneButton;
		var PropertyPaneCheckbox_1 = __webpack_require__(146);
		exports.PropertyPaneCheckbox = PropertyPaneCheckbox_1.PropertyPaneCheckbox;
		var PropertyPaneChoiceGroup_1 = __webpack_require__(147);
		exports.PropertyPaneChoiceGroup = PropertyPaneChoiceGroup_1.PropertyPaneChoiceGroup;
		var PropertyPaneDropdown_1 = __webpack_require__(148);
		exports.PropertyPaneDropdown = PropertyPaneDropdown_1.PropertyPaneDropdown;
		var PropertyPaneHorizontalRule_1 = __webpack_require__(149);
		exports.PropertyPaneHorizontalRule = PropertyPaneHorizontalRule_1.PropertyPaneHorizontalRule;
		var PropertyPaneLabel_1 = __webpack_require__(150);
		exports.PropertyPaneLabel = PropertyPaneLabel_1.PropertyPaneLabel;
		var PropertyPaneLink_1 = __webpack_require__(151);
		exports.PropertyPaneLink = PropertyPaneLink_1.PropertyPaneLink;
		var PropertyPaneSlider_1 = __webpack_require__(152);
		exports.PropertyPaneSlider = PropertyPaneSlider_1.PropertyPaneSlider;
		var PropertyPaneTextField_1 = __webpack_require__(153);
		exports.PropertyPaneTextField = PropertyPaneTextField_1.PropertyPaneTextField;
		var PropertyPaneToggle_1 = __webpack_require__(154);
		exports.PropertyPaneToggle = PropertyPaneToggle_1.PropertyPaneToggle;
	
	
	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {
	
		var scripts = document.getElementsByTagName('script');
		var regex = new RegExp('sp-webpart-base_?[a-zA-Z0-9-_]*.js', 'i');
		var found = false;
		
		if (scripts && scripts.length) {
		  for (var i = 0; i < scripts.length; i++) {
		    if (!scripts[i]) continue;
		    var path = scripts[i].getAttribute('src');
		    if (path && path.match(regex)) {
		      __webpack_require__.p = path.substring(0, path.lastIndexOf('/') + 1);
		      found = true;
		      break;
		    }
		  }
		}
		
		if (!found) {
		  for (var global in window.__setWebpackPublicPathLoaderSrcRegistry__) {
		    if (global && global.match(regex)) {
		      __webpack_require__.p = global.substring(0, global.lastIndexOf('/') + 1);
		      break;
		    }
		  }
		}
	
	/***/ },
	/* 2 */
	/***/ function(module, exports) {
	
		"use strict";
		(function (WebPartConfigurationEvent) {
		    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneConfigurationStart"] = 1] = "PropertyPaneConfigurationStart";
		    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneConfigurationComplete"] = 2] = "PropertyPaneConfigurationComplete";
		    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneOpened"] = 3] = "PropertyPaneOpened";
		    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneClosed"] = 4] = "PropertyPaneClosed";
		    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneApplyClicked"] = 5] = "PropertyPaneApplyClicked";
		    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneLostFocus"] = 6] = "PropertyPaneLostFocus";
		    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneWebPartsSwitched"] = 7] = "PropertyPaneWebPartsSwitched";
		})(exports.WebPartConfigurationEvent || (exports.WebPartConfigurationEvent = {}));
		var WebPartConfigurationEvent = exports.WebPartConfigurationEvent;
		(function (PropertyPaneState) {
		    PropertyPaneState[PropertyPaneState["Open"] = 1] = "Open";
		    PropertyPaneState[PropertyPaneState["Close"] = 2] = "Close";
		    PropertyPaneState[PropertyPaneState["Toggle"] = 3] = "Toggle";
		    PropertyPaneState[PropertyPaneState["Default"] = 4] = "Default";
		    PropertyPaneState[PropertyPaneState["Refresh"] = 5] = "Refresh";
		})(exports.PropertyPaneState || (exports.PropertyPaneState = {}));
		var PropertyPaneState = exports.PropertyPaneState;
	
	
	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var decorators_1 = __webpack_require__(4);
		var lodash = __webpack_require__(5);
		var odsp_utilities_bundle_1 = __webpack_require__(6);
		var sp_telemetry_1 = __webpack_require__(76);
		var sp_core_library_1 = __webpack_require__(77);
		var PropertyPaneDefinitions_1 = __webpack_require__(2);
		var SPWebPartError_1 = __webpack_require__(78);
		var Object_1 = __webpack_require__(81);
		var ExecuteAndReThrow_1 = __webpack_require__(82);
		var ClassicPageUtils_1 = __webpack_require__(83);
		var Strings_resx_1 = __webpack_require__(79);
		var cswp_base_module_scss_1 = __webpack_require__(84);
		var BaseClientSideWebPart = (function () {
		    function BaseClientSideWebPart() {
		        this._initialized = false;
		        this._logSource = sp_telemetry_1._LogSource.create('BaseClientSideWebPart');
		        if (this.constructor['name'] === 'BaseClientSideWebPart') {
		            throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.BaseConstructError);
		        }
		    }
		    Object.defineProperty(BaseClientSideWebPart.prototype, "context", {
		        get: function () {
		            if (this._initialized) {
		                return this._context;
		            }
		            else {
		                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.NotInitializedError);
		            }
		        },
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "domElement", {
		        get: function () { return this._context.domElement; },
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "dataVersion", {
		        get: function () {
		            return sp_core_library_1.Version.parse('1.0');
		        },
		        enumerable: true,
		        configurable: true
		    });
		    ;
		    Object.defineProperty(BaseClientSideWebPart.prototype, "displayMode", {
		        get: function () { return this._displayMode; },
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "properties", {
		        get: function () {
		            if (this._initialized) {
		                return this._properties;
		            }
		            else {
		                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.NotInitializedError);
		            }
		        },
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "propertiesMetadata", {
		        get: function () { return undefined; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedOnce", {
		        get: function () { return this._renderedOnce; },
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedFromPersistedData", {
		        get: function () { return this._renderedFromPersistedData; },
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "canOpenPopupOnRender", {
		        get: function () {
		            return true;
		        },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "disableReactivePropertyChanges", {
		        get: function () { return false; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "previewImageUrl", {
		        get: function () { return undefined; },
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "accessibleTitle", {
		        get: function () { return this._getDefaultAccessibleTitle(); },
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "title", {
		        get: function () { return this._title; },
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "description", {
		        get: function () { return this._description; },
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "isRenderAsync", {
		        get: function () { return false; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "instanceId", {
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(BaseClientSideWebPart.prototype, "propertyPaneRenderedByWebPart", {
		        set: function (o) { this._throwReadOnlyError(); },
		        enumerable: true,
		        configurable: true
		    });
		    BaseClientSideWebPart.prototype.onInit = function () {
		        return Promise.resolve(undefined);
		    };
		    BaseClientSideWebPart.prototype.renderCompleted = function () {
		        this._renderCompleted();
		    };
		    BaseClientSideWebPart.prototype.onDisplayModeChanged = function (oldDisplayMode) {
		        sp_core_library_1.Validate.isTrue(oldDisplayMode !== this.displayMode, Strings_resx_1.default.OnDisplayModeChangedInvalidInvocation);
		        this._renderWithAccessibileTitle();
		    };
		    BaseClientSideWebPart.prototype.onBeforeSerialize = function () {
		        return undefined;
		    };
		    BaseClientSideWebPart.prototype.onAfterDeserialize = function (deserializedObject, dataVersion) {
		        return deserializedObject;
		    };
		    ;
		    BaseClientSideWebPart.prototype.onEvent = function (eventName, eventObject) {
		    };
		    BaseClientSideWebPart.prototype.getPropertyPaneConfiguration = function () {
		        return undefined;
		    };
		    BaseClientSideWebPart.prototype.onDispose = function () {
		    };
		    BaseClientSideWebPart.prototype.onPropertyPaneFieldChanged = function (propertyPath, oldValue, newValue) {
		        if (!this.disableReactivePropertyChanges) {
		            this._renderWithAccessibileTitle();
		        }
		    };
		    BaseClientSideWebPart.prototype.onPropertyPaneConfigurationStart = function () {
		    };
		    BaseClientSideWebPart.prototype.onPropertyPaneConfigurationComplete = function () {
		    };
		    BaseClientSideWebPart.prototype.onAfterPropertyPaneChangesApplied = function () {
		    };
		    BaseClientSideWebPart.prototype.onPropertyPaneRendered = function () {
		    };
		    BaseClientSideWebPart.prototype.renderError = function (error) {
		        this.context.statusRenderer.clearLoadingIndicator(this.domElement);
		        this.context.statusRenderer.renderError(this.domElement, error);
		        sp_telemetry_1._TraceLogger.logError(this._logSource, error);
		    };
		    BaseClientSideWebPart.prototype.clearError = function () {
		        this.context.statusRenderer.clearError(this.domElement);
		    };
		    BaseClientSideWebPart.prototype._reInstateServerProcessedData = function (deserializedProperties, serverProcessedContent) {
		        var _this = this;
		        if (!deserializedProperties) {
		            return {};
		        }
		        var fixedProperties = deserializedProperties;
		        if (!this.renderedFromPersistedData) {
		            return fixedProperties;
		        }
		        this._forEachPropertyWithMetaData(function (propPath, metadata) {
		            if (_this.context.manifest.id !== 'b7dd04e1-19ce-4b24-9132-b60a1c2b910d') {
		                lodash.set(fixedProperties, propPath, undefined);
		            }
		        }, fixedProperties);
		        if (serverProcessedContent) {
		            var htmlMaps = [serverProcessedContent.htmlStrings, serverProcessedContent.imageSources, serverProcessedContent.links];
		            for (var _i = 0, htmlMaps_1 = htmlMaps; _i < htmlMaps_1.length; _i++) {
		                var htmlMap = htmlMaps_1[_i];
		                if (htmlMap) {
		                    for (var propPath in htmlMap) {
		                        var value = htmlMap[propPath] ? lodash.unescape(htmlMap[propPath]) : undefined;
		                        lodash.set(fixedProperties, propPath, value);
		                    }
		                }
		            }
		        }
		        return fixedProperties;
		    };
		    BaseClientSideWebPart.prototype._forEachPropertyWithMetaData = function (callback, properties ) {
		        if (this.propertiesMetadata) {
		            for (var propPath in this.propertiesMetadata) {
		                var metadata = this.propertiesMetadata[propPath];
		                var wildcardCount = (propPath.match(/\*/g) || []).length;
		                if (wildcardCount > 1) {
		                    console.warn("Invalid property path: Multiple wildcards are not supported in property paths.\n Entry with path '" + propPath + "' got ignored in the properties metadata.");
		                    continue;
		                }
		                else if (wildcardCount === 1) {
		                    var index = propPath.indexOf('[*]');
		                    if (index < -1) {
		                        console.warn("Invalid property path: Wildcards are only supported inside brackets to select array\n indices as in 'foo[*].bar'. Entry with path '" + propPath + "' got ignored in the properties metadata.");
		                        continue;
		                    }
		                    else {
		                        var arrayPath = propPath.substr(0, index);
		                        var arrayInstance = lodash.get(properties || this.properties, arrayPath);
		                        if (!arrayInstance) {
		                            console.warn("Invalid property path: Could not find an array named '" + arrayPath + "' in the properties.\n Entry with path '" + propPath + "' got ignored in the properties metadata.");
		                            continue;
		                        }
		                        else {
		                            for (var i = 0; i < arrayInstance.length; i++) {
		                                var fixedPropPath = propPath.replace('*', "" + i);
		                                callback(fixedPropPath, metadata);
		                            }
		                        }
		                    }
		                }
		                else {
		                    callback(propPath, metadata);
		                }
		            }
		        }
		    };
		    BaseClientSideWebPart.prototype._deserialize = function (data) {
		        return this._reInstateServerProcessedData(data.properties, data.serverProcessedContent);
		    };
		    BaseClientSideWebPart.prototype._internalInitialize = function (webPartContext) {
		        sp_core_library_1.Validate.isNotNullOrUndefined(webPartContext, 'webPartContext');
		        var context = webPartContext;
		        this._processInputParams(context);
		        sp_telemetry_1._TraceLogger.logVerbose(this._logSource, odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.ConstructLog, context.webPartTag));
		        this._renderedOnce = false;
		        this['__type'] = 'BaseClientSideWebPart';
		        this.render = this.render.bind(this);
		        this.onDispose = this.onDispose.bind(this);
		        this.renderError = this.renderError.bind(this);
		        this.clearError = this.clearError.bind(this);
		        this.onPropertyPaneRendered = this.onPropertyPaneRendered.bind(this);
		        this._initialized = true;
		    };
		    BaseClientSideWebPart.prototype._internalDeserialize = function (data) {
		        if (data) {
		            if (data.title) {
		                this._title = data.title;
		            }
		            if (data.description) {
		                this._description = data.description;
		            }
		            if (typeof data.dataVersion !== 'string') {
		                data.dataVersion = '1.0';
		            }
		            var deserializedData = {
		                properties: data.properties,
		                serverProcessedContent: data.serverProcessedContent,
		                dataVersion: sp_core_library_1.Version.tryParse(data.dataVersion)
		            };
		            var deserializedPropsObject = this._deserialize(deserializedData);
		            var fixedProps = this.onAfterDeserialize(deserializedPropsObject, deserializedData.dataVersion);
		            if (!fixedProps) {
		                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.OnAfterDeserializeReturnedNull, this.context.webPartTag);
		            }
		            this._properties = fixedProps;
		        }
		    };
		    BaseClientSideWebPart.prototype._internalFirstTimeRender = function (addedFromPersistedData, mode, qosMonitor, data) {
		        var _this = this;
		        if (mode === void 0) { mode = sp_core_library_1.DisplayMode.Read; }
		        if (this._renderPromiseResolver) {
		            throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.FirstTimeRenderCalledMoreThanOnce, this.context.webPartTag);
		        }
		        sp_telemetry_1._TraceLogger.logVerboseData({
		            source: this._logSource,
		            message: odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.StartedFirstTimeRender, this.context.webPartTag),
		            serviceScope: this.context.serviceScope
		        });
		        return new Promise(function (resolve) {
		            if (!_this._initialized) {
		                qosMonitor.writeUnexpectedFailure('BaseConstructorNotCalled');
		                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.NotInitializedError, _this.context.webPartTag);
		            }
		            _this._displayMode = mode;
		            _this._renderedFromPersistedData = addedFromPersistedData;
		            if (!_this._renderedFromPersistedData) {
		                var isInternal = _this.context.manifest.isInternal || false;
		                var logEntry = new sp_telemetry_1._LogEntry(_this._logSource.id, 'WebPartAdded', sp_telemetry_1._LogType.Event, {
		                    'alias': _this.context.manifest.alias,
		                    'isInternal': isInternal.toString()
		                });
		                sp_telemetry_1._EngagementLogger.logEventWithLogEntry(logEntry);
		            }
		            _this._internalDeserialize(data);
		            if (!_this._properties) {
		                qosMonitor.writeUnexpectedFailure('PropertyBagNull');
		                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.PropertyBagNull, _this.context.webPartTag);
		            }
		            var promise = _this.onInit();
		            if (!promise) {
		                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.OnInitReturnedNullPromise, _this.context.webPartTag);
		            }
		            return promise.then(function () {
		                sp_telemetry_1._TraceLogger.logVerboseData({
		                    source: _this._logSource,
		                    message: odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.OnInitCompleted, _this.context.webPartTag),
		                    serviceScope: _this.context.serviceScope
		                });
		                sp_telemetry_1._PerformanceLogger.markComponent(_this.context.webPartTag, 'init');
		                _this.context.statusRenderer.clearLoadingIndicator(_this.domElement);
		                _this._renderWithAccessibileTitle();
		                _this._renderedOnce = true;
		                if (!_this.isRenderAsync) {
		                    sp_telemetry_1._PerformanceLogger.endMarkForComponent(_this.context.webPartTag);
		                    resolve();
		                }
		                else {
		                    _this._renderPromiseResolver = resolve;
		                    sp_telemetry_1._PerformanceLogger.markComponent(_this.context.webPartTag, 'asyncRenderStart');
		                    _this._startAsyncRenderGuardTimer();
		                }
		            });
		        });
		    };
		    BaseClientSideWebPart.prototype._internalSetDisplayMode = function (newDisplayMode) {
		        if (this._displayMode !== newDisplayMode) {
		            var oldDisplayMode = this._displayMode;
		            this._displayMode = newDisplayMode;
		            this.onDisplayModeChanged(oldDisplayMode);
		        }
		    };
		    BaseClientSideWebPart.prototype._internalGetPropertyPaneData = function () {
		        if (!this._propertiesBackup) {
		            this._propertiesBackup = lodash.cloneDeep(this.properties);
		        }
		        var configuration = this.getPropertyPaneConfiguration();
		        return {
		            webPartId: this.context.instanceId,
		            title: this.title,
		            isReactive: !this.disableReactivePropertyChanges,
		            configuration: configuration,
		            properties: lodash.cloneDeep(this.properties),
		            onPropertyPaneFieldChanged: undefined,
		            onConfigurationEvent: undefined,
		            onRendered: this.onPropertyPaneRendered
		        };
		    };
		    BaseClientSideWebPart.prototype._internalOnPropertyPaneFieldChanged = function (propertyPath, newValue) {
		        var oldValue = lodash.get(this._properties, propertyPath); 
		        this._updateProperty(propertyPath, newValue);
		        if (this.context.host.setDirty) {
		            this.context.host.setDirty(this.context.instanceId);
		        }
		        this.onPropertyPaneFieldChanged(propertyPath, oldValue, newValue);
		    };
		    BaseClientSideWebPart.prototype._internalOnConfigurationEvent = function (configurationEvent) {
		        switch (configurationEvent) {
		            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationStart:
		                this.onPropertyPaneConfigurationStart();
		                break;
		            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationComplete:
		                this.onPropertyPaneConfigurationComplete();
		                break;
		            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneApplyClicked:
		                if (this.disableReactivePropertyChanges) {
		                    this.render();
		                }
		                this._propertiesBackup = undefined;
		                this.onAfterPropertyPaneChangesApplied();
		                break;
		        }
		    };
		    BaseClientSideWebPart.prototype._internalSetDirtyBit = function () {
		        if (this.displayMode === sp_core_library_1.DisplayMode.Read) {
		            return;
		        }
		        var serializedState = this._internalSerialize();
		        var newState = JSON.stringify(serializedState);
		        if (!this._previousState) {
		            this._previousState = newState;
		        }
		        else if (this._previousState !== newState && this.context.host.setDirty) {
		            this.context.host.setDirty(this.context.instanceId, serializedState);
		            this._previousState = newState;
		        }
		    };
		    BaseClientSideWebPart.prototype._serialize = function () {
		        var serverProcessedContent = {
		            htmlStrings: {},
		            imageSources: {},
		            links: {}
		        };
		        var properties = lodash.cloneDeep(this.properties);
		        this._forEachPropertyWithMetaData(function (propPath, metadata) {
		            var key = propPath;
		            var unescapedValue = lodash.get(properties, propPath);
		            var value = unescapedValue ? lodash.escape(unescapedValue) : undefined;
		            if (typeof value === 'string' && value !== undefined) {
		                if (metadata.isHtmlString) {
		                    serverProcessedContent.htmlStrings[key] = value;
		                }
		                else if (metadata.isLink) {
		                    serverProcessedContent.links[key] = value;
		                }
		                else if (metadata.isImageSource) {
		                    serverProcessedContent.imageSources[key] = value;
		                }
		                lodash.set(properties, propPath, undefined);
		            }
		        });
		        return {
		            dataVersion: this.dataVersion,
		            properties: properties,
		            serverProcessedContent: serverProcessedContent
		        };
		    };
		    BaseClientSideWebPart.prototype._internalSerialize = function () {
		        var _this = this;
		        var data;
		        ExecuteAndReThrow_1.executeAndReThrow(function () {
		            _this.onBeforeSerialize();
		            var serializedData = _this._serialize();
		            sp_core_library_1.Validate.isNotNullOrUndefined(serializedData.dataVersion, 'serialized data version');
		            data = {
		                id: _this.context.manifest.id,
		                instanceId: _this.context.instanceId,
		                title: _this.title,
		                description: _this.description,
		                serverProcessedContent: serializedData.serverProcessedContent,
		                dataVersion: serializedData.dataVersion.toString(),
		                properties: serializedData.properties
		            };
		        }, SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.SerializationFailed, this.context.webPartTag), this._logSource);
		        return data;
		    };
		    BaseClientSideWebPart.prototype._internalDispose = function () {
		        this.onDispose();
		        sp_telemetry_1._TraceLogger.logVerbose(this._logSource, odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.DisposeLog, this.context.webPartTag));
		    };
		    BaseClientSideWebPart.prototype._updateProperty = function (propertyPath, newValue) {
		        lodash.update(this.properties, propertyPath, function () { return newValue; });
		    };
		    BaseClientSideWebPart.prototype._processInputParams = function (context) {
		        sp_core_library_1.Validate.isNotNullOrUndefined(context, 'webpart context');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.domElement, 'webpart element');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.instanceId, 'webpart instanceId');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.manifest, 'webpart manifest');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.webPartTag, 'webpart tag');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.spHttpClient, 'webpart spHttpClient');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.httpClient, 'webpart httpClient');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.pageContext, 'webpart context pageContext');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.eventAggregator, 'webpart context eventAggregator');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.statusRenderer, 'webpart context statusRenderer');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.propertyPane, 'webpart context propertyPane');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.host, 'webpart host');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.serviceScope, 'webpart service scope');
		        Object_1.deepFreeze(context.manifest);
		        this._context = context;
		        this._logEntry = 'BaseClientSideWebPart';
		    };
		    BaseClientSideWebPart.prototype._throwReadOnlyError = function () {
		        throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.ReadOnlyProperty);
		    };
		    BaseClientSideWebPart.prototype._renderWithAccessibileTitle = function () {
		        this.render();
		        var accessibleContext = this.accessibleTitle || this._getDefaultAccessibleTitle();
		        if (accessibleContext) {
		            var contextualLabelId = "cswpAccessibleLabelContextual_" + this.context.instanceId;
		            var accessibleDiv = this.domElement.querySelector("#" + contextualLabelId);
		            var isNewLabelElement = !accessibleDiv;
		            if (isNewLabelElement) {
		                accessibleDiv = document.createElement('div');
		                accessibleDiv.id = contextualLabelId;
		                accessibleDiv.className = cswp_base_module_scss_1.default.screenReaderOnly;
		            }
		            accessibleDiv.textContent = accessibleContext;
		            if (isNewLabelElement) {
		                this.domElement.appendChild(accessibleDiv);
		            }
		            ClassicPageUtils_1.default.disableAutomaticPostbacks(this.domElement, sp_core_library_1.Environment.type);
		        }
		    };
		    BaseClientSideWebPart.prototype._getDefaultAccessibleTitle = function () {
		        return odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.GenericAccessibleLabelTemplate, this.title);
		    };
		    BaseClientSideWebPart.prototype._startAsyncRenderGuardTimer = function () {
		        var _this = this;
		        this._clearAsyncRenderGuardTimer();
		        this._asyncRenderQosMonitor = new sp_telemetry_1._QosMonitor("WebPartAsyncRender");
		        this._asyncRenderGuardTimer = window.setTimeout(function () {
		            _this._asyncRenderTimeout();
		        }, 25000);
		    };
		    BaseClientSideWebPart.prototype._renderCompleted = function () {
		        if (this._renderPromiseResolver) {
		            this._clearAsyncRenderGuardTimer();
		            this._asyncRenderQosMonitor.writeSuccess({
		                'alias': this.context.manifest.alias,
		                'webPartId': this.context.manifest.id
		            });
		            sp_telemetry_1._TraceLogger.logVerboseData({
		                source: this._logSource,
		                message: odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.CompletedAsyncRender, this.context.webPartTag),
		                serviceScope: this.context.serviceScope
		            });
		            this._resolveAsyncRenderPromise();
		        }
		        else {
		            sp_telemetry_1._TraceLogger.logVerboseData({
		                source: this._logSource,
		                message: odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.CompletedAsyncRender, this.context.webPartTag),
		                serviceScope: this.context.serviceScope
		            });
		        }
		    };
		    BaseClientSideWebPart.prototype._asyncRenderTimeout = function () {
		        if (this._renderPromiseResolver) {
		            var error = SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.RenderCompletedCallNotCalled, this.context.webPartTag);
		            sp_telemetry_1._TraceLogger.logErrorData({
		                source: this._logSource,
		                error: error,
		                serviceScope: this.context.serviceScope
		            });
		            this._asyncRenderQosMonitor.writeUnexpectedFailure('Timeout', error, {
		                'alias': this.context.manifest.alias,
		                'webPartId': this.context.manifest.id,
		                'instanceId': this.instanceId
		            });
		            this._clearAsyncRenderGuardTimer();
		            ClassicPageUtils_1.default.disableAutomaticPostbacks(this.domElement, sp_core_library_1.Environment.type);
		            this._resolveAsyncRenderPromise();
		        }
		    };
		    BaseClientSideWebPart.prototype._clearAsyncRenderGuardTimer = function () {
		        if (this._asyncRenderGuardTimer) {
		            window.clearTimeout(this._asyncRenderGuardTimer);
		            this._asyncRenderGuardTimer = undefined;
		        }
		    };
		    BaseClientSideWebPart.prototype._resolveAsyncRenderPromise = function () {
		        this._renderPromiseResolver();
		        this._renderPromiseResolver = undefined;
		    };
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "propertiesMetadata", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "disableReactivePropertyChanges", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "previewImageUrl", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "accessibleTitle", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "isRenderAsync", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "onInit", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "onDisplayModeChanged", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "onBeforeSerialize", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "onAfterDeserialize", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "getPropertyPaneConfiguration", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "onDispose", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "onPropertyPaneFieldChanged", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "onPropertyPaneConfigurationStart", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "onPropertyPaneConfigurationComplete", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "onAfterPropertyPaneChangesApplied", null);
		    __decorate([
		        decorators_1.virtual
		    ], BaseClientSideWebPart.prototype, "onPropertyPaneRendered", null);
		    return BaseClientSideWebPart;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = BaseClientSideWebPart;
	
	
	/***/ },
	/* 4 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_4__;
	
	/***/ },
	/* 5 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_5__;
	
	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		__webpack_require__(1);
		__export(__webpack_require__(7));
	
	
	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		__export(__webpack_require__(8));
		__export(__webpack_require__(50));
	
	
	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var EventBase_1 = __webpack_require__(9);
		exports.ClonedEventType = EventBase_1.ClonedEventType;
		exports.ValidationErrorType = EventBase_1.ValidationErrorType;
		exports.AccountType = EventBase_1.AccountType;
		exports.EventBase = EventBase_1.EventBase;
		var Engagement_event_1 = __webpack_require__(15);
		exports.Engagement = Engagement_event_1.Engagement;
		var Nav_event_1 = __webpack_require__(17);
		exports.Nav = Nav_event_1.Nav;
		var PLTHttpRequest_event_1 = __webpack_require__(18);
		exports.PLTHttpRequest = PLTHttpRequest_event_1.PLTHttpRequest;
		var Qos_event_1 = __webpack_require__(20);
		exports.Qos = Qos_event_1.Qos;
		var ResultTypeEnum_1 = __webpack_require__(22);
		exports.ResultTypeEnum = ResultTypeEnum_1.ResultTypeEnum;
		var APICallPerformanceData_1 = __webpack_require__(29);
		exports.APICallPerformanceData = APICallPerformanceData_1.default;
		var Beacon_1 = __webpack_require__(36);
		exports.Beacon = Beacon_1.default;
		var BeaconCache_1 = __webpack_require__(41);
		exports.BeaconCache = BeaconCache_1.default;
		var ControlPerformanceData_1 = __webpack_require__(49);
		exports.ControlPerformanceData = ControlPerformanceData_1.default;
		var CorrelationVector_1 = __webpack_require__(13);
		exports.CorrelationVector = CorrelationVector_1.default;
		var ErrorHelper_1 = __webpack_require__(23);
		exports.ErrorHelper = ErrorHelper_1.default;
		var PageTransitionType_1 = __webpack_require__(31);
		exports.PageTransitionType = PageTransitionType_1.default;
		var RUMOneLogger_1 = __webpack_require__(30);
		exports.RumOneLogger = RUMOneLogger_1.default;
		var RUMOneSLAPI_1 = __webpack_require__(32);
		exports.RumOneSLAPI = RUMOneSLAPI_1.default;
	
	
	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:CoverageThreshold(96)
		"use strict";
		var Manager_1 = __webpack_require__(10);
		var CorrelationVector_1 = __webpack_require__(13);
		var _id = 0;
		(function (ClonedEventType) {
		    ClonedEventType[ClonedEventType["Single"] = 0] = "Single";
		    ClonedEventType[ClonedEventType["Start"] = 1] = "Start";
		    ClonedEventType[ClonedEventType["End"] = 2] = "End";
		})(exports.ClonedEventType || (exports.ClonedEventType = {}));
		var ClonedEventType = exports.ClonedEventType;
		(function (ValidationErrorType) {
		    ValidationErrorType[ValidationErrorType["NoParent"] = 1] = "NoParent";
		})(exports.ValidationErrorType || (exports.ValidationErrorType = {}));
		var ValidationErrorType = exports.ValidationErrorType;
		(function (AccountType) {
		    AccountType[AccountType["Consumer"] = 0] = "Consumer";
		    AccountType[AccountType["ConsumerAnonymous"] = 1] = "ConsumerAnonymous";
		    AccountType[AccountType["Business"] = 2] = "Business";
		    AccountType[AccountType["BusinessAnonymous"] = 3] = "BusinessAnonymous";
		    AccountType[AccountType["Unknown"] = 4] = "Unknown";
		})(exports.AccountType || (exports.AccountType = {}));
		var AccountType = exports.AccountType;
		var EventBase = (function () {
		    function EventBase(eventName, shortEventName, parent) {
		        this.eventName = eventName;
		        this.shortEventName = shortEventName;
		        this.validationErrors = 0;
		        this.id = _id++;
		        this.enabled = this.isEnabled();
		        this.critical = this.isCritical();
		        // Set the parent id if needed
		        if (parent) {
		            this.parentId = parent.id;
		        }
		        else if (this.requiresParent()) {
		            this.addValidationError(ValidationErrorType.NoParent);
		        }
		        // Set the start time
		        this.startTime = Manager_1.Manager.getTime();
		        if (parent) {
		            this.vector = new CorrelationVector_1.default(parent.vector);
		        }
		        else {
		            this.vector = new CorrelationVector_1.default(CorrelationVector_1.default.RootVector);
		        }
		    }
		    /**
		     * This will return true if the event is of this type
		     * @param event {IEvent} The event to compare
		     */
		    EventBase.isTypeOf = function (event) {
		        return event.eventName.indexOf(this.shortName + this.eventNameDelimeter) >= 0;
		    };
		    /** This is called on all string data to clean it */
		    EventBase.prototype.cleanString = function (str) {
		        return Manager_1.Manager.cleanString(str);
		    };
		    EventBase.prototype.isEnabled = function () {
		        // All events are enabled by default
		        return true;
		    };
		    EventBase.prototype.requiresParent = function () {
		        // All events require parents by default
		        return true;
		    };
		    EventBase.prototype.isCritical = function () {
		        // All events are not critical by default
		        return false;
		    };
		    EventBase.prototype._logEvent = function (eventType) {
		        Manager_1.Manager.logEvent(this, eventType);
		    };
		    EventBase.prototype.addValidationError = function (type) {
		        this.validationErrors = this.validationErrors | type;
		        Manager_1.Manager.logValidationError(this, type);
		    };
		    EventBase.eventNameDelimeter = ',';
		    EventBase.fullName = 'EventBase,';
		    EventBase.shortName = 'EventBase';
		    return EventBase;
		}());
		exports.EventBase = EventBase;
	
	
	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:CoverageThreshold(75)
		"use strict";
		var ObjectUtil_1 = __webpack_require__(11);
		var handlers = [];
		var buffer = [];
		var maxBufferSize = 100;
		function getStartDate() {
		    'use strict';
		    if (window.performance && window.performance.timing && window.performance.timing.navigationStart) {
		        return new Date(window.performance.timing.navigationStart);
		    }
		    else {
		        return new Date();
		    }
		}
		var startDate = getStartDate();
		var Manager = (function () {
		    function Manager() {
		    }
		    Manager.getTime = function () {
		        return (new Date()).getTime();
		    };
		    /** This is the overrideable clean string function */
		    Manager.cleanString = function (str) {
		        return str;
		    };
		    Manager.addLogHandler = function (handler) {
		        handlers.push(handler);
		        // Return the buffer so the handler can get missed events
		        return buffer;
		    };
		    Manager.removeLogHandler = function (handler) {
		        for (var x = 0; x < handlers.length; x++) {
		            if (handlers[x] === handler) {
		                // Remove the handler
		                handlers.splice(x, 1);
		                break;
		            }
		        }
		    };
		    Manager.logEvent = function (event, eventType) {
		        // Clone the object (do it natively because the browser can mark it as a type)
		        var clonedEvent = Object.freeze({
		            data: ObjectUtil_1.default.deepCopy(event.data),
		            id: event.id,
		            enabled: event.enabled,
		            critical: event.critical,
		            endTime: event.endTime,
		            eventName: event.eventName,
		            shortEventName: event.shortEventName,
		            parentId: event.parentId,
		            startTime: event.startTime,
		            eventType: eventType,
		            metadata: event.metadata,
		            vector: event.vector,
		            validationErrors: event.validationErrors
		        });
		        // Add to the buffer
		        buffer.push(clonedEvent);
		        if (buffer.length > maxBufferSize) {
		            buffer = buffer.slice(1);
		            // Make sure we have a handler before the buffer is overrun
		            if (handlers.length === 0) {
		                this.handleBaseLoggingError(new Error("Logging buffer overflow hit before any logging handler was registered"));
		            }
		        }
		        // Let handlers know the log event has completed
		        for (var x = 0; x < handlers.length; x++) {
		            try {
		                handlers[x](clonedEvent);
		            }
		            catch (e) {
		                this.handleBaseLoggingError(e);
		            }
		        }
		    };
		    Manager.logValidationError = function (event, type) {
		        // Do nothing so that we can intialize around circular reference issue
		    };
		    Manager.getStack = function () {
		        var error;
		        try {
		            var w = window;
		            w["______ExpectedError______"]();
		        }
		        catch (e) {
		            error = e;
		        }
		        return error.stack;
		    };
		    Manager.handleBaseLoggingError = function (error) {
		        // TODO: Log somewhere
		    };
		    Manager.startDate = startDate;
		    Manager.startTime = startDate.getTime();
		    return Manager;
		}());
		exports.Manager = Manager;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Manager;
	
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var UriEncoding_1 = __webpack_require__(12);
		var ObjectUtil;
		(function (ObjectUtil) {
		    "use strict";
		    ObjectUtil.DEFAULT_DELIMITER = '&';
		    ObjectUtil.KEYVALUE_DELIMITER = '=';
		    // Returns a copy of the specified object by deeply cloning all of its properties.
		    function deepCopy(object) {
		        var refsCopied = [];
		        var copyRecurse = function (obj) {
		            var result = null;
		            if (obj) {
		                if (Array.isArray(obj)) {
		                    result = [];
		                }
		                else {
		                    // create clone of the object with same prototype chain
		                    result = Object.create(Object.getPrototypeOf(obj));
		                }
		                // iterate over all the properties in the object
		                Object.keys(obj).forEach(function (key) {
		                    // recursively copy the object's properties if the property is an object
		                    var value = obj[key];
		                    if (typeof value === "object") {
		                        if (refsCopied.indexOf(value) !== -1) {
		                            throw new Error("Cannot perform DeepCopy() because a circular reference was encountered, object: " + String(obj) + ", property: " + String(key));
		                        }
		                        refsCopied.push(value);
		                        result[key] = copyRecurse(value);
		                        refsCopied.pop();
		                    }
		                    else {
		                        result[key] = value;
		                    }
		                });
		            }
		            return result;
		        };
		        return copyRecurse(object);
		    }
		    ObjectUtil.deepCopy = deepCopy;
		    // Deeply compares the objects by recursively comparing all their properties, objects with circular references are not supported, prototype members and functions are ignored
		    function deepCompare(objA, objB, equivalent) {
		        // keep track of references that have been compared to find circular references while walking down either object
		        var refsComparedA = [];
		        var refsComparedB = [];
		        var compare = Boolean(equivalent) ? equivalent : function (a, b) { return (a === b); };
		        var equals = function (a, b) {
		            // try a simple equality test first
		            if (a === b) {
		                return true;
		            }
		            if ((a === null) || (b === null)) {
		                return false;
		            }
		            // if both are objects, then further comparison is required
		            if ((typeof (a) === "object") && (typeof (b) === "object")) {
		                // perform deep comparison over object's properties
		                var aKeys = Object.keys(a).sort();
		                var bKeys_1 = Object.keys(b).sort();
		                // does one object have a different number of properties?
		                if (aKeys.length !== bKeys_1.length) {
		                    return false;
		                }
		                var keysMatch = aKeys.every(function (key, index) {
		                    // key names should match
		                    if (key !== bKeys_1[index]) {
		                        return false;
		                    }
		                    else if (typeof (a[key]) === 'function' || typeof (b[key]) === 'function') {
		                        //skip comparison of function properties
		                        return true;
		                    }
		                    else if (!compare(a[key], b[key])) {
		                        // if this is an Object then recursive testing is needed on its properties
		                        if (typeof a[key] === "object") {
		                            // if this property was encountered before then we're going in circles, give up
		                            if (refsComparedA.indexOf(a[key]) !== -1) {
		                                throw new Error("Cannot perform DeepCompare() because a circular reference was encountered, object: " + String(a) + ", property: " + key);
		                            }
		                            refsComparedA.push(a[key]);
		                            if (refsComparedB.indexOf(b[key]) !== -1) {
		                                throw new Error("Cannot perform DeepCompare() because a circular reference was encountered, object: " + String(b) + ", property: " + key);
		                            }
		                            refsComparedB.push(b[key]);
		                            // recursive compare object's properties
		                            if (!equals(a[key], b[key])) {
		                                return false;
		                            }
		                            refsComparedA.pop();
		                            refsComparedB.pop();
		                            return true;
		                        }
		                        else {
		                            // properties don't match
		                            return false;
		                        }
		                    }
		                    else {
		                        return true;
		                    }
		                });
		                if (!keysMatch) {
		                    return false;
		                }
		            }
		            else {
		                // parameters aren't equal, and at least one is not an Object
		                return false;
		            }
		            // everything is equal
		            return true;
		        };
		        return equals(objA, objB);
		    }
		    ObjectUtil.deepCompare = deepCompare;
		    /**
		     * This is a function you can call to safely serialize anything to JSON.
		     * The built-in JSON.stringify() throws an exception for circular references and can't handle
		     * many built-ins such as HTMLElements and the global window object.
		     */
		    function safeSerialize(obj) {
		        var str;
		        try {
		            var seenObjects_1 = [];
		            str = JSON.stringify(obj, function (key, value) {
		                if (value === window) {
		                    return "[window]";
		                }
		                else if (value instanceof HTMLElement) {
		                    return "[HTMLElement]";
		                }
		                else if (typeof value === "function") {
		                    return "[function]";
		                }
		                else if (typeof value === "object") {
		                    if (value === null) {
		                        return value;
		                    }
		                    else if (seenObjects_1.indexOf(value) === -1) {
		                        seenObjects_1.push(value);
		                        return value;
		                    }
		                    else {
		                        return "[circular]";
		                    }
		                }
		                else {
		                    return value;
		                }
		            });
		        }
		        catch (err) {
		            // Note: we make this be a JSON string, so that consumers
		            // can always call JSON.parse.
		            str = JSON.stringify("[object]");
		        }
		        return str;
		    }
		    ObjectUtil.safeSerialize = safeSerialize;
		    /**
		     * Serializes the object Name Values Pairs (Depth of 1).
		     * Used for Query Strings and Cookie Values
		     * @param {any} obj Object with name value pairs
		     * @param {string} delimeter  Delimiter seperates the pairs
		     * @param {boolean} skipEncoding True to skip encoding
		     */
		    function serialize(obj, delimiter, skipEncoding) {
		        delimiter = delimiter || ObjectUtil.DEFAULT_DELIMITER;
		        var values = Object.keys(obj).map(function (name) {
		            // Get the value and convert it to a string
		            var value = obj[name];
		            value = value ? value.toString() : "";
		            if (!skipEncoding) {
		                value = UriEncoding_1.default.encodeURIComponent(value);
		            }
		            // Add the encoded value to the array
		            return name + ObjectUtil.KEYVALUE_DELIMITER + value;
		        });
		        return values.join(delimiter);
		    }
		    ObjectUtil.serialize = serialize;
		    /**
		     * Copy the values of all enumerable own properties from one or more source objects to a target object.
		     */
		    function extend(target, source) {
		        if (source) {
		            for (var prop in source) {
		                if (source.hasOwnProperty(prop)) {
		                    target[prop] = source[prop];
		                }
		            }
		        }
		        return target;
		    }
		    ObjectUtil.extend = extend;
		})(ObjectUtil || (ObjectUtil = {}));
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = ObjectUtil;
	
	
	/***/ },
	/* 12 */
	/***/ function(module, exports) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var UriEncoding = (function () {
		    function UriEncoding() {
		    }
		    /////////////////////////////
		    // This file is more clean of all unneeded pollutants. It only contains the minimum amount of code required for someone to use the URI class.
		    // You should think twice before adding anything else into this file because you will be causing unneeded bloat from someone else.
		    /////////////////////////////
		    /**
		     * This function performs an aggressive unicode URL-encoding.
		     * Convert non alphanum character into UTF-8 code string in format %XX%XX%XX.
		     *
		     * Escape unsafe characters
		     *   CTL | SP | <"> | "#" | "%" | "<" | ">" | "'" | "&"
		     * in the URL path (before "?", "#")
		     * No encoding on query string.
		     *
		     * @param {string} str - String to encode
		     * @param {boolean} bAsUrl - Encode in the same way as the code in unmanaged (Url::UrlEncode) code and
		     *                           SP OM (SPHttpUtility.UrlKeyValueEncode and SPHttpUtility.UrlPathEncode).
		     * @param {boolean} bForFilterQuery
		     * @param {boolean} bForCallback - Only escape the characters after 0x7F to workaround bug O12: 452191
		     */
		    UriEncoding.encodeURIComponent = function (str, bAsUrl, bForFilterQuery, bForCallback) {
		        var strOut = "";
		        var strByte;
		        var ix = 0;
		        var strEscaped = " \"%<>\'&";
		        if (!str) {
		            return "";
		        }
		        var len = str.length;
		        for (ix = 0; ix < len; ix++) {
		            var charCode = str.charCodeAt(ix);
		            var curChar = str.charAt(ix);
		            if (bAsUrl && (curChar === '#' || curChar === '?')) {
		                strOut += str.substr(ix);
		                break;
		            }
		            if (bForFilterQuery && curChar === '&') {
		                strOut += curChar;
		                continue;
		            }
		            if (charCode <= 0x7f) {
		                if (bForCallback) {
		                    strOut += curChar;
		                }
		                else {
		                    if ((charCode >= 97 && charCode <= 122) ||
		                        (charCode >= 65 && charCode <= 90) ||
		                        (charCode >= 48 && charCode <= 57) ||
		                        (bAsUrl && (charCode >= 32 && charCode <= 95) && strEscaped.indexOf(curChar) < 0)) {
		                        strOut += curChar;
		                    }
		                    else if (charCode <= 0x0f) {
		                        strOut += "%0" + charCode.toString(16).toUpperCase();
		                    }
		                    else if (charCode <= 0x7f) {
		                        strOut += "%" + charCode.toString(16).toUpperCase();
		                    }
		                }
		            }
		            else if (charCode <= 0x07ff) {
		                strByte = 0xc0 | (charCode >> 6);
		                strOut += "%" + strByte.toString(16).toUpperCase();
		                strByte = 0x80 | (charCode & 0x003f);
		                strOut += "%" + strByte.toString(16).toUpperCase();
		            }
		            else if ((charCode & 0xFC00) !== 0xD800) {
		                strByte = 0xe0 | (charCode >> 12);
		                strOut += "%" + strByte.toString(16).toUpperCase();
		                strByte = 0x80 | ((charCode & 0x0fc0) >> 6); // middle 6 bits
		                strOut += "%" + strByte.toString(16).toUpperCase();
		                strByte = 0x80 | (charCode & 0x003f); // lower 6 bits
		                strOut += "%" + strByte.toString(16).toUpperCase();
		            }
		            else if (ix < str.length - 1) {
		                charCode = (charCode & 0x03FF) << 10; // lower 10 bits of first char
		                ix++;
		                var nextCharCode = str.charCodeAt(ix);
		                charCode |= nextCharCode & 0x03FF; // lower 10 bits of second char
		                charCode += 0x10000;
		                strByte = 0xf0 | (charCode >> 18);
		                strOut += "%" + strByte.toString(16).toUpperCase();
		                strByte = 0x80 | ((charCode & 0x3f000) >> 12); // upper 6 bits
		                strOut += "%" + strByte.toString(16).toUpperCase();
		                strByte = 0x80 | ((charCode & 0x0fc0) >> 6); // middle 6 bits
		                strOut += "%" + strByte.toString(16).toUpperCase();
		                strByte = 0x80 | (charCode & 0x003f); // lower 6 bits
		                strOut += "%" + strByte.toString(16).toUpperCase();
		            }
		        }
		        return strOut;
		    };
		    /**
		     * Callbacks do not work if a #bookmark is in the URL. If there is a bookmark then we need to remove it. We also need to
		     * deal with the scenario where there is not a bookmark but there is an unencoded # as a part of a name/value after the '?'.
		     * This is how things should work here:
		     * .../foo.aspx -> .../foo.aspx (unchanged)
		     * .../foo.aspx#bookmark -> .../foo.aspx (bookmark is removed)
		     * .../foo.aspx#bookmark?name=value -> .../foo.aspx?name=value (bookmark is removed)
		     * .../foo.aspx#bookmark?name1=value#extra1&name2=value2 -> .../foo.aspx?name1=value#extra1&name2=value2 (only the bookmark # is removed)
		     * .../foo.aspx?name1=value#extra1&name2=value2 -> .../foo.aspx?name1=value#extra1&name2=value2 (unchanged)
		     */
		    UriEncoding.escapeUrlForCallback = function (str) {
		        var iPound = str.indexOf("#");
		        var iQues = str.indexOf("?");
		        if ((iPound > 0) && ((iQues === -1) || (iPound < iQues))) {
		            var strNew = str.substr(0, iPound);
		            if (iQues > 0) {
		                strNew += str.substr(iQues); // Need to include the '?' along with the "name=value" pairs.
		            }
		            str = strNew;
		        }
		        return UriEncoding.encodeURIComponent(str, true, false, true);
		    };
		    /**
		     * SharePoint REST processor expect single quote ' to be escaped to '' in tokens (this applies to %27 too).
		     * See example for usage.
		     * @example
		     * "getFolderByServerRelativeUrl('"+encodeRestUriStringToken("don't know.txt")+"')" should became "getFolderByServerRelativeUrl('don''t know.txt')""
		     */
		    UriEncoding.encodeRestUriStringToken = function (stringToken) {
		        if (stringToken) {
		            stringToken = stringToken.replace(/'/g, "''");
		            stringToken = stringToken.replace(/%27/g, "%27%27");
		            stringToken = UriEncoding.encodeURIComponent(stringToken);
		        }
		        return stringToken;
		    };
		    return UriEncoding;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = UriEncoding;
	
	
	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var Guid_1 = __webpack_require__(14);
		var CorrelationVector = (function () {
		    function CorrelationVector(parent, current) {
		        if (parent) {
		            this.root = parent.root;
		            this.parent = parent.current;
		        }
		        else {
		            this.root = this.parent = Guid_1.default.Empty;
		        }
		        if (current) {
		            this.current = current;
		        }
		        else {
		            this.current = Guid_1.default.generate();
		        }
		    }
		    CorrelationVector.prototype.toString = function () {
		        return this.root + "#" + this.parent + "#" + this.current;
		    };
		    CorrelationVector.RootVector = window['rootVector'] || new CorrelationVector();
		    return CorrelationVector;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = CorrelationVector;
	
	
	/***/ },
	/* 14 */
	/***/ function(module, exports) {
	
		"use strict";
		function generateUuidPart(length) {
		    "use strict";
		    var str = '';
		    while (str.length < length) {
		        var num = Math.random() * 16;
		        num = num | 0; // clear decimal
		        str += num.toString(16);
		    }
		    return str;
		}
		var Guid = (function () {
		    function Guid() {
		    }
		    /**
		     * Return a v4 UUID as specified by RFC 4122 http://tools.ietf.org/html/rfc4122
		     */
		    Guid.generate = function () {
		        var parts = [];
		        parts.push(generateUuidPart(8));
		        parts.push(generateUuidPart(4));
		        // first digit must be 4 since we are using pseudorandom numbers
		        var timeHighAndVersion = '4' + generateUuidPart(3);
		        parts.push(timeHighAndVersion);
		        // first digit must have first two bits set to 10
		        var clockSeqHiAndReserved = generateUuidPart(4);
		        var intVal = parseInt(clockSeqHiAndReserved[0], 10);
		        intVal = intVal & 3; // clear out first two bits
		        intVal = intVal | 8; // set first bit to 1
		        clockSeqHiAndReserved = intVal.toString(16) + clockSeqHiAndReserved.substr(1);
		        parts.push(clockSeqHiAndReserved);
		        parts.push(generateUuidPart(12));
		        return parts.join('-');
		    };
		    /**
		     * Normalizes a GUID to lowercase. Returns '' if guid is not given.
		     * @param includeBrackets - if true, add or keep brackets; if false, strip brackets
		     */
		    Guid.normalizeLower = function (guid, includeBrackets) {
		        return guid ? Guid._normalizeBrackets(guid.toLowerCase(), includeBrackets) : '';
		    };
		    /**
		     * Normalizes a GUID to uppercase. Returns '' if guid is not given.
		     * @param includeBrackets - if true, add or keep brackets; if false, strip brackets
		     */
		    Guid.normalizeUpper = function (guid, includeBrackets) {
		        return guid ? Guid._normalizeBrackets(guid.toUpperCase(), includeBrackets) : '';
		    };
		    Guid._normalizeBrackets = function (guid, includeBrackets) {
		        var match = guid.match(/^\{(.*)\}$/);
		        if (match) {
		            return includeBrackets ? match[0] : match[1];
		        }
		        return includeBrackets ? '{' + guid + '}' : guid;
		    };
		    Guid.Empty = "00000000-0000-0000-0000-000000000000";
		    return Guid;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Guid;
	
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var SingleEventBase_1 = __webpack_require__(16);
		var Engagement = (function (_super) {
		    __extends(Engagement, _super);
		    /**
		     * The Engagement event constructor
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function Engagement(parent) {
		        _super.call(this, 'Engagement,', 'Engagement', parent);
		    }
		    /**
		     * This is true if the Engagement event is enabled
		     */
		    Engagement.enabled = function () {
		        return true;
		    };
		    /**
		     * This will create a single Engagement event
		     * @param data {IEngagementSingleSchema}
		     * -required name - This is the name of the engagement event
		     * -optional isIntentional - This indicates whether it is an intentional action by the user
		     * -optional scenario - This is the name of the scenario
		     * -optional location - This is the location from where the event took place
		     * -optional usageType - This is what tells if it were a click, tap or a keyboard event
		     * -optional currentPage - Page where the event took place
		     * -optional previousPage - Previous Page
		     * -optional experiment - ABExperiment object used by experiments
		     * -optional extraData - This is the random extra data for the engagement event
		     * @param parent {IEvent} The optional parent for this event
		     */
		    Engagement.logData = function (data, parent) {
		        return SingleEventBase_1.SingleEventBase._logData(Engagement, data, parent);
		    };
		    Engagement.prototype.setSingleData = function (data) {
		        this.data.name = this.cleanString(data.name);
		        if (typeof data.isIntentional !== "undefined") {
		            this.data.isIntentional = data.isIntentional;
		        }
		        if (typeof data.scenario !== "undefined") {
		            this.data.scenario = this.cleanString(data.scenario);
		        }
		        if (typeof data.location !== "undefined") {
		            this.data.location = this.cleanString(data.location);
		        }
		        if (typeof data.usageType !== "undefined") {
		            this.data.usageType = this.cleanString(data.usageType);
		        }
		        if (typeof data.currentPage !== "undefined") {
		            this.data.currentPage = this.cleanString(data.currentPage);
		        }
		        if (typeof data.previousPage !== "undefined") {
		            this.data.previousPage = this.cleanString(data.previousPage);
		        }
		        if (typeof data.experiment !== "undefined") {
		            this.data.experiment = data.experiment;
		        }
		        if (typeof data.extraData !== "undefined") {
		            this.data.extraData = data.extraData;
		        }
		    };
		    /**
		     * The name of the Engagement event
		     */
		    Engagement.fullName = 'Engagement,';
		    /**
		     * The short name of the Engagement event
		     */
		    Engagement.shortName = 'Engagement';
		    /**
		     * This is true if the Engagement event is enabled
		     */
		    Engagement.metadata = {
		        name: {
		            type: "String",
		            definedInName: "Engagement",
		            definedInFullName: "Engagement,",
		            isKey: true,
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        isIntentional: {
		            type: "Boolean",
		            definedInName: "Engagement",
		            definedInFullName: "Engagement,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        scenario: {
		            type: "String",
		            definedInName: "Engagement",
		            definedInFullName: "Engagement,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        location: {
		            type: "String",
		            definedInName: "Engagement",
		            definedInFullName: "Engagement,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        usageType: {
		            type: "String",
		            definedInName: "Engagement",
		            definedInFullName: "Engagement,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        currentPage: {
		            type: "String",
		            definedInName: "Engagement",
		            definedInFullName: "Engagement,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        previousPage: {
		            type: "String",
		            definedInName: "Engagement",
		            definedInFullName: "Engagement,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        experiment: {
		            type: "Object",
		            definedInName: "Engagement",
		            definedInFullName: "Engagement,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        extraData: {
		            type: "Object",
		            definedInName: "Engagement",
		            definedInFullName: "Engagement,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        }
		    };
		    return Engagement;
		}(SingleEventBase_1.SingleEventBase));
		exports.Engagement = Engagement;
		Engagement.prototype.metadata = Engagement.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Engagement;
	
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:CoverageThreshold(80)
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var EventBase_1 = __webpack_require__(9);
		var callingFromInside = false;
		var SingleEventBase = (function (_super) {
		    __extends(SingleEventBase, _super);
		    function SingleEventBase(eventName, shortEventName, parent) {
		        if (!callingFromInside) {
		            throw "Use logData method for single events";
		        }
		        _super.call(this, eventName, shortEventName, parent);
		        // Make sure data has a value
		        if (!this.data) {
		            this.data = {};
		        }
		    }
		    SingleEventBase._logData = function (eventConstructor, data, parent) {
		        callingFromInside = true;
		        try {
		            var event = new eventConstructor(parent);
		            event.setSingleData(data);
		            event._logEvent(EventBase_1.ClonedEventType.Single);
		        }
		        finally {
		            callingFromInside = false;
		        }
		        return event;
		    };
		    SingleEventBase.prototype.setSingleData = function (data) {
		        // The single event to copy data that will be overridden
		    };
		    SingleEventBase.fullName = 'SingleEventBase,';
		    SingleEventBase.shortName = 'SingleEventBase';
		    return SingleEventBase;
		}(EventBase_1.EventBase));
		exports.SingleEventBase = SingleEventBase;
	
	
	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var SingleEventBase_1 = __webpack_require__(16);
		var Nav = (function (_super) {
		    __extends(Nav, _super);
		    /**
		     * The Nav event constructor
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function Nav(parent) {
		        _super.call(this, 'Nav,', 'Nav', parent);
		    }
		    /**
		     * This is true if the Nav event is enabled
		     */
		    Nav.enabled = function () {
		        return true;
		    };
		    /**
		     * This will create a single Nav event
		     * @param data {INavSingleSchema}
		     * -required viewParams - The view params associated with the navigation
		     * -optional url - The url associated with the navigation. This is not sanitized (i.e. could contain authkeys)
		     * @param parent {IEvent} The optional parent for this event
		     */
		    Nav.logData = function (data, parent) {
		        return SingleEventBase_1.SingleEventBase._logData(Nav, data, parent);
		    };
		    Nav.prototype.setSingleData = function (data) {
		        this.data.viewParams = data.viewParams;
		        if (typeof data.url !== "undefined") {
		            this.data.url = this.cleanString(data.url);
		        }
		    };
		    /**
		     * The name of the Nav event
		     */
		    Nav.fullName = 'Nav,';
		    /**
		     * The short name of the Nav event
		     */
		    Nav.shortName = 'Nav';
		    /**
		     * This is true if the Nav event is enabled
		     */
		    Nav.metadata = {
		        viewParams: {
		            type: "Object",
		            definedInName: "Nav",
		            definedInFullName: "Nav,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        url: {
		            type: "String",
		            definedInName: "Nav",
		            definedInFullName: "Nav,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        }
		    };
		    return Nav;
		}(SingleEventBase_1.SingleEventBase));
		exports.Nav = Nav;
		Nav.prototype.metadata = Nav.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Nav;
	
	
	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var SingleEventBase_1 = __webpack_require__(16);
		var Features_1 = __webpack_require__(19);
		var PLTHttpRequest = (function (_super) {
		    __extends(PLTHttpRequest, _super);
		    /**
		     * The PLTHttpRequest event constructor
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function PLTHttpRequest(parent) {
		        _super.call(this, 'PLTHttpRequest,', 'PLTHttpRequest', parent);
		    }
		    /**
		     * This is true if the PLTHttpRequest event is enabled
		     */
		    PLTHttpRequest.enabled = function () {
		        return Features_1.default.isFeatureEnabled(PLTHttpRequest.samplingFeature);
		    };
		    /**
		     * This will create a single PLTHttpRequest event
		     * @param data {IPLTHttpRequestSingleSchema}
		     * -required startTime - The start time of the request
		     * -required url - The url for the request
		     * -required duration - Time it takes for the request to complete
		     * @param parent {IEvent} The optional parent for this event
		     */
		    PLTHttpRequest.logData = function (data, parent) {
		        return SingleEventBase_1.SingleEventBase._logData(PLTHttpRequest, data, parent);
		    };
		    /**
		     * This is true when PLTHttpRequest event is enabled
		     */
		    PLTHttpRequest.prototype.isEnabled = function () {
		        return Features_1.default.isFeatureEnabled(PLTHttpRequest.samplingFeature);
		    };
		    PLTHttpRequest.prototype.setSingleData = function (data) {
		        this.data.startTime = data.startTime;
		        this.data.url = this.cleanString(data.url);
		        this.data.duration = data.duration;
		    };
		    /**
		     * The name of the PLTHttpRequest event
		     */
		    PLTHttpRequest.fullName = 'PLTHttpRequest,';
		    /**
		     * The short name of the PLTHttpRequest event
		     */
		    PLTHttpRequest.shortName = 'PLTHttpRequest';
		    /**
		     * This is true if the PLTHttpRequest event is enabled
		     */
		    PLTHttpRequest.metadata = {
		        startTime: {
		            type: "Number",
		            definedInName: "PLTHttpRequest",
		            definedInFullName: "PLTHttpRequest,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        url: {
		            type: "String",
		            definedInName: "PLTHttpRequest",
		            definedInFullName: "PLTHttpRequest,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        duration: {
		            type: "Number",
		            definedInName: "PLTHttpRequest",
		            definedInFullName: "PLTHttpRequest,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        }
		    };
		    /**
		     * The sampling feature for the PLTHttpRequest event
		     */
		    PLTHttpRequest.samplingFeature = { ODB: true, ODC: 'PLTHttpRequestSampling', Fallback: false };
		    return PLTHttpRequest;
		}(SingleEventBase_1.SingleEventBase));
		exports.PLTHttpRequest = PLTHttpRequest;
		PLTHttpRequest.prototype.metadata = PLTHttpRequest.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = PLTHttpRequest;
	
	
	/***/ },
	/* 19 */
	/***/ function(module, exports) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		/**
		 * This file contains the known list of features (a.k.a. flights or ramps).
		 * The signature of one entry is:
		 *  static FeatureName: IFlight = { ODB: 100, ODC: "foo", Fallback: true };
		 * ODB            Is the numerical value of the flight from the ExpFeature enumeration.
		 *                Use -1 if the flight does not have a correspondent in ODB.
		 * ODC            Is the string identifier in ODC.
		 *                Use null if the flight does not have a correspondent ramp in ODC.
		 * Fallback       The state of the flight, true = on false = off.
		 *                The fallback is used only when the ODB or ODC flight is not applicable.
		 *                For example: The Flight is an ODB flight with no ODC counterpart and the app runs in ODC mode.
		 *                The fallback also allows declaring app only switches that are not known to the backend.
		 */
		var Features = (function () {
		    function Features() {
		    }
		    //You should not add features here but in your own file
		    /**
		     * This function will return true when the feature is enabled and
		     * will check the proper config for ODB and ODC to determine this
		     */
		    Features.isFeatureEnabled = function (feature) {
		        var result = feature.Fallback;
		        var _spPageContextInfo = window['_spPageContextInfo'];
		        var _odcFlightInfo = window['Flight'];
		        var _odcConfig = window['FilesConfig'];
		        var Flighting = window['Flighting']; // Old SharePoint pages use this.
		        if (Boolean(_spPageContextInfo)) {
		            if (!Boolean(_spPageContextInfo.ExpFeatures) &&
		                Boolean(Flighting) && Boolean(Flighting.ExpFeatures)) {
		                _spPageContextInfo.ExpFeatures = Flighting.ExpFeatures;
		            }
		            if (typeof feature.ODB === 'boolean') {
		                result = feature.ODB;
		            }
		            else if (Boolean(_spPageContextInfo.ExpFeatures) && feature.ODB > 0) {
		                var elem = Math.floor(feature.ODB / 32);
		                var mask = 1 << (feature.ODB % 32);
		                result = (elem < _spPageContextInfo.ExpFeatures.length) &&
		                    (_spPageContextInfo.ExpFeatures[elem] & mask) !== 0;
		            }
		        }
		        if (feature.ODC !== null && !!_odcConfig) {
		            if (typeof feature.ODC === 'boolean') {
		                result = feature.ODC;
		            }
		            else if (_odcFlightInfo && _odcFlightInfo.Ramps && _odcFlightInfo.Ramps[feature.ODC]) {
		                result = true;
		            }
		            else if (_odcConfig && _odcConfig[feature.ODC]) {
		                result = true;
		            }
		        }
		        return result;
		    };
		    /* This feature is always on */
		    Features.On = { ODB: -1, ODC: null, Fallback: true };
		    /* This feature is always off */
		    Features.Off = { ODB: -1, ODC: null, Fallback: false };
		    return Features;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Features;
	
	
	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var PairedEventBase_1 = __webpack_require__(21);
		var ResultTypeEnum_1 = __webpack_require__(22);
		var ResultTypeEnum_2 = __webpack_require__(22);
		exports.ResultTypeEnum = ResultTypeEnum_2.ResultTypeEnum;
		var Qos = (function (_super) {
		    __extends(Qos, _super);
		    /**
		     * The Qos event constructor
		     * @param data {IQosStartSchema}
		     * -required name - This is the name of the qos event
		     * -optional resultCode - This is result code for the qos event
		     * -optional resultType - This is the result type enum
		     * -optional error - This is the error message to be logged with failed result
		     * -optional extraData - This is the random extra data for the qos event
		     * -optional extraMetrics - Extra data for the qos event that should be logged as aggregatable metrics
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function Qos(data, parent) {
		        _super.call(this, 'Qos,', 'Qos', data, parent);
		    }
		    /**
		     * This is true if the Qos event is enabled
		     */
		    Qos.enabled = function () {
		        return true;
		    };
		    Qos.instrumentPromise = function (startSchema, createPromise, getCompleteSchema, getErrorSchema, timeoutMs, timeoutSchema, parent) {
		        return PairedEventBase_1.PairedEventBase._instrumentPromise(Qos, startSchema, createPromise, getCompleteSchema, getErrorSchema, timeoutMs, timeoutSchema, parent);
		    };
		    /**
		     * This will end the Qos event
		     * @param data {IQosEndSchema}
		     * -optional resultCode - This is result code for the qos event
		     * -required resultType - This is the result type enum
		     * -optional error - This is the error message to be logged with failed result
		     * -optional extraData - This is the random extra data for the qos event
		     * -optional extraMetrics - Extra data for the qos event that should be logged as aggregatable metrics
		     */
		    Qos.prototype.end = function (data) {
		        return this._end(data);
		    };
		    /**
		     * This writes verbose logs to memory to be uploaded if event ends with failure
		     */
		    Qos.prototype.verbose = function (message) {
		        return this._verbose(message);
		    };
		    /**
		     * Sets a time limit for the scenario. A timeout result will be logged if no end happens in desired timeframe
		     */
		    Qos.prototype.setTimeout = function (ms, data) {
		        return this._setTimeout(ms, data);
		    };
		    Qos.prototype.setStartData = function (data) {
		        this.data.name = this.cleanString(data.name);
		        if (typeof data.resultCode !== "undefined") {
		            this.data.resultCode = this.cleanString(data.resultCode);
		        }
		        if (typeof data.resultType !== "undefined") {
		            this.data.resultType = data.resultType;
		        }
		        if (typeof data.error !== "undefined") {
		            this.data.error = this.cleanString(data.error);
		        }
		        if (typeof data.extraData !== "undefined") {
		            this.data.extraData = data.extraData;
		        }
		        if (typeof data.extraMetrics !== "undefined") {
		            this.data.extraMetrics = data.extraMetrics;
		        }
		    };
		    Qos.prototype.setEndData = function (data) {
		        if (typeof data.resultCode !== "undefined") {
		            this.data.resultCode = this.cleanString(data.resultCode);
		        }
		        this.data.resultType = data.resultType;
		        if (typeof data.error !== "undefined") {
		            this.data.error = this.cleanString(data.error);
		        }
		        if (typeof data.extraData !== "undefined") {
		            this.data.extraData = data.extraData;
		        }
		        if (typeof data.extraMetrics !== "undefined") {
		            this.data.extraMetrics = data.extraMetrics;
		        }
		    };
		    /**
		     * The name of the Qos event
		     */
		    Qos.fullName = 'Qos,';
		    /**
		     * The short name of the Qos event
		     */
		    Qos.shortName = 'Qos';
		    /**
		     * This is true if the Qos event is enabled
		     */
		    Qos.metadata = {
		        name: {
		            type: "String",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            isKey: true,
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        resultCode: {
		            type: "String",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        resultType: {
		            type: "ResultTypeEnum",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            baseType: "Enum",
		            typeRef: ResultTypeEnum_1.ResultTypeEnum,
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        error: {
		            type: "String",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        extraData: {
		            type: "Object",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        extraMetrics: {
		            type: "Object",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        }
		    };
		    return Qos;
		}(PairedEventBase_1.PairedEventBase));
		exports.Qos = Qos;
		Qos.prototype.metadata = Qos.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Qos;
	
	
	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:CoverageThreshold(75)
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var EventBase_1 = __webpack_require__(9);
		var Manager_1 = __webpack_require__(10);
		var ResultTypeEnum_1 = __webpack_require__(22);
		var ErrorHelper_1 = __webpack_require__(23);
		var Async_1 = __webpack_require__(28);
		var ObjectUtil_1 = __webpack_require__(11);
		var PairedEventBase = (function (_super) {
		    __extends(PairedEventBase, _super);
		    function PairedEventBase(eventName, shortEventName, data, parent) {
		        _super.call(this, eventName, shortEventName, parent);
		        // Make sure data has a value
		        if (!this.data) {
		            this.data = {};
		        }
		        // Set the data if we have it
		        if (data) {
		            this.setStartData(data);
		        }
		        // Send the start event
		        this._logEvent(EventBase_1.ClonedEventType.Start);
		    }
		    PairedEventBase._instrumentPromise = function (eventConstructor, startSchema, createPromise, getCompleteSchema, getErrorSchema, timeoutMs, timeoutSchema, parent) {
		        var _this = this;
		        var _promise;
		        var _event = new eventConstructor(startSchema, parent);
		        if (timeoutMs) {
		            _event._setTimeout(timeoutMs, timeoutSchema);
		        }
		        var _onComplete = function (result) {
		            var schema;
		            if (getCompleteSchema) {
		                try {
		                    schema = getCompleteSchema(result);
		                }
		                catch (e) {
		                    schema = _event._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, _this.schemaExceptionErrorCode, e.toString());
		                }
		            }
		            else {
		                schema = _event._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Success);
		            }
		            _event._end(schema);
		        };
		        var _onError = function (errorArgs) {
		            var schema;
		            if (getErrorSchema) {
		                try {
		                    schema = getErrorSchema(errorArgs);
		                }
		                catch (e) {
		                    schema = _event._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, _this.schemaExceptionErrorCode, e.toString());
		                }
		            }
		            else {
		                if (errorArgs) {
		                    var failureResultType = (errorArgs instanceof Error && errorArgs.name === "Canceled") ?
		                        ResultTypeEnum_1.ResultTypeEnum.ExpectedFailure : ResultTypeEnum_1.ResultTypeEnum.Failure;
		                    schema = _event._generateQosResult(failureResultType, null, ObjectUtil_1.default.safeSerialize(errorArgs));
		                }
		                else {
		                    schema = _event._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure);
		                }
		            }
		            _event._end(schema);
		        };
		        try {
		            _promise = createPromise();
		        }
		        catch (e) {
		            _event._end(_event._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, this.promiseCreationFailureErrorCode, e.toString()));
		            throw e;
		        }
		        _promise.then(_onComplete, _onError);
		        return _promise;
		    };
		    PairedEventBase.prototype.setStartData = function (data) {
		        // The start event to copy data that will be overridden
		    };
		    PairedEventBase.prototype.setEndData = function (data) {
		        // The end event to copy data that will be overridden
		    };
		    PairedEventBase.prototype._setTimeout = function (ms, data) {
		        if (!this.async) {
		            this.async = new Async_1.default(this);
		        }
		        this._clearTimeout();
		        if (!data) {
		            data = this._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, PairedEventBase.timeoutErrorCode);
		        }
		        this.async.setTimeout(this._end.bind(this, data), ms);
		    };
		    PairedEventBase.prototype._verbose = function (message) {
		        if (this.endTime) {
		            // event already ended, no need to log anymore
		            return;
		        }
		        if (this._isQosEvent) {
		            var qosSchema = this.data;
		            ErrorHelper_1.default.verbose(message, qosSchema.name);
		        }
		    };
		    PairedEventBase.prototype._end = function (data) {
		        // Make sure end can only be called once
		        if (!this.endTime) {
		            if (data) {
		                this.setEndData(data);
		            }
		            // Set the end time
		            this.endTime = Manager_1.Manager.getTime();
		            // Log the event end
		            this._logEvent(EventBase_1.ClonedEventType.End);
		            // If this is a QOS event log and contains an error message trigger the upload of logs by calling
		            // the ErrorHelper
		            if (this._isQosEvent) {
		                var qosSchema = this.data;
		                if (qosSchema.error) {
		                    ErrorHelper_1.default.log(qosSchema.error, qosSchema.name, qosSchema.resultCode, qosSchema.resultType);
		                }
		            }
		            this._clearTimeout();
		        }
		    };
		    PairedEventBase.prototype._clearTimeout = function () {
		        if (this.async && this.timeoutId) {
		            this.async.clearTimeout(this.timeoutId);
		            this.timeoutId = null;
		        }
		    };
		    Object.defineProperty(PairedEventBase.prototype, "_isQosEvent", {
		        get: function () {
		            return this.eventName.indexOf('Qos,') >= 0;
		        },
		        enumerable: true,
		        configurable: true
		    });
		    PairedEventBase.prototype._generateQosResult = function (resultType, resultCode, error) {
		        var schema = {
		            resultType: resultType
		        };
		        if (resultCode) {
		            schema.resultCode = resultCode;
		        }
		        if (error) {
		            schema.error = error;
		        }
		        return schema;
		    };
		    PairedEventBase.fullName = 'PairedEventBase,';
		    PairedEventBase.shortName = 'PairedEventBase';
		    PairedEventBase.schemaExceptionErrorCode = 'GetSchemaException';
		    PairedEventBase.promiseCreationFailureErrorCode = 'PromiseCreationFailed';
		    PairedEventBase.timeoutErrorCode = 'Timeout';
		    return PairedEventBase;
		}(EventBase_1.EventBase));
		exports.PairedEventBase = PairedEventBase;
	
	
	/***/ },
	/* 22 */
	/***/ function(module, exports) {
	
		"use strict";
		(function (ResultTypeEnum) {
		    ResultTypeEnum[ResultTypeEnum["Success"] = 0] = "Success";
		    ResultTypeEnum[ResultTypeEnum["Failure"] = 1] = "Failure";
		    ResultTypeEnum[ResultTypeEnum["ExpectedFailure"] = 2] = "ExpectedFailure";
		})(exports.ResultTypeEnum || (exports.ResultTypeEnum = {}));
		var ResultTypeEnum = exports.ResultTypeEnum;
	
	
	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var CaughtError_event_1 = __webpack_require__(24);
		var QosError_event_1 = __webpack_require__(25);
		var Verbose_event_1 = __webpack_require__(26);
		var CircularBuffer_1 = __webpack_require__(27);
		var ObjectUtil_1 = __webpack_require__(11);
		var MAX_VERBOSE_LOGS = 50;
		var ErrorHelper = (function () {
		    function ErrorHelper() {
		    }
		    ErrorHelper.verbose = function (message, eventName) {
		        ErrorHelper._verboseLogs.push({
		            name: eventName,
		            message: message
		        });
		    };
		    ErrorHelper.logError = function (error, extraData, qosData) {
		        if (!error || error._handled) {
		            return;
		        }
		        var message = this.getErrorMessage(error);
		        var stack = error && error.stack ? error.stack : "";
		        var schema;
		        while (Boolean(schema = ErrorHelper._verboseLogs.popOldest())) {
		            Verbose_event_1.Verbose.logData(schema);
		        }
		        if (qosData && qosData.eventName) {
		            QosError_event_1.QosError.logData({
		                name: qosData.eventName,
		                resultCode: qosData.resultCode,
		                resultType: qosData.resultType,
		                extraData: extraData || undefined,
		                message: message,
		                stack: stack
		            });
		        }
		        else {
		            CaughtError_event_1.CaughtError.logData({
		                extraData: extraData || undefined,
		                message: message,
		                stack: stack
		            });
		        }
		    };
		    ErrorHelper.log = function (error, eventName, resultCode, resultType) {
		        this.logError(error, null, { eventName: eventName, resultCode: resultCode, resultType: resultType });
		    };
		    /**
		     * Extract the error message from the error
		     */
		    ErrorHelper.getErrorMessage = function (error) {
		        var message = '';
		        if (error) {
		            if (error.message) {
		                message = error.message;
		            }
		            else if (error.description) {
		                message = error.description;
		            }
		            else if (typeof (error) === 'object') {
		                message = ObjectUtil_1.default.safeSerialize(error);
		            }
		            else if (error.toString) {
		                message = error.toString();
		            }
		        }
		        return message;
		    };
		    ErrorHelper._verboseLogs = new CircularBuffer_1.default(MAX_VERBOSE_LOGS);
		    return ErrorHelper;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = ErrorHelper;
	
	
	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var SingleEventBase_1 = __webpack_require__(16);
		var CaughtError = (function (_super) {
		    __extends(CaughtError, _super);
		    /**
		     * The CaughtError event constructor
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function CaughtError(parent) {
		        _super.call(this, 'CaughtError,', 'CaughtError', parent);
		    }
		    /**
		     * This is true if the CaughtError event is enabled
		     */
		    CaughtError.enabled = function () {
		        return true;
		    };
		    /**
		     * This will create a single CaughtError event
		     * @param data {ICaughtErrorSingleSchema}
		     * -required message - This is the error message returned during the window.onerror handler
		     * -required stack - This is the stack trace of the error returned during the window.onerror handler
		     * -optional extraData - This is the random extra data for the error event
		     * @param parent {IEvent} The optional parent for this event
		     */
		    CaughtError.logData = function (data, parent) {
		        return SingleEventBase_1.SingleEventBase._logData(CaughtError, data, parent);
		    };
		    /**
		     * This is false when CaughtError event does not require a parent event
		     */
		    CaughtError.prototype.requiresParent = function () {
		        return false;
		    };
		    /**
		     * This is true when CaughtError event is a critical event
		     */
		    CaughtError.prototype.isCritical = function () {
		        return true;
		    };
		    CaughtError.prototype.setSingleData = function (data) {
		        this.data.message = this.cleanString(data.message);
		        this.data.stack = this.cleanString(data.stack);
		        if (typeof data.extraData !== "undefined") {
		            this.data.extraData = data.extraData;
		        }
		    };
		    /**
		     * The name of the CaughtError event
		     */
		    CaughtError.fullName = 'CaughtError,';
		    /**
		     * The short name of the CaughtError event
		     */
		    CaughtError.shortName = 'CaughtError';
		    /**
		     * This is true if the CaughtError event is enabled
		     */
		    CaughtError.metadata = {
		        message: {
		            type: "String",
		            definedInName: "CaughtError",
		            definedInFullName: "CaughtError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        stack: {
		            type: "String",
		            definedInName: "CaughtError",
		            definedInFullName: "CaughtError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        unMinStack: {
		            type: "Object",
		            definedInName: "CaughtError",
		            definedInFullName: "CaughtError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        extraData: {
		            type: "Object",
		            definedInName: "CaughtError",
		            definedInFullName: "CaughtError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        }
		    };
		    return CaughtError;
		}(SingleEventBase_1.SingleEventBase));
		exports.CaughtError = CaughtError;
		CaughtError.prototype.metadata = CaughtError.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = CaughtError;
	
	
	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var SingleEventBase_1 = __webpack_require__(16);
		var ResultTypeEnum_1 = __webpack_require__(22);
		var ResultTypeEnum_2 = __webpack_require__(22);
		exports.ResultTypeEnum = ResultTypeEnum_2.ResultTypeEnum;
		var QosError = (function (_super) {
		    __extends(QosError, _super);
		    /**
		     * The QosError event constructor
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function QosError(parent) {
		        _super.call(this, 'QosError,CaughtError,', 'QosError', parent);
		    }
		    /**
		     * This is true if the QosError event is enabled
		     */
		    QosError.enabled = function () {
		        return true;
		    };
		    /**
		     * This will create a single QosError event
		     * @param data {IQosErrorSingleSchema}
		     * -required name - Qos event name
		     * -optional resultCode - Qos event result code
		     * -optional resultType - This is the result type enum
		     * -required message - This is the error message returned during the window.onerror handler
		     * -required stack - This is the stack trace of the error returned during the window.onerror handler
		     * -optional extraData - This is the random extra data for the error event
		     * @param parent {IEvent} The optional parent for this event
		     */
		    QosError.logData = function (data, parent) {
		        return SingleEventBase_1.SingleEventBase._logData(QosError, data, parent);
		    };
		    /**
		     * This is true when QosError event is a critical event
		     */
		    QosError.prototype.isCritical = function () {
		        return true;
		    };
		    QosError.prototype.setSingleData = function (data) {
		        this.data.name = this.cleanString(data.name);
		        if (typeof data.resultCode !== "undefined") {
		            this.data.resultCode = this.cleanString(data.resultCode);
		        }
		        if (typeof data.resultType !== "undefined") {
		            this.data.resultType = data.resultType;
		        }
		        this.data.message = this.cleanString(data.message);
		        this.data.stack = this.cleanString(data.stack);
		        if (typeof data.extraData !== "undefined") {
		            this.data.extraData = data.extraData;
		        }
		    };
		    /**
		     * The name of the QosError event
		     */
		    QosError.fullName = 'QosError,CaughtError,';
		    /**
		     * The short name of the QosError event
		     */
		    QosError.shortName = 'QosError';
		    /**
		     * This is true if the QosError event is enabled
		     */
		    QosError.metadata = {
		        name: {
		            type: "String",
		            definedInName: "QosError",
		            definedInFullName: "QosError,",
		            isKey: true,
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        resultCode: {
		            type: "String",
		            definedInName: "QosError",
		            definedInFullName: "QosError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        resultType: {
		            type: "ResultTypeEnum",
		            definedInName: "QosError",
		            definedInFullName: "QosError,",
		            baseType: "Enum",
		            typeRef: ResultTypeEnum_1.ResultTypeEnum,
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        message: {
		            type: "String",
		            definedInName: "CaughtError",
		            definedInFullName: "CaughtError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        stack: {
		            type: "String",
		            definedInName: "CaughtError",
		            definedInFullName: "CaughtError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        unMinStack: {
		            type: "Object",
		            definedInName: "CaughtError",
		            definedInFullName: "CaughtError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        extraData: {
		            type: "Object",
		            definedInName: "CaughtError",
		            definedInFullName: "CaughtError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        }
		    };
		    return QosError;
		}(SingleEventBase_1.SingleEventBase));
		exports.QosError = QosError;
		QosError.prototype.metadata = QosError.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = QosError;
	
	
	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var SingleEventBase_1 = __webpack_require__(16);
		var Verbose = (function (_super) {
		    __extends(Verbose, _super);
		    /**
		     * The Verbose event constructor
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function Verbose(parent) {
		        _super.call(this, 'Verbose,', 'Verbose', parent);
		    }
		    /**
		     * This is true if the Verbose event is enabled
		     */
		    Verbose.enabled = function () {
		        return true;
		    };
		    /**
		     * This will create a single Verbose event
		     * @param data {IVerboseSingleSchema}
		     * -optional name - This is the name of the qos event this verbose log correlates with
		     * -required message - This is the verbose message
		     * @param parent {IEvent} The optional parent for this event
		     */
		    Verbose.logData = function (data, parent) {
		        return SingleEventBase_1.SingleEventBase._logData(Verbose, data, parent);
		    };
		    /**
		     * This is false when Verbose event does not require a parent event
		     */
		    Verbose.prototype.requiresParent = function () {
		        return false;
		    };
		    Verbose.prototype.setSingleData = function (data) {
		        if (typeof data.name !== "undefined") {
		            this.data.name = this.cleanString(data.name);
		        }
		        this.data.message = this.cleanString(data.message);
		    };
		    /**
		     * The name of the Verbose event
		     */
		    Verbose.fullName = 'Verbose,';
		    /**
		     * The short name of the Verbose event
		     */
		    Verbose.shortName = 'Verbose';
		    /**
		     * This is true if the Verbose event is enabled
		     */
		    Verbose.metadata = {
		        name: {
		            type: "String",
		            definedInName: "Verbose",
		            definedInFullName: "Verbose,",
		            isKey: true,
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        message: {
		            type: "String",
		            definedInName: "Verbose",
		            definedInFullName: "Verbose,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        }
		    };
		    return Verbose;
		}(SingleEventBase_1.SingleEventBase));
		exports.Verbose = Verbose;
		Verbose.prototype.metadata = Verbose.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Verbose;
	
	
	/***/ },
	/* 27 */
	/***/ function(module, exports) {
	
		// OneDrive:CoverageThreshold(100)
		"use strict";
		var CircularBuffer = (function () {
		    function CircularBuffer(size) {
		        this._length = 0;
		        this._head = -1;
		        if (size <= 0) {
		            throw new Error("Size must be positive");
		        }
		        this._size = size;
		        this._buffer = new Array(size);
		    }
		    CircularBuffer.prototype.push = function (item) {
		        if (this._length < this._size) {
		            this._length++;
		        }
		        this._head++;
		        if (this._head === this._size) {
		            this._head = 0;
		        }
		        this._buffer[this._head] = item;
		    };
		    CircularBuffer.prototype.popOldest = function () {
		        if (this._length === 0) {
		            return null;
		        }
		        var tail = (this._head - this._length + 1 + this._size) % this._size;
		        this._length--;
		        return this._buffer[tail];
		    };
		    return CircularBuffer;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = CircularBuffer;
	
	
	/***/ },
	/* 28 */
	/***/ function(module, exports) {
	
		/**
		 * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.
		 * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.
		 *
		 * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a
		 * new instance of the class and remember to call dispose() during your code's dispose handler.
		 */
		"use strict";
		function noop() {
		    'use strict';
		    // Do nothing.
		}
		var Async = (function () {
		    function Async(parent, onError) {
		        this._isDisposed = false;
		        this._parent = parent || null;
		        this._onErrorHandler = onError;
		        this._timeoutIds = null;
		        this._immediateIds = null;
		        this._animationFrameIds = null;
		        this._intervalIds = null;
		    }
		    /**
		     * Dispose function, clears all async operations.
		     */
		    Async.prototype.dispose = function () {
		        if (this._isDisposed) {
		            return;
		        }
		        this._isDisposed = true;
		        this._parent = null;
		        // Clear timeouts.
		        if (this._timeoutIds) {
		            for (var _i = 0, _a = Object.keys(this._timeoutIds); _i < _a.length; _i++) {
		                var id = _a[_i];
		                this.clearTimeout(Number(id));
		            }
		            this._timeoutIds = null;
		        }
		        // Clear immediates.
		        if (this._immediateIds) {
		            for (var _b = 0, _c = Object.keys(this._immediateIds); _b < _c.length; _b++) {
		                var id = _c[_b];
		                this.clearImmediate(Number(id));
		            }
		            this._immediateIds = null;
		        }
		        // Clear intervals.
		        if (this._intervalIds) {
		            for (var _d = 0, _e = Object.keys(this._intervalIds); _d < _e.length; _d++) {
		                var id = _e[_d];
		                this.clearInterval(Number(id));
		            }
		            this._intervalIds = null;
		        }
		        // Clear animation frames.
		        if (this._animationFrameIds) {
		            for (var _f = 0, _g = Object.keys(this._animationFrameIds); _f < _g.length; _f++) {
		                var id = _g[_f];
		                this.cancelAnimationFrame(Number(id));
		            }
		            this._animationFrameIds = null;
		        }
		    };
		    /**
		     * SetTimeout override, which will auto cancel the timeout during dispose.
		     * @param callback Callback to execute.
		     * @param duration Duration in milliseconds.
		     * @return The setTimeout id.
		     */
		    Async.prototype.setTimeout = function (callback, duration) {
		        var _this = this;
		        var timeoutId = 0;
		        if (!this._isDisposed) {
		            if (!this._timeoutIds) {
		                this._timeoutIds = {};
		            }
		            /* tslint:disable:ban-native-functions */
		            timeoutId = setTimeout(function () {
		                // Time to execute the timeout, enqueue it as a foreground task to be executed.
		                try {
		                    // Now delete the record and call the callback.
		                    delete _this._timeoutIds[timeoutId];
		                    callback.apply(_this._parent);
		                }
		                catch (e) {
		                    if (_this._onErrorHandler) {
		                        _this._onErrorHandler(e);
		                    }
		                }
		            }, duration);
		            /* tslint:enable:ban-native-functions */
		            this._timeoutIds[timeoutId] = true;
		        }
		        return timeoutId;
		    };
		    /**
		     * Clears the timeout.
		     * @param id Id to cancel.
		     */
		    Async.prototype.clearTimeout = function (id) {
		        if (this._timeoutIds && this._timeoutIds[id]) {
		            /* tslint:disable:ban-native-functions */
		            clearTimeout(id);
		            delete this._timeoutIds[id];
		        }
		    };
		    /**
		     * SetImmediate override, which will auto cancel the immediate during dispose.
		     * @param callback Callback to execute.
		     * @return The setTimeout id.
		     */
		    Async.prototype.setImmediate = function (callback) {
		        var _this = this;
		        var immediateId = 0;
		        if (!this._isDisposed) {
		            if (!this._immediateIds) {
		                this._immediateIds = {};
		            }
		            /* tslint:disable:ban-native-functions */
		            var setImmediateCallback = function () {
		                // Time to execute the timeout, enqueue it as a foreground task to be executed.
		                try {
		                    // Now delete the record and call the callback.
		                    delete _this._immediateIds[immediateId];
		                    callback.apply(_this._parent);
		                }
		                catch (e) {
		                    _this._logError(e);
		                }
		            };
		            immediateId = window.setImmediate ? window.setImmediate(setImmediateCallback) : window.setTimeout(setImmediateCallback, 0);
		            /* tslint:enable:ban-native-functions */
		            this._immediateIds[immediateId] = true;
		        }
		        return immediateId;
		    };
		    /**
		     * Clears the immediate.
		     * @param id Id to cancel.
		     */
		    Async.prototype.clearImmediate = function (id) {
		        if (this._immediateIds && this._immediateIds[id]) {
		            /* tslint:disable:ban-native-functions */
		            window.clearImmediate ? window.clearImmediate(id) : window.clearTimeout(id);
		            delete this._immediateIds[id];
		        }
		    };
		    /**
		     * SetInterval override, which will auto cancel the timeout during dispose.
		     * @param callback Callback to execute.
		     * @param duration Duration in milliseconds.
		     * @return The setTimeout id.
		     */
		    Async.prototype.setInterval = function (callback, duration) {
		        var _this = this;
		        var intervalId = 0;
		        if (!this._isDisposed) {
		            if (!this._intervalIds) {
		                this._intervalIds = {};
		            }
		            /* tslint:disable:ban-native-functions */
		            intervalId = setInterval(function () {
		                // Time to execute the interval callback, enqueue it as a foreground task to be executed.
		                try {
		                    callback.apply(_this._parent);
		                }
		                catch (e) {
		                    _this._logError(e);
		                }
		            }, duration);
		            /* tslint:enable:ban-native-functions */
		            this._intervalIds[intervalId] = true;
		        }
		        return intervalId;
		    };
		    /**
		     * Clears the interval.
		     * @param id Id to cancel.
		     */
		    Async.prototype.clearInterval = function (id) {
		        if (this._intervalIds && this._intervalIds[id]) {
		            /* tslint:disable:ban-native-functions */
		            clearInterval(id);
		            delete this._intervalIds[id];
		        }
		    };
		    /**
		     * Creates a function that, when executed, will only call the func function at most once per
		     * every wait milliseconds. Provide an options object to indicate that func should be invoked
		     * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled
		     * function will return the result of the last func call.
		     *
		     * Note: If leading and trailing options are true func will be called on the trailing edge of
		     * the timeout only if the the throttled function is invoked more than once during the wait timeout.
		     *
		     * @param func The function to throttle.
		     * @param wait The number of milliseconds to throttle executions to. Defaults to 0.
		     * @param options The options object.
		     * @param options.leading Specify execution on the leading edge of the timeout.
		     * @param options.trailing Specify execution on the trailing edge of the timeout.
		     * @return The new throttled function.
		     */
		    Async.prototype.throttle = function (func, wait, options) {
		        var _this = this;
		        if (this._isDisposed) {
		            return noop;
		        }
		        var waitMS = wait || 0;
		        var leading = true;
		        var trailing = true;
		        var lastExecuteTime = 0;
		        var lastResult;
		        var lastArgs;
		        var timeoutId = null;
		        if (options && typeof (options.leading) === 'boolean') {
		            leading = options.leading;
		        }
		        if (options && typeof (options.trailing) === 'boolean') {
		            trailing = options.trailing;
		        }
		        var callback = function (userCall) {
		            var now = (new Date()).getTime();
		            var delta = now - lastExecuteTime;
		            var waitLength = leading ? waitMS - delta : waitMS;
		            if (delta >= waitMS && (!userCall || leading)) {
		                lastExecuteTime = now;
		                if (timeoutId) {
		                    _this.clearTimeout(timeoutId);
		                    timeoutId = null;
		                }
		                lastResult = func.apply(_this._parent, lastArgs);
		            }
		            else if (timeoutId === null && trailing) {
		                timeoutId = _this.setTimeout(callback, waitLength);
		            }
		            return lastResult;
		        };
		        var resultFunction = function () {
		            var args = [];
		            for (var _i = 0; _i < arguments.length; _i++) {
		                args[_i - 0] = arguments[_i];
		            }
		            lastArgs = args;
		            return callback(true);
		        };
		        return resultFunction;
		    };
		    /**
		     * Creates a function that will delay the execution of func until after wait milliseconds have
		     * elapsed since the last time it was invoked. Provide an options object to indicate that func
		     * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls
		     * to the debounced function will return the result of the last func call.
		     *
		     * Note: If leading and trailing options are true func will be called on the trailing edge of
		     * the timeout only if the the debounced function is invoked more than once during the wait
		     * timeout.
		     *
		     * @param func The function to debounce.
		     * @param wait The number of milliseconds to delay.
		     * @param options The options object.
		     * @param options.leading Specify execution on the leading edge of the timeout.
		     * @param options.maxWait The maximum time func is allowed to be delayed before it's called.
		     * @param options.trailing Specify execution on the trailing edge of the timeout.
		     * @return The new debounced function.
		     */
		    Async.prototype.debounce = function (func, wait, options) {
		        var _this = this;
		        if (this._isDisposed) {
		            return noop;
		        }
		        var waitMS = wait || 0;
		        var leading = false;
		        var trailing = true;
		        var maxWait = null;
		        var lastCallTime = 0;
		        var lastExecuteTime = (new Date()).getTime();
		        var lastResult;
		        var lastArgs;
		        var timeoutId = null;
		        if (options && typeof (options.leading) === 'boolean') {
		            leading = options.leading;
		        }
		        if (options && typeof (options.trailing) === 'boolean') {
		            trailing = options.trailing;
		        }
		        if (options && typeof (options.maxWait) === 'number' && !isNaN(options.maxWait)) {
		            maxWait = options.maxWait;
		        }
		        var callback = function (userCall) {
		            var now = (new Date()).getTime();
		            var executeImmediately = false;
		            if (userCall) {
		                if (leading && now - lastCallTime >= waitMS) {
		                    executeImmediately = true;
		                }
		                lastCallTime = now;
		            }
		            var delta = now - lastCallTime;
		            var waitLength = waitMS - delta;
		            var maxWaitDelta = now - lastExecuteTime;
		            var maxWaitExpired = false;
		            if (maxWait !== null) {
		                // maxWait only matters when there is a pending callback
		                if (maxWaitDelta >= maxWait && timeoutId) {
		                    maxWaitExpired = true;
		                }
		                else {
		                    waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
		                }
		            }
		            if (delta >= waitMS || maxWaitExpired || executeImmediately) {
		                if (timeoutId) {
		                    _this.clearTimeout(timeoutId);
		                    timeoutId = null;
		                }
		                lastExecuteTime = now;
		                lastResult = func.apply(_this._parent, lastArgs);
		            }
		            else if ((timeoutId === null || !userCall) && trailing) {
		                timeoutId = _this.setTimeout(callback, waitLength);
		            }
		            return lastResult;
		        };
		        var resultFunction = function () {
		            var args = [];
		            for (var _i = 0; _i < arguments.length; _i++) {
		                args[_i - 0] = arguments[_i];
		            }
		            lastArgs = args;
		            return callback(true);
		        };
		        return resultFunction;
		    };
		    Async.prototype.requestAnimationFrame = function (callback) {
		        var _this = this;
		        var animationFrameId = 0;
		        if (!this._isDisposed) {
		            if (!this._animationFrameIds) {
		                this._animationFrameIds = {};
		            }
		            /* tslint:disable:ban-native-functions */
		            var animationFrameCallback = function () {
		                try {
		                    // Now delete the record and call the callback.
		                    delete _this._animationFrameIds[animationFrameId];
		                    callback.apply(_this._parent);
		                }
		                catch (e) {
		                    _this._logError(e);
		                }
		            };
		            animationFrameId = window.requestAnimationFrame ? window.requestAnimationFrame(animationFrameCallback) : window.setTimeout(animationFrameCallback, 0);
		            /* tslint:enable:ban-native-functions */
		            this._animationFrameIds[animationFrameId] = true;
		        }
		        return animationFrameId;
		    };
		    Async.prototype.cancelAnimationFrame = function (id) {
		        if (this._animationFrameIds && this._animationFrameIds[id]) {
		            /* tslint:disable:ban-native-functions */
		            window.cancelAnimationFrame ? window.cancelAnimationFrame(id) : window.clearTimeout(id);
		            /* tslint:enable:ban-native-functions */
		            delete this._animationFrameIds[id];
		        }
		    };
		    Async.prototype._logError = function (e) {
		        if (this._onErrorHandler) {
		            this._onErrorHandler(e);
		        }
		    };
		    return Async;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Async;
	
	
	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var RUMOneLogger_1 = __webpack_require__(30);
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = RUMOneLogger_1.APICallPerformanceData;
	
	
	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		// OneDrive:IgnoreCodeCoverage
		var Async_1 = __webpack_require__(28);
		var PageTransitionType_1 = __webpack_require__(31);
		var RUMOneSLAPI_1 = __webpack_require__(32);
		var RUMOneErrorsSLAPI_1 = __webpack_require__(33);
		var RUMOneDataUpload_event_1 = __webpack_require__(34);
		var PlatformDetection_1 = __webpack_require__(35);
		var PerformanceDataState;
		(function (PerformanceDataState) {
		    PerformanceDataState[PerformanceDataState["Incomplete"] = 1] = "Incomplete";
		    PerformanceDataState[PerformanceDataState["ReadyToUpload"] = 2] = "ReadyToUpload";
		    PerformanceDataState[PerformanceDataState["Uploaded"] = 3] = "Uploaded";
		    PerformanceDataState[PerformanceDataState["TimeOut"] = 4] = "TimeOut";
		})(PerformanceDataState || (PerformanceDataState = {}));
		var MARKER_PREFIX = "EUPL.";
		var APICallPerformanceData = (function () {
		    function APICallPerformanceData(url, duration, correlationid, status, startTime, endTime, name) {
		        this.url = url;
		        this.duration = duration;
		        this.correlationId = correlationid;
		        this.status = status;
		        this.startTime = startTime;
		        this.endTime = endTime;
		        this.name = name;
		    }
		    return APICallPerformanceData;
		}());
		exports.APICallPerformanceData = APICallPerformanceData;
		var ControlPerformanceData = (function () {
		    function ControlPerformanceData(controlId, startTime, endTime, renderTimeCalculator, renderTimeRequiredDataChecker) {
		        this.controlId = controlId;
		        this.startTime = startTime;
		        this.endTime = endTime;
		        this.renderTimeCalculator = renderTimeCalculator;
		        this.renderTimeRequiredDataChecker = renderTimeRequiredDataChecker;
		    }
		    return ControlPerformanceData;
		}());
		exports.ControlPerformanceData = ControlPerformanceData;
		/**
		 * It is a new client side perf instrumentation, it logs more metrics, like scenario, api data, server request id, duration, etc in 1 single schema.
		 * It has server side usage DB and cosmos supports.
		 */
		var RUMOneLogger = (function () {
		    function RUMOneLogger(logFunc) {
		        this.async = new Async_1.default(this);
		        this.dataStartTime = Number((new Date()).getTime());
		        this.performanceData = null;
		        this.dataState = PerformanceDataState.Incomplete;
		        this.controls = [];
		        this.apis = [];
		        this.perfDataTimer = null;
		        this.expectedControls = [];
		        this.euplBreakDown = {};
		        this.serverMetrics = {};
		        this.isW3cTimingCollected = false;
		        this.isW3cResourceTimingCollected = false;
		        this.tempData = {};
		        this.markerIndex = 0;
		        this.performanceData = null;
		        this.loggingFunc = logFunc;
		        this.getPerformanceData();
		        this.setPerfDataTimer();
		        this._platformDetection = new PlatformDetection_1.default();
		    }
		    RUMOneLogger.isNullOrUndefined = function (item) {
		        return item === null || item === undefined;
		    };
		    /**
		     * RUMOneLogger.getRUMOneLogger: Use this method to get a singleton reference of RUMOneLogger
		     * with default parameters.
		     */
		    RUMOneLogger.getRUMOneLogger = function (logFunc) {
		        var loggingFunc = logFunc || (function (streamName, dictProperties) {
		            RUMOneDataUpload_event_1.RUMOneDataUpload.logData({ streamName: streamName, dictionary: dictProperties });
		        });
		        if (!RUMOneLogger.rumOneLogger) {
		            try {
		                RUMOneLogger.rumOneLogger = new RUMOneLogger(loggingFunc);
		            }
		            catch (e) {
		                // If RUMOneLogger fails, don't block UX
		                RUMOneLogger.rumOneLogger = null;
		            }
		        }
		        return RUMOneLogger.rumOneLogger;
		    };
		    RUMOneLogger.prototype.getPerformanceData = function () {
		        if (!this.performanceData) {
		            this.performanceData = new RUMOneSLAPI_1.default();
		            this.logMessageInConsole("RUMOne object initiated!");
		        }
		        return this.performanceData;
		    };
		    RUMOneLogger.prototype.resetLogger = function () {
		        this.dataStartTime = (new Date()).getTime();
		        this.dataState = PerformanceDataState.Incomplete;
		        this.isW3cTimingCollected = false;
		        this.isW3cResourceTimingCollected = false;
		        this.expectedControls = [];
		        this.controls = [];
		        this.apis = [];
		        this.tempData = {};
		        this.performanceData = null;
		        this.getPerformanceData();
		        this.clearPerfDataTimer();
		        this.setPerfDataTimer();
		        this.euplBreakDown = {};
		        this.serverMetrics = {};
		        this.logMessageInConsole("Reset performance Logger Done");
		        this.clearResourceTimings();
		        this.clearMarks();
		    };
		    RUMOneLogger.prototype.logPerformanceData = function (key, value) {
		        if (!key || !this.performanceData || !this.verifyPropertyMatchingSchema(key)) {
		            return;
		        }
		        this.getPerformanceData();
		        this.performanceData[key] = value;
		    };
		    RUMOneLogger.prototype.getPerformanceDataPropertyValue = function (key) {
		        if (!this.performanceData || !key || !this.verifyPropertyMatchingSchema(key)) {
		            return null;
		        }
		        return this.performanceData[key];
		    };
		    RUMOneLogger.prototype.verifyPropertyMatchingSchema = function (propertyName) {
		        var properties = this.getRUMOnePropertyNames(this.performanceData);
		        return properties.join().indexOf(propertyName) !== -1;
		    };
		    RUMOneLogger.prototype.addExpectedControl = function (control) {
		        if (this.expectedControls.indexOf(control) === -1) {
		            this.expectedControls.push(control);
		        }
		    };
		    RUMOneLogger.prototype.expectingControl = function (control) {
		        return this.expectedControls.indexOf(control) >= 0;
		    };
		    RUMOneLogger.prototype.writeServerCorrelationId = function (correlationId) {
		        if (!this.isCollected('ServerCorrelationId')) {
		            this.logPerformanceData('ServerCorrelationId', correlationId);
		        }
		    };
		    RUMOneLogger.prototype.writeServerUrl = function (url) {
		        if (!this.isCollected('ServerUrl')) {
		            var serverUrl = url || window.location.href;
		            this.logPerformanceData('ServerUrl', serverUrl);
		        }
		    };
		    RUMOneLogger.prototype.writeServerSideLatency = function (duration, iisLatency) {
		        if (!this.isCollected('ServerRequestDuration')) {
		            this.logPerformanceData('ServerRequestDuration', duration);
		            this.logPerformanceData('IISLatency', iisLatency);
		        }
		    };
		    RUMOneLogger.prototype.writeControlPerformanceData = function (controlData) {
		        if (controlData) {
		            var foundControl = this.controls.filter(function (control) {
		                return control.controlId === controlData.controlId;
		            });
		            if (foundControl.length === 0) {
		                this.controls.push(controlData);
		            }
		        }
		    };
		    RUMOneLogger.prototype.writeAPICallPerformanceData = function (apiData) {
		        if (apiData) {
		            this.apis.push(apiData);
		        }
		    };
		    RUMOneLogger.prototype.readAPICallPerformanceData = function () {
		        return this.apis;
		    };
		    RUMOneLogger.prototype.writeAppCache = function (appCache) {
		        if (!this.isCollected('AppCache')) {
		            this.logPerformanceData('AppCache', appCache);
		        }
		    };
		    RUMOneLogger.prototype.writePageTransitionType = function (pageTransitionType, overwrite) {
		        if ((!this.isCollected('PageTransitionType') || overwrite) &&
		            !RUMOneLogger.isNullOrUndefined(pageTransitionType) &&
		            (pageTransitionType === PageTransitionType_1.default.fullPageLoad || pageTransitionType === PageTransitionType_1.default.none || pageTransitionType === PageTransitionType_1.default.onePageAppNavigation)) {
		            this.logPerformanceData('PageTransitionType', pageTransitionType);
		        }
		    };
		    RUMOneLogger.prototype.writeScenarioId = function (scenarioId, overwrite) {
		        if (!this.isCollected('ScenarioId') || overwrite) {
		            this.logPerformanceData('ScenarioId', scenarioId);
		        }
		    };
		    RUMOneLogger.prototype.collectW3CPerfTimings = function () {
		        if (!this.isW3cTimingCollected) {
		            var w3cTimeStampNames = ['navigationStart', 'unloadEventStart', 'unloadEventEnd', 'fetchStart', 'redirectStart', 'redirectEnd', 'domainLookupStart', 'domainLookupEnd', 'connectStart', 'secureConnectionStart', 'connectEnd', 'requestStart', 'responseStart', 'responseEnd', 'domLoading', 'domComplete', 'loadEventStart', 'loadEventEnd'];
		            var perfTimingObject = this.getWindowPerfTimingObject();
		            if (perfTimingObject) {
		                for (var index = 0; index < w3cTimeStampNames.length; index++) {
		                    var w3cObject = perfTimingObject[w3cTimeStampNames[index]];
		                    if (w3cObject) {
		                        this.logPerformanceData(this.getW3cTimingName(w3cTimeStampNames[index]), Number(w3cObject));
		                    }
		                }
		                this.isW3cTimingCollected = true;
		            }
		        }
		    };
		    RUMOneLogger.prototype.collectW3cResourceTimings = function () {
		        if (!this.isW3cResourceTimingCollected && window.performance && window.performance.getEntriesByType) {
		            var allRequests = performance.getEntriesByType("resource");
		            var iFrames = document.getElementsByTagName("iframe");
		            for (var index = 0; index < iFrames.length; index++) {
		                var iFramePerformance = null;
		                try {
		                    iFramePerformance = iFrames[index].contentWindow.performance;
		                }
		                catch (e) {
		                }
		                if (iFramePerformance && iFramePerformance.getEntriesByType) {
		                    allRequests.concat(iFramePerformance.getEntriesByType("resource"));
		                }
		            }
		            var fromSources = {};
		            fromSources["SharePoint"] = function (element) { return /\.sharepoint\.com|\.spoppe\.com/i.test(element.name); }; //matching sharepoint.com or spoppe.com
		            fromSources["CDN"] = function (element) { return /(cdn(ppe)?|static(ppe)?)\.sharepointonline\.com|\.akamaihd\.net/i.test(element.name); }; //matching cdn(ppe)sharepointonline.com or adamaihd.net
		            fromSources["ThirdParty"] = function (element) { return !fromSources["SharePoint"](element) && !fromSources["CDN"](element); }; // all requests other than sharepoint requests or cdn requests
		            var types = {};
		            types["ASPX"] = function (element) { return /\.aspx/i.test(element.name); };
		            types["JS"] = function (element) { return /script/i.test(element.initiatorType); };
		            types["CSS"] = function (element) { return /link|css/i.test(element.initiatorType); };
		            types["IMG"] = function (element) { return /img/i.test(element.initiatorType); };
		            var sources = Object.keys(fromSources);
		            for (var index = 0; index < sources.length; index++) {
		                var source = sources[index];
		                var requests = this.categorizeResourceRequests(allRequests, {
		                    from: fromSources[source],
		                    requestType: null //match any type to get total request count for this source
		                });
		                this.logPerformanceData(source + "RequestCountTotal", requests.length); //SharePoint|CDN|ThirdParty resource request count
		                var typeKeys = Object.keys(types);
		                for (var typeIndex = 0; typeIndex < typeKeys.length; typeIndex++) {
		                    var type = typeKeys[typeIndex];
		                    this.logPerformanceData(source + "RequestCount" + type, this.categorizeResourceRequests(requests, {
		                        from: null,
		                        requestType: types[type]
		                    }).length); //SharePoint|CDN|ThirdParty ASPX resource request count
		                }
		                if (requests.length > 0) {
		                    this.logPerformanceData(source + "RequestDownloadTime", Math.round(requests.reduce(function (sum, currentVal) {
		                        return sum + currentVal.duration;
		                    }, 0) / requests.length)); //SharePoint|CDN|ThirdParty resource request average duration
		                    // log the file names of all resource requests in a JSON string. The output after processing will looks like:
		                    // [{name: "require-db6c47e2.js", startTime: 500, duration: 100},{name: "RenderListDataAsStream", startTime: 200, duration: 10}]
		                    // The raw resource name before this processing is "https://msft.spoppe.com/teams/SPGroups/_api/web/GetList(@listUrl)/RenderListDataAsStream?Paged=TRUE&p_FileLeafRef=test%2eurl&p_ID=213&PageFirstRow=121&View=6eab4254-2f2f-4086-91c0-549ae900cc93&@listUrl=%27%2Fteams%2FSPGroups%2FVNextDocLib%27"
		                    var files = JSON.stringify(requests.map(function (timing) {
		                        return {
		                            name: timing.name.split("/").map(function (urlToken) {
		                                return urlToken.split("?")[0];
		                            }).filter(function (urlToken) {
		                                return urlToken && urlToken.length > 0;
		                            }).slice(-1)[0].replace(/\(.*?\)/g, '()'),
		                            startTime: Math.round(timing.startTime),
		                            duration: Math.round(timing.duration)
		                        };
		                    }));
		                    this.logPerformanceData(source + "RequestNames", files);
		                }
		            }
		            this.isW3cResourceTimingCollected = true;
		        }
		    };
		    RUMOneLogger.prototype.saveTempData = function (key, value) {
		        this.tempData[key] = value;
		    };
		    RUMOneLogger.prototype.readTempData = function (key) {
		        return this.tempData[key];
		    };
		    RUMOneLogger.prototype.writeRenderTime = function (renderTime, overwrite) {
		        if (!this.isCollected('RenderTime') || overwrite) {
		            this.logPerformanceData('RenderTime', renderTime);
		        }
		    };
		    RUMOneLogger.prototype.writePreRenderTime = function (preRender) {
		        if (!this.isCollected('PreRender')) {
		            this.logPerformanceData('PreRender', preRender);
		        }
		    };
		    RUMOneLogger.prototype.writePostRenderTime = function (postRender) {
		        if (!this.isCollected('PostRender')) {
		            this.logPerformanceData('PostRender', postRender);
		        }
		    };
		    RUMOneLogger.prototype.writeDataFetchTime = function (dataFetch, overwrite) {
		        if (!this.isCollected('DataFetch') || overwrite) {
		            this.logPerformanceData('DataFetch', dataFetch);
		        }
		    };
		    RUMOneLogger.prototype.isRunning = function () {
		        return !(this.dataState === PerformanceDataState.Uploaded || this.dataState === PerformanceDataState.TimeOut);
		    };
		    RUMOneLogger.prototype.writeEUPLBreakdown = function (euplBreakdown, overwrite) {
		        if (euplBreakdown) {
		            try {
		                var breakdown = JSON.parse(euplBreakdown);
		                for (var key in breakdown) {
		                    if (!breakdown.hasOwnProperty(key)) {
		                        continue;
		                    }
		                    this.addEUPLBreakdown(key, breakdown[key], overwrite);
		                }
		            }
		            catch (e) {
		                // in case the euplBreakdown is invalid JSON
		                this.logMessageInConsole("Failed to write EUPL breakdown data:" + e.toString());
		            }
		        }
		    };
		    RUMOneLogger.prototype.addEUPLBreakdown = function (name, value, overwrite) {
		        if (name && !RUMOneLogger.isNullOrUndefined(value)) {
		            if (RUMOneLogger.isNullOrUndefined(this.euplBreakDown[name]) || overwrite) {
		                this.euplBreakDown[name] = value;
		            }
		        }
		    };
		    RUMOneLogger.prototype.addServerMetrics = function (metric, overwrite) {
		        if (metric) {
		            for (var key in metric) {
		                if (key && !RUMOneLogger.isNullOrUndefined(metric[key]) &&
		                    (RUMOneLogger.isNullOrUndefined(this.serverMetrics[key]) || overwrite)) {
		                    this.serverMetrics[key] = metric[key];
		                }
		            }
		        }
		    };
		    RUMOneLogger.prototype.readControlPerformanceData = function () {
		        return this.controls;
		    };
		    RUMOneLogger.prototype.mark = function (name) {
		        if (window.performance && window.performance.mark) {
		            window.performance.mark(MARKER_PREFIX + name);
		        }
		    };
		    RUMOneLogger.prototype.clearResourceTimings = function () {
		        var perfObject = window.self["performance"];
		        if (perfObject && perfObject.clearResourceTimings) {
		            perfObject.clearResourceTimings();
		        }
		    };
		    RUMOneLogger.prototype.collectMarks = function () {
		        var _this = this;
		        if (window.performance && window.performance.getEntriesByType) {
		            var marks_1 = {};
		            window.performance.getEntriesByType("mark").filter(function (mark) {
		                return mark.name.lastIndexOf(MARKER_PREFIX, 0) === 0;
		            }).forEach(function (mark) {
		                if (_this.markerIndex < RUMOneLogger.MAX_MARKS) {
		                    var markName = mark.name.substr(MARKER_PREFIX.length) + (".mark" + _this.markerIndex++);
		                    marks_1[markName] = Math.round(mark.startTime); // covert to rumone collected marks to object and merge to EUPL Breakdown
		                }
		            });
		            this.writeEUPLBreakdown(JSON.stringify(marks_1));
		        }
		    };
		    RUMOneLogger.prototype.clearMarks = function () {
		        if (window.performance && window.performance.getEntriesByType && window.performance.clearMarks) {
		            window.performance.getEntriesByType("mark").filter(function (mark) {
		                return mark.name.lastIndexOf(MARKER_PREFIX, 0) === 0;
		            }).forEach(function (mark) {
		                window.performance.clearMarks(mark.name);
		            });
		        }
		        this.markerIndex = 0;
		    };
		    RUMOneLogger.prototype.logMessageInConsole = function (message) {
		        try {
		            if ('sessionStorage' in window && window.sessionStorage) {
		                var debugStr = window.sessionStorage["enableRUMOneDebugging"];
		                var debug = debugStr && debugStr.toLowerCase() === "true";
		            }
		        }
		        catch (e) {
		        }
		        if (debug && typeof console !== "undefined" && console) {
		            console.log(message);
		        }
		    };
		    RUMOneLogger.prototype.logObjectForDebugging = function (propertyName, dictProperties) {
		        var logMessageText = propertyName + " : " + JSON.stringify(dictProperties);
		        this.logMessageInConsole(logMessageText);
		    };
		    RUMOneLogger.prototype.isCollected = function (name) {
		        return !RUMOneLogger.isNullOrUndefined(this.getPerformanceDataPropertyValue(name));
		    };
		    RUMOneLogger.prototype.getRUMOnePropertyNames = function (obj) {
		        var names = [];
		        var index = 0;
		        if (!RUMOneLogger.isNullOrUndefined(obj)) {
		            for (var property in obj) {
		                if (obj.hasOwnProperty(property)) {
		                    names[index++] = property;
		                }
		            }
		        }
		        return names;
		    };
		    RUMOneLogger.prototype.setPerfDataTimer = function () {
		        this.perfDataTimer = this.async.setTimeout(this.loopForDataCompleteness, RUMOneLogger.CHECK_INTERVAL);
		    };
		    RUMOneLogger.prototype.clearPerfDataTimer = function () {
		        if (!RUMOneLogger.isNullOrUndefined(this.perfDataTimer)) {
		            this.async.clearTimeout(this.perfDataTimer);
		            this.perfDataTimer = null;
		        }
		    };
		    RUMOneLogger.prototype.categorizeResourceRequests = function (requests, categorizer) {
		        var ret = [];
		        for (var index = 0; index < requests.length; index++) {
		            var request = requests[index];
		            if ((!categorizer.from || categorizer.from(request)) && (!categorizer.requestType || categorizer.requestType(request))) {
		                ret.push(request);
		            }
		        }
		        return ret;
		    };
		    RUMOneLogger.prototype.collectSupplementaryData = function () {
		        this.setAPIDataToRUMOne();
		        this.collectMarks();
		        this.writeServerUrl(null);
		        this.setBrowseInfo();
		        this.setReferrer();
		        this.logPerformanceData('ServerMetrics', JSON.stringify(this.serverMetrics));
		        this.logPerformanceData('EUPLBreakdown', JSON.stringify(this.euplBreakDown));
		    };
		    RUMOneLogger.prototype.loopForDataCompleteness = function () {
		        this.clearPerfDataTimer();
		        this.logObjectForDebugging("RUMONE: ", this.performanceData);
		        this.logObjectForDebugging("RUMOne DataState: ", String(this.getReadableDataState(this.dataState)));
		        this.logObjectForDebugging("Control Performance Data: ", this.controls);
		        this.logObjectForDebugging("API Performance Data: ", this.apis);
		        this.logObjectForDebugging("Temp Data: ", this.tempData);
		        this.logObjectForDebugging("EUPLBreakdown: ", this.euplBreakDown);
		        this.logObjectForDebugging("ServerMetrics: ", this.serverMetrics);
		        this.logMessageInConsole("====================================================================");
		        if (!this.isRunning()) {
		            return;
		        }
		        var collected = true;
		        var missedKeyMetrics = [];
		        for (var i = 0; i < RUMOneLogger.KeyMetrics.length; i++) {
		            var keyMetricValue = this.getPerformanceDataPropertyValue(RUMOneLogger.KeyMetrics[i]);
		            if (RUMOneLogger.isNullOrUndefined(keyMetricValue)) {
		                collected = false;
		                missedKeyMetrics.push(RUMOneLogger.KeyMetrics[i]);
		            }
		        }
		        this.dataState = collected ? PerformanceDataState.ReadyToUpload : PerformanceDataState.Incomplete;
		        if (this.dataState === PerformanceDataState.Incomplete) {
		            if (Number((new Date()).getTime()) - Number(this.dataStartTime) > RUMOneLogger.ERROR_TIMEOUT) {
		                this.dataState = PerformanceDataState.TimeOut;
		                this.collectSupplementaryData();
		                this.uploadPerfData();
		                this.reportErrors('TimeOut', 'Did not get key perf metrics in ' + String(RUMOneLogger.ERROR_TIMEOUT) + ' milliseconds. Missed metrics: ' + missedKeyMetrics.join() + '.');
		            }
		            else {
		                this.processControlPerfData();
		                if (this.readyToComputeEUPL()) {
		                    this.setEUPL();
		                }
		            }
		        }
		        else {
		            this.collectSupplementaryData();
		            try {
		                this.uploadPerfData();
		            }
		            catch (e) {
		                (function (errorText) {
		                    if (typeof console !== "undefined" && Boolean(console)) {
		                        console.error(errorText);
		                    }
		                })("PerformanceLogger error writing RUMOne data: " + String(e));
		            }
		            this.dataState = PerformanceDataState.Uploaded;
		        }
		        this.setPerfDataTimer();
		    };
		    RUMOneLogger.prototype.getReadableDataState = function (_dataState) {
		        for (var key in PerformanceDataState) {
		            if (_dataState === Number(PerformanceDataState[key])) {
		                return key;
		            }
		        }
		        return 'NaN';
		    };
		    RUMOneLogger.prototype.writeControlDataToRUMOne = function (controlData) {
		        var _this = this;
		        if (controlData) {
		            var indexes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].filter(function (index) {
		                return !_this.isCollected("Control" + index + "Id");
		            });
		            var index = indexes.length > 0 ? indexes[0] : -1;
		            if (index > 0) {
		                this.logPerformanceData("Control" + index + "Id", controlData.controlId);
		                this.logPerformanceData("Control" + index + "RenderTime", controlData.renderTime);
		            }
		        }
		    };
		    RUMOneLogger.prototype.processControlPerfData = function () {
		        for (var index = 0; index < this.controls.length; index++) {
		            var control = this.controls[index];
		            if (!Boolean(control.renderTime) && control.renderTimeRequiredDataChecker(this, control)) {
		                control.renderTime = control.renderTimeCalculator(this, control);
		                this.writeControlDataToRUMOne(control);
		            }
		        }
		    };
		    RUMOneLogger.prototype.readyToComputeEUPL = function () {
		        var readyControls = 0;
		        for (var index = 0; index < this.expectedControls.length; index++) {
		            var keyControl = this.lookUpControls(this.expectedControls[index], this.controls);
		            if (keyControl && Boolean(keyControl.renderTime)) {
		                readyControls++;
		            }
		        }
		        return this.expectedControls.length > 0 && this.expectedControls.length === readyControls;
		    };
		    RUMOneLogger.prototype.lookUpControls = function (_controlId, _controls) {
		        if (_controls) {
		            for (var index = 0; index < _controls.length; index++) {
		                if (_controlId === _controls[index].controlId) {
		                    return _controls[index];
		                }
		            }
		        }
		        return null;
		    };
		    RUMOneLogger.prototype.setEUPL = function () {
		        if (!this.isCollected('EUPL')) {
		            var eupl = 0;
		            for (var index = 0; index < this.controls.length; index++) {
		                var controlData = this.controls[index];
		                if (Boolean(controlData.renderTime) && eupl < controlData.renderTime) {
		                    eupl = controlData.renderTime;
		                }
		            }
		            this.logPerformanceData('EUPL', eupl);
		        }
		    };
		    RUMOneLogger.prototype.setBrowseInfo = function () {
		        this.logPerformanceData('Browser', this._platformDetection.browserName + this._platformDetection.browserMajor);
		        this.logPerformanceData('BrowserIsMobile', this._platformDetection.isMobile);
		    };
		    RUMOneLogger.prototype.setAPIDataToRUMOne = function () {
		        var calls = 0;
		        var durationSum = 0;
		        for (var index = 0; index < this.apis.length; index++) {
		            var apiData = this.apis[index];
		            if (apiData) {
		                calls++;
		                durationSum += apiData.duration;
		                // only take the function part of the API url to avoid cosmos data scrubber
		                // url before processing: /teams/SPGroups/_api/web/GetList(@listUrl)/RenderListDataAsStream?Paged=TRUE&p_FileLeafRef=test%2eurl&p_ID=213&PageFirstRow=121&View=6eab4254-2f2f-4086-91c0-549ae900cc93&@listUrl=%27%2Fteams%2FSPGroups%2FVNextDocLib%27"
		                // url after processing: RenderListDataAsStream
		                apiData.url = apiData.url.split("/").map(function (s) { return s.split("?")[0]; }).slice(-1)[0].replace(/\(.*?\)/g, '()');
		            }
		        }
		        this.logPerformanceData('APICallCount', calls);
		        this.logPerformanceData('APICallDurationSum', durationSum);
		        this.logPerformanceData('APICalls', JSON.stringify(this.apis));
		    };
		    RUMOneLogger.prototype.setReferrer = function () {
		        if (!this.isCollected('Referrer')) {
		            this.logPerformanceData('Referrer', document.referrer);
		        }
		    };
		    RUMOneLogger.prototype.getW3cTimingName = function (timingName) {
		        if (timingName !== 'secureConnectionStart') {
		            return 'W3c' + timingName.charAt(0).toUpperCase() + timingName.slice(1);
		        }
		        else {
		            return 'W3cSecureConnectStart'; // to workaround a RUMOne schema issue W3cSecureConnectStart should be W3cSecureConnectionStart
		        }
		    };
		    RUMOneLogger.prototype.getWindowPerfTimingObject = function () {
		        var perfObject = window.self["performance"];
		        if (!RUMOneLogger.isNullOrUndefined(perfObject) && !RUMOneLogger.isNullOrUndefined(perfObject.timing)) {
		            return perfObject.timing;
		        }
		        return null;
		    };
		    RUMOneLogger.prototype.uploadPerfData = function () {
		        if (this.performanceData && this.loggingFunc &&
		            (this.dataState === PerformanceDataState.ReadyToUpload ||
		                this.dataState === PerformanceDataState.TimeOut)) {
		            this.loggingFunc("RUMOne", this.getPerformanceData());
		        }
		    };
		    RUMOneLogger.prototype.reportErrors = function (reason, message) {
		        var errorObj = new RUMOneErrorsSLAPI_1.default();
		        errorObj.Reason = reason;
		        errorObj.Message = message;
		        if (this.loggingFunc) {
		            this.loggingFunc("RUMOneErrors", errorObj);
		        }
		    };
		    RUMOneLogger.rumOneLogger = null;
		    RUMOneLogger.CHECK_INTERVAL = 100; // in milliseconds
		    RUMOneLogger.ERROR_TIMEOUT = 30000; // in milliseconds
		    RUMOneLogger.MAX_MARKS = 50; // suppport maximum 50 perf markers
		    RUMOneLogger.KeyMetrics = ['EUPL', 'ScenarioId'];
		    return RUMOneLogger;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = RUMOneLogger;
	
	
	/***/ },
	/* 31 */
	/***/ function(module, exports) {
	
		"use strict";
		// OneDrive:IgnoreCodeCoverage
		var PageTransitionType;
		(function (PageTransitionType) {
		    PageTransitionType[PageTransitionType["none"] = 0] = "none";
		    PageTransitionType[PageTransitionType["fullPageLoad"] = 4] = "fullPageLoad";
		    PageTransitionType[PageTransitionType["onePageAppNavigation"] = 5] = "onePageAppNavigation";
		})(PageTransitionType || (PageTransitionType = {}));
		;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = PageTransitionType;
	
	
	/***/ },
	/* 32 */
	/***/ function(module, exports) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		//Intentionally Override the normal camel casing style to title casing style because the schema has to match exactly the server side schema which is Title casing.
		//Please do not change back to camel casing.
		var RUMOneSLAPI = (function () {
		    function RUMOneSLAPI() {
		        this.ServerCorrelationId = null;
		        this.ScenarioId = null;
		        this.EUPL = undefined;
		        this.ServerUrl = null;
		        this.Browser = null;
		        this.ClientIP = null;
		        this.UserAgent = null;
		        this.Flights = null;
		        this.PageTransitionType = undefined;
		        this.AppCache = undefined;
		        this.FolderNav = undefined;
		        this.InitiationTimeOffset = undefined;
		        this.ServerRequestDuration = undefined;
		        this.IISLatency = undefined;
		        this.TTFB = undefined;
		        this.TTLB = undefined;
		        this.ParseTime = undefined;
		        this.RenderTime = undefined;
		        this.Control1Id = null;
		        this.Control1RenderTime = undefined;
		        this.Control2Id = null;
		        this.Control2RenderTime = undefined;
		        this.Control3Id = null;
		        this.Control3RenderTime = undefined;
		        this.Control4Id = null;
		        this.Control4RenderTime = undefined;
		        this.SharePointRequestCountTotal = undefined;
		        this.SharePointRequestCountASPX = undefined;
		        this.SharePointRequestCountJS = undefined;
		        this.SharePointRequestCountCSS = undefined;
		        this.SharePointRequestCountIMG = undefined;
		        this.SharePointRequestCountNoneCached = undefined;
		        this.SharePointRequestBytes = undefined;
		        this.SharePointRequestDownloadTime = undefined;
		        this.CDNRequestCountTotal = undefined;
		        this.CDNRequestCountASPX = undefined;
		        this.CDNRequestCountJS = undefined;
		        this.CDNRequestCountCSS = undefined;
		        this.CDNRequestCountIMG = undefined;
		        this.CDNRequestCountNoneCached = undefined;
		        this.CDNRequestBytes = undefined;
		        this.CDNRequestDownloadTime = undefined;
		        this.ThirdPartyRequestCountTotal = undefined;
		        this.ThirdPartyRequestCountASPX = undefined;
		        this.ThirdPartyRequestCountJS = undefined;
		        this.ThirdPartyRequestCountCSS = undefined;
		        this.ThirdPartyRequestCountIMG = undefined;
		        this.ThirdPartyRequestCountNoneCached = undefined;
		        this.ThirdPartyRequestBytes = undefined;
		        this.ThirdPartyRequestDownloadTime = undefined;
		        this.FromEdge = undefined;
		        this.APICallCount = undefined;
		        this.APICallDurationSum = undefined;
		        this.PreRender = undefined;
		        this.DataFetch = undefined;
		        this.PostRender = undefined;
		        this.W3cNavigationStart = undefined;
		        this.W3cUnloadEventStart = undefined;
		        this.W3cUnloadEventEnd = undefined;
		        this.W3cFetchStart = undefined;
		        this.W3cRedirectStart = undefined;
		        this.W3cRedirectEnd = undefined;
		        this.W3cDomainLookupStart = undefined;
		        this.W3cDomainLookupEnd = undefined;
		        this.W3cConnectStart = undefined;
		        this.W3cSecureConnectStart = undefined;
		        this.W3cConnectEnd = undefined;
		        this.W3cRequestStart = undefined;
		        this.W3cResponseStart = undefined;
		        this.W3cResponseEnd = undefined;
		        this.W3cDomLoading = undefined;
		        this.W3cDomLoadEnd = undefined;
		        this.W3cLoadEventStart = undefined;
		        this.W3cLoadEventEnd = undefined;
		        this.MDSDownloadStart = undefined;
		        this.MDSParseDeltaStart = undefined;
		        this.MDSParseDeltaEnd = undefined;
		        this.MDSGCStart = undefined;
		        this.MDSGCEnd = undefined;
		        this.MDSCSSStart = undefined;
		        this.MDSCSSEnd = undefined;
		        this.MDSInnerHTMLStart = undefined;
		        this.MDSScriptLoaderStart = undefined;
		        this.MDSScriptLoaderEnd = undefined;
		        this.MDSAnimationStart = undefined;
		        this.MDSAnimationEnd = undefined;
		        this.MDSParallelDownloadStart = undefined;
		        this.MDSParallelDownloadEnd = undefined;
		        this.APICalls = undefined;
		        this.SharePointRequestNames = undefined;
		        this.CDNRequestNames = undefined;
		        this.ThirdPartyRequestNames = undefined;
		        this.EUPLBreakdown = undefined;
		        this.Control5Id = null;
		        this.Control5RenderTime = undefined;
		        this.Control6Id = null;
		        this.Control6RenderTime = undefined;
		        this.Control7Id = null;
		        this.Control7RenderTime = undefined;
		        this.Control8Id = null;
		        this.Control8RenderTime = undefined;
		        this.Control9Id = null;
		        this.Control9RenderTime = undefined;
		        this.Control10Id = null;
		        this.Control10RenderTime = undefined;
		        this.ServerMetrics = null;
		        this.Referrer = null;
		        this.BrowserIsMobile = undefined;
		    }
		    return RUMOneSLAPI;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = RUMOneSLAPI;
	
	
	/***/ },
	/* 33 */
	/***/ function(module, exports) {
	
		// OneDrive:IgnoreCodeCoverage
		//Intentionally Override the normal camel casing style to title casing style because the schema has to match exactly the server side schema which is Title casing.
		//Please do not change back to camel casing.
		"use strict";
		var RUMOneErrorsSLAPI = (function () {
		    function RUMOneErrorsSLAPI() {
		        this.Reason = null;
		        this.Message = null;
		    }
		    return RUMOneErrorsSLAPI;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = RUMOneErrorsSLAPI;
	
	
	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var SingleEventBase_1 = __webpack_require__(16);
		var RUMOneDataUpload = (function (_super) {
		    __extends(RUMOneDataUpload, _super);
		    /**
		     * The RUMOneDataUpload event constructor
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function RUMOneDataUpload(parent) {
		        _super.call(this, 'RUMOneDataUpload,', 'RUMOneDataUpload', parent);
		    }
		    /**
		     * This is true if the RUMOneDataUpload event is enabled
		     */
		    RUMOneDataUpload.enabled = function () {
		        return true;
		    };
		    /**
		     * This will create a single RUMOneDataUpload event
		     * @param data {IRUMOneDataUploadSingleSchema}
		     * -required streamName - SLAPI stream name the data will be logged to, must be either RUMOne or RUMOneErrors
		     * -required dictionary - Data of the RUMOne or RUMOneErrors
		     * @param parent {IEvent} The optional parent for this event
		     */
		    RUMOneDataUpload.logData = function (data, parent) {
		        return SingleEventBase_1.SingleEventBase._logData(RUMOneDataUpload, data, parent);
		    };
		    RUMOneDataUpload.prototype.setSingleData = function (data) {
		        this.data.streamName = this.cleanString(data.streamName);
		        this.data.dictionary = data.dictionary;
		    };
		    /**
		     * The name of the RUMOneDataUpload event
		     */
		    RUMOneDataUpload.fullName = 'RUMOneDataUpload,';
		    /**
		     * The short name of the RUMOneDataUpload event
		     */
		    RUMOneDataUpload.shortName = 'RUMOneDataUpload';
		    /**
		     * This is true if the RUMOneDataUpload event is enabled
		     */
		    RUMOneDataUpload.metadata = {
		        streamName: {
		            type: "String",
		            definedInName: "RUMOneDataUpload",
		            definedInFullName: "RUMOneDataUpload,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        dictionary: {
		            type: "Object",
		            definedInName: "RUMOneDataUpload",
		            definedInFullName: "RUMOneDataUpload,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        }
		    };
		    return RUMOneDataUpload;
		}(SingleEventBase_1.SingleEventBase));
		exports.RUMOneDataUpload = RUMOneDataUpload;
		RUMOneDataUpload.prototype.metadata = RUMOneDataUpload.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = RUMOneDataUpload;
	
	
	/***/ },
	/* 35 */
	/***/ function(module, exports) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		/**
		 * Use PlatformDetection to evaluate which user experience makes sense for the user's
		 * platform. NOTE: This class is NOT COMPLETE! Meaning not all values are parsed out of
		 * the user agent. If something is missing that you need, add it and add unit tests.
		 * WARNING: Avoid using browser checks when you can use detection techniques for caps checking.
		 */
		var PlatformDetection = (function () {
		    function PlatformDetection(agent) {
		        // OS checks
		        this.isWindows = false;
		        this.isWinPhone = false;
		        this.isMac = false;
		        this.isIOS = false;
		        this.isAndroid = false;
		        this.isWindows10 = false;
		        this.isWindows81 = false;
		        this.isWindows7 = false;
		        // Check to see if we are definitely on a mobile device.
		        this.isMobile = false;
		        // Browser boolean checks
		        this.isChrome = false;
		        this.isIE = false;
		        this.isIE9 = false;
		        this.isEdge = false;
		        this.isFirefox = false;
		        this.isSafari = false;
		        // Device information
		        this.isIPad = false;
		        this.browserMinor = '0';
		        this.browserMajor = 0;
		        this.areCSS3TransitionsSupported = true;
		        this.isHtml5FileUploadSupported = false;
		        this.isFolderUploadSupported = false;
		        this.isRetinaSupported = false;
		        this.isUnlimitedStyleSheetsSupported = false;
		        this.areTouchEventsSupported = false;
		        this.isWebDavSupported = false;
		        agent = agent || (window && window.navigator && navigator.userAgent) || '';
		        this.userAgent = agent;
		        agent = agent.toLowerCase();
		        // We want to figure out which ONE browser the user is most likely on.
		        // The order of the checks is important so we're not deceived by (for example)
		        // Chrome saying that it's Safari.
		        // (Each regular expression captures the version number so we can parse it later.)
		        var match;
		        if (match = /msie (\d+)([\d.]*)/.exec(agent)) {
		            // IE <= 10 has something like "MSIE 9" in the user agent.
		            // This is also what newer versions do in compatibility mode.
		            this.isIE = true;
		            if (/msie 9/.exec(agent)) {
		                this.isIE9 = true;
		            }
		        }
		        else if (match = /trident.*rv:(\d+)([\d.]*)/.exec(agent)) {
		            // This is IE 11. Sample user agent contains:
		            // Trident/7.0; other stuff... rv:11.0
		            this.isIE = true;
		        }
		        else if (match = /edge\/(\d+)([\d.]*)/.exec(agent)) {
		            // This is Edge (it pretends to be Chrome and Safari).
		            this.isEdge = true;
		        }
		        else if (match = /firefox\/(\d+)([\d.]*)|fxios/.exec(agent)) {
		            this.isFirefox = true;
		        }
		        else if (match = /(?:chrome|crios)\/(\d+)([\d.]*)/.exec(agent)) {
		            // Note: lots of random browsers say they're Chrome and will end up in this bucket
		            this.isChrome = true;
		        }
		        else if (match = /safari\/(\d+)/.exec(agent)) {
		            this.isSafari = true;
		            match = /version\/(\d+)([\d.]*)/.exec(agent);
		        }
		        // Some other browser categories:
		        //   IE Mobile: /iemobile\/(\d+)/
		        //   IE Mobile in desktop mode: contains WPDesktop; get version from Trident version
		        //   Opera (currently goes into Chrome bucket): /opr\/(\d+)/
		        // Parse the captured version number for user's browser.
		        if (match) {
		            this.browserMajor = parseInt(match[1], 10) || 0;
		            var browserMinorVersion = match[2];
		            if (browserMinorVersion) {
		                var minorStart = browserMinorVersion.indexOf('.');
		                if (minorStart >= 0 && minorStart < browserMinorVersion.length - 1) {
		                    this.browserMinor = browserMinorVersion.substr(minorStart + 1);
		                }
		            }
		        }
		        // Parse device which gives hints about os / mobile state.
		        // Windows Phone IE sometimes pretends to be Android, so explicitly check for Windows Phone first.
		        // (wpdesktop is used by Windows Phone in desktop mode.)
		        var deviceMatch = agent.match(/windows phone|wpdesktop/) || agent.match(/ipad|iphone|ipod|android/);
		        if (deviceMatch) {
		            var device = deviceMatch[0];
		            this.isWinPhone = device === 'windows phone' || device === 'wpdesktop';
		            this.isAndroid = device === 'android';
		            this.isIOS = device === 'ipad' || device === 'ipod' || device === 'iphone';
		            this.isIPad = device === 'ipad';
		            this.isMobile = this.isWinPhone || this.isAndroid || this.isIOS;
		        }
		        else {
		            this.isMac = agent.indexOf('macintosh') !== -1;
		            this.isWindows = agent.indexOf('windows nt') !== -1;
		            this.isWindows81 = /(windows 8\.1|windows nt 6\.3)/.test(agent) && !this.isWinPhone;
		            this.isWindows10 = agent.indexOf('windows nt 10') !== -1 && !this.isWinPhone;
		            this.isWindows7 = agent.indexOf('windows nt 6.1') !== -1 && !this.isWinPhone;
		        }
		        // Other operating systems:
		        //   Chrome OS: /cros/
		        //   Linux: /linux/ (Android can also say it's Linux, so check for Android first)
		        // WARNING: Avoid using browser checks when you can use detection techniques for caps checking.
		        this.isRetinaSupported = !!(window['devicePixelRatio'] && window.devicePixelRatio > 1);
		        var input = document.createElement("input");
		        input.type = "file";
		        this.isFolderUploadSupported = "webkitdirectory" in input;
		        this.isHtml5FileUploadSupported = !!(window['File'] && (window['File'].prototype.slice || window['File'].prototype.mozSlice || window['File'].prototype.webkitSlice));
		        this.isUnlimitedStyleSheetsSupported = !this._shouldUseCssText();
		        this.areTouchEventsSupported = 'ontouchstart' in window;
		        this.isWebDavSupported = 'addBehavior' in document.createElement('div');
		        if (this.isIE && this.browserMajor <= 9) {
		            this.areCSS3TransitionsSupported = false;
		        }
		        var osVersionMatch = /[\s\(](os|os x|windows phone|windows nt|android) ([\d._]+)/.exec(agent);
		        this.osVersion = osVersionMatch ? osVersionMatch[2] : "NA";
		        // Set browser name
		        if (this.isIE) {
		            this.browserName = "IE";
		        }
		        else if (this.isEdge) {
		            this.browserName = "Edge";
		        }
		        else if (this.isChrome) {
		            this.browserName = "Chrome";
		        }
		        else if (this.isFirefox) {
		            this.browserName = "Firefox";
		        }
		        else if (this.isSafari) {
		            this.browserName = "Safari";
		        }
		        else {
		            this.browserName = "NA";
		        }
		        if (this.isWindows) {
		            this.osName = "Windows";
		        }
		        else if (this.isWinPhone) {
		            this.osName = "Windows Phone";
		        }
		        else if (this.isMac) {
		            this.osName = "OSX";
		        }
		        else if (this.isIOS) {
		            this.osName = "IOS";
		        }
		        else if (this.isAndroid) {
		            this.osName = "Android";
		        }
		        else {
		            this.osName = "NA";
		        }
		    }
		    /**
		     * Checks to see if styleSheet exists as a property off of a style element.
		     * This will determine if style registration should be done via cssText (<= IE9) or not
		     */
		    PlatformDetection.prototype._shouldUseCssText = function () {
		        var emptyStyle = document.createElement("style");
		        emptyStyle.type = "text/css";
		        return !!emptyStyle["styleSheet"];
		    };
		    return PlatformDetection;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = PlatformDetection;
	
	
	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var ErrorHelper_1 = __webpack_require__(23);
		var BeaconBase_1 = __webpack_require__(37);
		var BeaconCache_1 = __webpack_require__(41);
		var BaseDataStore_1 = __webpack_require__(42);
		var DataStoreCachingType_1 = __webpack_require__(43);
		var LogProcessor_1 = __webpack_require__(44);
		var Beacon;
		(function (Beacon) {
		    "use strict";
		    var LOGGING_REQUEST_TIMEOUT = 10000; // 10 seconds
		    var FLUSH_TIMEOUT = 5000; // 5 seconds
		    var BEACON_BATCH_SIZE = 100;
		    var BEACON_MAX_CRITICAL_FLUSH_INTERVAL_SIZE = 5000; // 5 seconds
		    // SLAPI
		    var SLAPI_STREAM_ID = 1234;
		    var SLAPI_JSON_VERSION = "V1";
		    var SLAPI_IDX_VERSION = 0;
		    var SLAPI_IDX_EVENTNAME = 1;
		    var SLAPI_IDX_PROPERTY_START = 2;
		    // BSQM Constants
		    var SLAPI_MAX_DATA_SIZE = 64 * 1024;
		    var SLAPI_MAX_ROWS_IN_STREAM = 1000;
		    var SLAPI_SIZE_DWORD = 4;
		    var SLAPI_SIZE_DATAPOINT_ENTRY = 3 * 4;
		    var SLAPI_SIZE_STREAM_ENTRY = 3 * 4;
		    var SLAPI_MS_BTN_EPOCHS = 11644473600000; // Milliseconds between 1/1/1070 and 1/1/1601
		    var SLAPI_MAX_INT32 = 0xFFFFFFFF;
		    var SLAPI_MAX_SQM_DATAID = 0x7FFFFFFF;
		    var SLAPI_DATAKEY_SESSION_NORMAL = 0;
		    var SLAPI_DATAKEY_SESSION_CONTINUATION = 1;
		    var SLAPI_FLAG_BSQM_ENABLED = 0x00000010;
		    // const SLAPI_FLAG_QOS_ENABLED = 0x00000020;
		    // SQM Datapoints
		    var SLAPI_DATAID_BSQM_MAXSTREAMROWSSTREAMID = 8048;
		    var SLAPI_DATAID_BSQM_MAXSTREAMROWS = 7993;
		    var SLAPI_DATAID_SESSION_TYPE = 60;
		    var WSAStreamRow = (function () {
		        function WSAStreamRow(values) {
		            this.Tic = 0;
		            this.Vals = null;
		            var _this = this;
		            _this.Tic = _getTicks32();
		            var numValues = values.length;
		            _this.Vals = new Array(numValues);
		            for (var i = 0; i < numValues; i++) {
		                _this.Vals[i] = values[i];
		            }
		        }
		        return WSAStreamRow;
		    }());
		    var WSADatapoint = (function () {
		        function WSADatapoint(id, value) {
		            var _this = this;
		            _this.Id = id;
		            _this.Val = value;
		            _this.Tic = _getTicks32();
		        }
		        return WSADatapoint;
		    }());
		    var WSAStream = (function () {
		        function WSAStream(id, width) {
		            var _this = this;
		            _this.Id = id;
		            _this.Width = width;
		            _this.Rows = new Array(0);
		        }
		        return WSAStream;
		    }());
		    var WSAData = (function () {
		        function WSAData() {
		            this.StartTime = null;
		            this.EndTime = null;
		            this.Flags = 0;
		            this.wsaDatapoints = null;
		            this.wsaStreams = null;
		            var _this = this;
		            _this.StartTime = _getTicks64();
		            _this.EndTime = null;
		            _this.CorrelationId = null;
		            _this.Flags = SLAPI_FLAG_BSQM_ENABLED;
		            _this.wsaDatapoints = new Array(0);
		            _this.wsaStreams = new Array(0);
		        }
		        return WSAData;
		    }());
		    var _startTicks = 0;
		    var _wsaData = null;
		    var _numDatapoints = 0;
		    var _numStreams = 0;
		    var _numStreamBytes = 0;
		    var _dictStreams = null;
		    var _dictDatapoints = null;
		    var _streamRowCount = 0;
		    var _isDataAvailableForUpload = false;
		    var _isContinuation = false;
		    var _isInitialized = false;
		    var _emptyCorrelationId = '00000000-0000-0000-0000-000000000000';
		    var _eventNamePrefix = "";
		    var _store = null;
		    var _storeSize = null;
		    var _instance = null;
		    var _handlers = null;
		    if (true) {
		        try {
		            console.log("Beacon: To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window");
		        }
		        catch (error) {
		        }
		    }
		    var OdbBeacon = (function (_super) {
		        __extends(OdbBeacon, _super);
		        function OdbBeacon(eventNamePrefix, handlers, cacheEnabled, correlationId) {
		            _super.call(this, '/_layouts/15/WsaUpload.ashx', BEACON_BATCH_SIZE, [FLUSH_TIMEOUT], true, /* useSlidingWindow */ BEACON_MAX_CRITICAL_FLUSH_INTERVAL_SIZE, BeaconBase_1.default.DEFAULT_TOTAL_RETRIES, BeaconBase_1.default.DEFAULT_RESET_TOTAL_RETRIES_AFTER, cacheEnabled /* ignorePreviousEvents */);
		            _eventNamePrefix = eventNamePrefix;
		            _handlers = handlers;
		            _store = new BaseDataStore_1.default(LogProcessor_1.default.STORE_KEY,  true ? DataStoreCachingType_1.default.sharedMemory : DataStoreCachingType_1.default.session);
		            _storeSize = _store.getValue(LogProcessor_1.default.STORE_SIZE_KEY);
		            if (!_storeSize) {
		                _storeSize = 0;
		            }
		            if (correlationId) {
		                this._cid = correlationId;
		            }
		        }
		        OdbBeacon.prototype.beacon = function () {
		            if (false) {
		                var json = _getUploadData();
		                if (json != null && json.length > 0) {
		                    var headers = {};
		                    headers["Content-Type"] = "application/json";
		                    this.sendBeacon(json, headers, LOGGING_REQUEST_TIMEOUT);
		                }
		            }
		            else if (!window["disableBeaconLogToConsole"]) {
		                try {
		                    console.log("Beacon: Uploaded to COSMOS (To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window)");
		                }
		                catch (error) {
		                }
		            }
		            // Set session storage size to zero instead of clearing
		            _storeSize = 0;
		            _store.setValue(LogProcessor_1.default.STORE_SIZE_KEY, _storeSize);
		        };
		        OdbBeacon.prototype._createBeaconRequest = function (events) {
		            _SetCorrelationId(this._correlationId);
		            // Converts to SP logging format
		            for (var x = 0; x < events.length; x++) {
		                var event = events[x];
		                LogProcessor_1.default.processAndLogEvent({
		                    event: event,
		                    logFunc: function (streamName, dictProperties) {
		                        _WriteLog(streamName, dictProperties);
		                    },
		                    eventNamePrefix: _eventNamePrefix,
		                    handlers: _handlers
		                });
		            }
		            this.beacon();
		        };
		        OdbBeacon.prototype._onNewEvent = function (event) {
		            // BeaconCache puts every new event to the session storage so that Sharepoint can upload it for us
		            // if user navigates away before Beacon event. So we do nothing here.
		        };
		        Object.defineProperty(OdbBeacon.prototype, "_correlationId", {
		            get: function () {
		                // Avoid reading from the global variable if correlationId has been passed in.
		                // The _spPageContextInfo may not always exist.
		                if (this._cid) {
		                    return this._cid;
		                }
		                var spPageContextInfo = window['_spPageContextInfo'];
		                if (spPageContextInfo) {
		                    return spPageContextInfo.CorrelationId;
		                }
		                return _emptyCorrelationId;
		            },
		            enumerable: true,
		            configurable: true
		        });
		        return OdbBeacon;
		    }(BeaconBase_1.default));
		    function addToLoggingManager(eventNamePrefix, handlers, correlationId) {
		        if (!_instance) {
		            var cacheEnabled = false;
		            if (BeaconCache_1.default.instance) {
		                eventNamePrefix = BeaconCache_1.default.eventNamePrefix;
		                handlers = BeaconCache_1.default.handlers;
		                cacheEnabled = true;
		            }
		            if (!eventNamePrefix || !handlers) {
		                throw new Error("You have to pass in eventNamePrefix and IBeaconHandlers object if no BeaconCache present.");
		            }
		            _instance = new OdbBeacon(eventNamePrefix, handlers, cacheEnabled, correlationId);
		            // read any events Sharepoint (or BeaconCache) put into session storage but haven't uploaded
		            for (var i = 0; i < _storeSize; i++) {
		                var item = _store.getValue(i.toString());
		                if (!item || !item['name'] || !item['props']) {
		                    continue;
		                }
		                _WriteLog(item['name'], item['props']);
		            }
		        }
		        else {
		            throw new Error("The beacon has already been added to the logging manager with event name prefix " + _eventNamePrefix + ".");
		        }
		    }
		    Beacon.addToLoggingManager = addToLoggingManager;
		    function _initialize() {
		        if (_isInitialized) {
		            return;
		        }
		        _wsaData = new WSAData();
		        _dictStreams = new Array(0);
		        _dictDatapoints = new Array(0);
		        _createStream(SLAPI_STREAM_ID, 1);
		        _isInitialized = true;
		    }
		    function _createStream(streamId, width) {
		        if (!Boolean(_dictStreams[streamId])) {
		            var wsaStream = new WSAStream(streamId, width);
		            var idxStream = _numStreams;
		            _wsaData.wsaStreams[idxStream] = wsaStream;
		            _numStreams++;
		            _numStreamBytes += SLAPI_SIZE_STREAM_ENTRY;
		            _dictStreams[streamId] = idxStream;
		        }
		    }
		    function _addToStream(streamId, dictValues) {
		        try {
		            var wsaStreamRow = new WSAStreamRow(dictValues);
		            if (_isMaxSizeReachedCheck()) {
		                return;
		            }
		            _isDataAvailableForUpload = true;
		            _setDatapoint(SLAPI_DATAID_BSQM_MAXSTREAMROWSSTREAMID, streamId);
		            var wsaStream = _wsaData.wsaStreams[_dictStreams[streamId]];
		            if (Boolean(wsaStream)) {
		                if (_streamRowCount < SLAPI_MAX_ROWS_IN_STREAM) {
		                    wsaStream.Rows[_streamRowCount++] = wsaStreamRow;
		                    _numStreamBytes += _getTotalBytesForRow(wsaStreamRow);
		                    _setDatapoint(SLAPI_DATAID_BSQM_MAXSTREAMROWS, _streamRowCount); // update row count datapoint
		                }
		                else {
		                    throw ("Beacon: MAX_ROWS_IN_STREAM exceeded for stream ID " + String(streamId));
		                }
		            }
		        }
		        catch (e) {
		            ErrorHelper_1.default.log(e);
		        }
		    }
		    function _getTotalBytesForRow(row) {
		        var numTotalBytes = SLAPI_SIZE_DWORD;
		        for (var i = 0; i < row.Vals.length; i++) {
		            var value = String(row.Vals[i]);
		            numTotalBytes += value.length * 2; // A JavaScript char is 16 bit 2 byte
		        }
		        numTotalBytes += (row.Vals.length - 1) * 6; // plus the commas and quotes when serialized
		        return numTotalBytes;
		    }
		    function _setDatapoint(datapointId, datapointValue) {
		        if (datapointId < 1 || datapointId > SLAPI_MAX_SQM_DATAID) {
		            return;
		        }
		        if (datapointValue < 0 || datapointValue > SLAPI_MAX_INT32) {
		            return;
		        }
		        var savedDatapoint = null;
		        var idxDP = _dictDatapoints[datapointId];
		        if (Boolean(idxDP)) {
		            savedDatapoint = _wsaData.wsaDatapoints[idxDP];
		        }
		        if (savedDatapoint == null) {
		            var datapoint = new WSADatapoint(datapointId, datapointValue);
		            var idxDatapoint = _numDatapoints;
		            _wsaData.wsaDatapoints[idxDatapoint] = datapoint;
		            _dictDatapoints[datapointId] = idxDatapoint;
		            _numDatapoints++;
		        }
		        else {
		            savedDatapoint.Val = datapointValue;
		        }
		    }
		    function _uploadData() {
		        if (_wsaData == null) {
		            return "";
		        }
		        try {
		            if (_isDataAvailableForUpload) {
		                // Add final datapoints
		                if (Boolean(_isContinuation)) {
		                    _setDatapoint(SLAPI_DATAID_SESSION_TYPE, SLAPI_DATAKEY_SESSION_CONTINUATION);
		                }
		                else {
		                    _setDatapoint(SLAPI_DATAID_SESSION_TYPE, SLAPI_DATAKEY_SESSION_NORMAL);
		                    _isContinuation = true;
		                }
		                _wsaData.EndTime = _getTicks64();
		                var jsonString = null;
		                try {
		                    jsonString = JSON.stringify(_wsaData);
		                }
		                catch (e) {
		                    ErrorHelper_1.default.log(e);
		                }
		                // Initialize the session data for continuation session
		                _initContinuationSession();
		                return jsonString;
		            }
		        }
		        catch (e) {
		            ErrorHelper_1.default.log(e);
		            return "";
		        }
		    }
		    function _initContinuationSession() {
		        _dictStreams = new Array(0);
		        _dictDatapoints = new Array(0);
		        _numDatapoints = 0;
		        _numStreams = 0;
		        _streamRowCount = 0;
		        _numStreamBytes = 0;
		        _numDatapoints = 0;
		        var sessID = _wsaData.CorrelationId;
		        _wsaData = new WSAData();
		        _wsaData.CorrelationId = sessID;
		        _createStream(SLAPI_STREAM_ID, 1);
		        _isDataAvailableForUpload = false;
		    }
		    function _isMaxSizeReachedCheck() {
		        var size = _numDatapoints * SLAPI_SIZE_DATAPOINT_ENTRY + _numStreamBytes;
		        if (size >= SLAPI_MAX_DATA_SIZE) {
		            _instance.beacon();
		            size = _numDatapoints * SLAPI_SIZE_DATAPOINT_ENTRY + _numStreamBytes;
		            return size >= SLAPI_MAX_DATA_SIZE;
		        }
		        return false;
		    }
		    function _SetCorrelationId(correlationId) {
		        _initialize();
		        if (Boolean(_wsaData)) {
		            if (correlationId !== null && correlationId !== undefined) {
		                _wsaData.CorrelationId = correlationId;
		            }
		            else {
		                _wsaData.CorrelationId = _emptyCorrelationId;
		            }
		        }
		    }
		    function _WriteLog(eventName, dictProperties) {
		        _initialize();
		        if ((!Boolean(eventName)) || (!Boolean(dictProperties))) {
		            return;
		        }
		        if (false) {
		            var values = new Array(SLAPI_IDX_PROPERTY_START + 1);
		            values[SLAPI_IDX_VERSION] = SLAPI_JSON_VERSION;
		            values[SLAPI_IDX_EVENTNAME] = eventName;
		            var index = SLAPI_IDX_PROPERTY_START;
		            for (var key in dictProperties) {
		                var propVal = dictProperties[key];
		                if (propVal !== undefined && propVal !== null) {
		                    if (propVal instanceof Date) {
		                        propVal = propVal.getTime();
		                    }
		                    values[index++] = key;
		                    values[index++] = propVal;
		                }
		            }
		            _addToStream(SLAPI_STREAM_ID, values);
		        }
		        else if (!window["disableBeaconLogToConsole"]) {
		            try {
		                console.log("Beacon: Logged to " + eventName + " with properties: " + JSON.stringify(dictProperties));
		            }
		            catch (error) {
		            }
		        }
		    }
		    function _getUploadData() {
		        _initialize();
		        return _uploadData();
		    }
		    function _getTicks32() {
		        var timeNow = new Date();
		        var ticks64 = timeNow.getTime();
		        if (_startTicks === 0) {
		            _startTicks = ticks64;
		        }
		        return ((1 + ticks64 - _startTicks) & 0x7FFFFFFF);
		    }
		    function _getTicks64() {
		        var timeNow = new Date();
		        var ticks64 = timeNow.getTime();
		        ticks64 = ticks64 + SLAPI_MS_BTN_EPOCHS; // Epoch change from 1/1/1070 to 1/1/1601
		        ticks64 = ticks64 * 10000; // 1ms to 100ns resolution
		        return ticks64;
		    }
		})(Beacon || (Beacon = {}));
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Beacon;
	
	
	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var Manager_1 = __webpack_require__(10);
		var EventBatchCache_1 = __webpack_require__(38);
		var XHR_1 = __webpack_require__(40);
		var Beacon_event_1 = __webpack_require__(39);
		var BeaconBase = (function () {
		    function BeaconBase(endPointUrl, batchSize, flushTimeouts, useSlidingWindow, maxCriticalFlushInterval, totalRetries, resetTotalRetriesAfter, ignorePreviousEvents) {
		        var _this = this;
		        this._lastSendBeacon = 0;
		        this._endPointUrl = endPointUrl;
		        this._maxCriticalFlushInterval = maxCriticalFlushInterval;
		        this._totalRetries = totalRetries === undefined ? BeaconBase.DEFAULT_TOTAL_RETRIES : totalRetries;
		        this._totalRetriesStartValue = this._totalRetries;
		        this._resetTotalRetriesAfter = resetTotalRetriesAfter === undefined ? BeaconBase.DEFAULT_RESET_TOTAL_RETRIES_AFTER : resetTotalRetriesAfter;
		        this._ignorePreviousEvents = ignorePreviousEvents === undefined ? false : ignorePreviousEvents;
		        this._eventBatchCache = new EventBatchCache_1.default(batchSize, flushTimeouts, function (event) {
		            if (_this._onNewEvent) {
		                _this._onNewEvent(event);
		            }
		        }, function (events) {
		            // Create the beacon request
		            _this._createBeaconRequest(events);
		        }, useSlidingWindow);
		        this.init();
		    }
		    BeaconBase.prototype.sendBeacon = function (json, headers, requestTimeoutInMS) {
		        this._sendBeacon(json, headers, requestTimeoutInMS, 0);
		    };
		    BeaconBase.prototype._sendBeacon = function (json, headers, requestTimeoutInMS, retryCount) {
		        var _this = this;
		        if (retryCount === 0) {
		            this._lastSendBeacon = Manager_1.Manager.getTime();
		        }
		        var xhr = new XHR_1.default({
		            url: this._endPointUrl,
		            json: json,
		            headers: headers,
		            requestTimeoutInMS: requestTimeoutInMS
		        });
		        var beaconEvent = new Beacon_event_1.Beacon({
		            retryCount: retryCount,
		            totalRetries: this._totalRetries
		        });
		        xhr.start(function (xhr, status) {
		            beaconEvent.end({ status: status + '', success: true });
		            if (++_this._successfulLogRequests >= _this._resetTotalRetriesAfter) {
		                _this._successfulLogRequests = _this._resetTotalRetriesAfter;
		                _this._totalRetries = _this._totalRetriesStartValue;
		            }
		        }, function (xhr, status, timeout) {
		            _this._successfulLogRequests = 0;
		            beaconEvent.end({ status: status + '', success: false });
		            // Retry if we timed out since we failed
		            if (status === XHR_1.default.TIMEOUT_STATUS && _this._totalRetries > 0) {
		                _this._totalRetries--;
		                _this._sendBeacon(json, headers, requestTimeoutInMS, retryCount + 1);
		            }
		        });
		    };
		    BeaconBase.prototype.init = function () {
		        var _this = this;
		        var bufferedEvents = Manager_1.Manager.addLogHandler(function (event) {
		            _this.addEvent(event);
		        });
		        if (!this._ignorePreviousEvents) {
		            for (var x = 0; x < bufferedEvents.length; x++) {
		                this.addEvent(bufferedEvents[x]);
		            }
		        }
		    };
		    BeaconBase.prototype.addEvent = function (event) {
		        if (event.enabled) {
		            this._eventBatchCache.addEvent(event);
		            if (event.critical &&
		                (!this._lastSendBeacon ||
		                    Manager_1.Manager.getTime() - this._lastSendBeacon > this._maxCriticalFlushInterval)) {
		                this._eventBatchCache.flush();
		            }
		        }
		    };
		    BeaconBase.DEFAULT_TOTAL_RETRIES = 3;
		    BeaconBase.DEFAULT_RESET_TOTAL_RETRIES_AFTER = 3;
		    return BeaconBase;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = BeaconBase;
	
	
	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var Async_1 = __webpack_require__(28);
		var Beacon_event_1 = __webpack_require__(39);
		var ErrorHelper_1 = __webpack_require__(23);
		var EventBatchCache = (function () {
		    function EventBatchCache(maxSize, maxFlushTimes, newEventHandler, flushHandler, useSlidingWindow) {
		        this._events = [];
		        this._flushCount = 0;
		        this._async = new Async_1.default(this);
		        this._maxSize = maxSize;
		        this._newEventHandler = newEventHandler;
		        this._flushHandler = flushHandler;
		        this._maxFlushTimes = maxFlushTimes;
		        this._useSlidingWindow = useSlidingWindow;
		    }
		    EventBatchCache.prototype.addEvent = function (event) {
		        this._events.push(event);
		        if (this._newEventHandler) {
		            try {
		                this._newEventHandler(event);
		            }
		            catch (e) {
		                ErrorHelper_1.default.log(e);
		            }
		        }
		        // Dont create a timer for events that are of type beacon
		        if (Beacon_event_1.Beacon.isTypeOf(event)) {
		            return;
		        }
		        if (this._events.length >= this._maxSize) {
		            this.flush();
		        }
		        else {
		            this._setFlushTimeout(false);
		        }
		    };
		    EventBatchCache.prototype.flush = function () {
		        this._setFlushTimeout(true);
		    };
		    EventBatchCache.prototype._handleFlush = function () {
		        this._clearFlushTimeout();
		        if (this._events.length) {
		            this._flushHandler(this._events);
		            // Reset the events array
		            this._events = [];
		        }
		    };
		    EventBatchCache.prototype._clearFlushTimeout = function () {
		        if (this._flushTimeoutId) {
		            this._async.clearTimeout(this._flushTimeoutId);
		            this._flushTimeoutId = null;
		        }
		        if (this._immediateflushTimeoutId) {
		            this._async.clearTimeout(this._immediateflushTimeoutId);
		            this._immediateflushTimeoutId = null;
		        }
		    };
		    EventBatchCache.prototype._setFlushTimeout = function (immediate) {
		        var _this = this;
		        // if another immediate flush is already queued, disregard
		        if (!!this._immediateflushTimeoutId) {
		            return;
		        }
		        if (this._useSlidingWindow) {
		            this._clearFlushTimeout();
		            if (immediate) {
		                this._immediateflushTimeoutId = this._async.setTimeout(function () {
		                    _this._handleFlush();
		                }, 0);
		            }
		            else {
		                this._flushTimeoutId = this._async.setTimeout(function () {
		                    _this._handleFlush();
		                }, this._getFlushTime());
		            }
		        }
		        else {
		            if (immediate) {
		                if (!this._immediateflushTimeoutId) {
		                    this._immediateflushTimeoutId = this._async.setTimeout(function () {
		                        _this._handleFlush();
		                    }, 0);
		                }
		            }
		            else if (!this._flushTimeoutId) {
		                this._flushTimeoutId = this._async.setTimeout(function () {
		                    _this._handleFlush();
		                }, this._getFlushTime());
		            }
		        }
		    };
		    EventBatchCache.prototype._getFlushTime = function () {
		        if (this._flushCount < this._maxFlushTimes.length) {
		            var flushCount = this._flushCount;
		            this._flushCount++;
		            return this._maxFlushTimes[flushCount];
		        }
		        else {
		            return this._maxFlushTimes[this._maxFlushTimes.length - 1];
		        }
		    };
		    return EventBatchCache;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = EventBatchCache;
	
	
	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var PairedEventBase_1 = __webpack_require__(21);
		var Beacon = (function (_super) {
		    __extends(Beacon, _super);
		    /**
		     * The Beacon event constructor
		     * @param data {IBeaconStartSchema}
		     * -optional name - This is the status code returned
		     * -optional status - This is the status code returned
		     * -optional success - This is if the request was successful or not
		     * -required retryCount - This is the retry count for this request
		     * -required totalRetries - This is the number of total retries left
		     * -optional eventCount - This is the number of total events sent
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function Beacon(data, parent) {
		        _super.call(this, 'Beacon,', 'Beacon', data, parent);
		    }
		    /**
		     * This is true if the Beacon event is enabled
		     */
		    Beacon.enabled = function () {
		        return true;
		    };
		    /**
		     * This will end the Beacon event
		     * @param data {IBeaconEndSchema}
		     * -optional name - This is the status code returned
		     * -optional status - This is the status code returned
		     * -required success - This is if the request was successful or not
		     * -optional eventCount - This is the number of total events sent
		     */
		    Beacon.prototype.end = function (data) {
		        return this._end(data);
		    };
		    /**
		     * This writes verbose logs to memory to be uploaded if event ends with failure
		     */
		    Beacon.prototype.verbose = function (message) {
		        return this._verbose(message);
		    };
		    /**
		     * Sets a time limit for the scenario. A timeout result will be logged if no end happens in desired timeframe
		     */
		    Beacon.prototype.setTimeout = function (ms, data) {
		        return this._setTimeout(ms, data);
		    };
		    /**
		     * This is false when Beacon event does not require a parent event
		     */
		    Beacon.prototype.requiresParent = function () {
		        return false;
		    };
		    Beacon.prototype.setStartData = function (data) {
		        if (typeof data.name !== "undefined") {
		            this.data.name = this.cleanString(data.name);
		        }
		        if (typeof data.status !== "undefined") {
		            this.data.status = this.cleanString(data.status);
		        }
		        if (typeof data.success !== "undefined") {
		            this.data.success = data.success;
		        }
		        this.data.retryCount = data.retryCount;
		        this.data.totalRetries = data.totalRetries;
		        if (typeof data.eventCount !== "undefined") {
		            this.data.eventCount = data.eventCount;
		        }
		    };
		    Beacon.prototype.setEndData = function (data) {
		        if (typeof data.name !== "undefined") {
		            this.data.name = this.cleanString(data.name);
		        }
		        if (typeof data.status !== "undefined") {
		            this.data.status = this.cleanString(data.status);
		        }
		        this.data.success = data.success;
		        if (typeof data.eventCount !== "undefined") {
		            this.data.eventCount = data.eventCount;
		        }
		    };
		    /**
		     * The name of the Beacon event
		     */
		    Beacon.fullName = 'Beacon,';
		    /**
		     * The short name of the Beacon event
		     */
		    Beacon.shortName = 'Beacon';
		    /**
		     * This is true if the Beacon event is enabled
		     */
		    Beacon.metadata = {
		        name: {
		            type: "String",
		            definedInName: "Beacon",
		            definedInFullName: "Beacon,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        status: {
		            type: "String",
		            definedInName: "Beacon",
		            definedInFullName: "Beacon,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        success: {
		            type: "Boolean",
		            definedInName: "Beacon",
		            definedInFullName: "Beacon,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        retryCount: {
		            type: "Number",
		            definedInName: "Beacon",
		            definedInFullName: "Beacon,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        totalRetries: {
		            type: "Number",
		            definedInName: "Beacon",
		            definedInFullName: "Beacon,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        eventCount: {
		            type: "Number",
		            definedInName: "Beacon",
		            definedInFullName: "Beacon,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        }
		    };
		    return Beacon;
		}(PairedEventBase_1.PairedEventBase));
		exports.Beacon = Beacon;
		Beacon.prototype.metadata = Beacon.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Beacon;
	
	
	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var Async_1 = __webpack_require__(28);
		var ErrorHelper_1 = __webpack_require__(23);
		var ObjectUtil_1 = __webpack_require__(11);
		var XHR = (function () {
		    function XHR(options) {
		        this._async = new Async_1.default(this);
		        this._url = options.url;
		        this._requestTimeoutInMS = options.requestTimeoutInMS || XHR.DEFAULT_TIMEOUT_MS;
		        this._json = options.json;
		        this._headers = options.headers || {};
		        this._method = options.method;
		        this._withCredentials = options.withCredentials || false;
		        this._needsCors = options.needsCors;
		    }
		    XHR.prototype.abort = function (isCancelled) {
		        var aborted = this._abortRequest();
		        if (aborted && !isCancelled) {
		            this._callFailureCallback(this._request, XHR.ABORT_STATUS, false);
		        }
		    };
		    XHR.prototype.start = function (successCallback, failureCallback) {
		        var _this = this;
		        try {
		            this._successCallback = successCallback;
		            this._failureCallback = failureCallback;
		            this._request = this._getRequest();
		            this._async.setTimeout(function () {
		                // Check if we havent logged this event already
		                if (!_this._completed) {
		                    _this._timeoutCallback();
		                }
		            }, this._requestTimeoutInMS);
		            // Report Qos on the actual qos calls
		            this._request.onreadystatechange = function () {
		                // Check if we havent logged this event in a timeout
		                if (!_this._completed) {
		                    var DONE = 4; // Default done readystate
		                    try {
		                        DONE = _this._request.DONE || 4;
		                    }
		                    catch (e) {
		                    }
		                    if (_this._request.readyState === DONE) {
		                        _this._requestEndCallback();
		                    }
		                }
		            };
		            if (!this._method) {
		                this._method = this._json ? 'POST' : 'GET';
		            }
		            this._request.open(this._method, this._url, true);
		            if ("withCredentials" in this._request) {
		                this._request.withCredentials = this._withCredentials;
		            }
		            // Headers have to be set after open is called
		            for (var x in this._headers) {
		                this._request.setRequestHeader(x, this._headers[x]);
		            }
		            this._request.send(this._json);
		        }
		        catch (e) {
		            ErrorHelper_1.default.logError(e, {
		                origin: location ? location.origin : 'unknown',
		                withCredentials: this._withCredentials,
		                requestUrl: this._url,
		                headers: ObjectUtil_1.default.safeSerialize(this._headers),
		                method: this._method
		            });
		            // abort the request and set the exception status code
		            this._abortRequest();
		            this._callFailureCallback(this._request, XHR.EXCEPTION_STATUS, false);
		        }
		    };
		    XHR.prototype._getRequest = function () {
		        var _this = this;
		        if (!this._needsCors || !window['XDomainRequest']) {
		            return new XMLHttpRequest();
		        }
		        // This is only needed for IE 9 to support CORS requests
		        // Note: we can not set headers on XDomainRequest
		        var request = new XDomainRequest();
		        request.setRequestHeader = function () { };
		        request.onprogress = function () { };
		        request.ontimeout = function () { };
		        request.onload = function () {
		            _this._requestEndCallback();
		        };
		        return request;
		    };
		    XHR.prototype._abortRequest = function () {
		        var actuallyAborted = false;
		        if (!this._completed) {
		            this._completed = true;
		            // Clear the timeout for the request
		            this._async.dispose();
		            // Cancel the request
		            try {
		                if (this._request) {
		                    this._request.abort();
		                }
		            }
		            catch (e) {
		            }
		            actuallyAborted = true;
		        }
		        return actuallyAborted;
		    };
		    XHR.prototype._timeoutCallback = function () {
		        if (!this._completed) {
		            this._abortRequest();
		            this._callFailureCallback(this._request, XHR.TIMEOUT_STATUS, true);
		        }
		    };
		    XHR.prototype._callSuccessCallback = function (xhr, statusCode) {
		        try {
		            if (this._successCallback) {
		                this._successCallback(xhr, statusCode);
		            }
		        }
		        catch (e) {
		            ErrorHelper_1.default.log(e);
		        }
		    };
		    XHR.prototype._callFailureCallback = function (xhr, statusCode, timeout) {
		        try {
		            if (this._failureCallback) {
		                this._failureCallback(xhr, statusCode, timeout);
		            }
		        }
		        catch (e) {
		            ErrorHelper_1.default.log(e);
		        }
		    };
		    XHR.prototype._requestEndCallback = function () {
		        if (!this._completed) {
		            this._completed = true;
		            var status = XHR.EXCEPTION_STATUS;
		            try {
		                // Clear the timeout for the request
		                this._async.dispose();
		                try {
		                    status = this._request.status;
		                }
		                catch (e) {
		                }
		            }
		            catch (e) {
		                status = XHR.EXCEPTION_STATUS;
		                ErrorHelper_1.default.log(e);
		            }
		            if (status < 400 && status > 0) {
		                this._callSuccessCallback(this._request, status);
		            }
		            else {
		                this._callFailureCallback(this._request, status, false);
		            }
		        }
		    };
		    XHR.EXCEPTION_STATUS = -1;
		    XHR.TIMEOUT_STATUS = -2;
		    XHR.ABORT_STATUS = -3;
		    XHR.DEFAULT_TIMEOUT_MS = 30000;
		    return XHR;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = XHR;
	
	
	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var BaseDataStore_1 = __webpack_require__(42);
		var DataStoreCachingType_1 = __webpack_require__(43);
		var Manager_1 = __webpack_require__(10);
		var LogProcessor_1 = __webpack_require__(44);
		var BeaconCache;
		(function (BeaconCache) {
		    "use strict";
		    var _store = new BaseDataStore_1.default(LogProcessor_1.default.STORE_KEY,  true ? DataStoreCachingType_1.default.sharedMemory : DataStoreCachingType_1.default.session);
		    BeaconCache.eventNamePrefix = "";
		    BeaconCache.instance = null;
		    BeaconCache.handlers = null;
		    if (true) {
		        try {
		            console.log("Beacon: To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window");
		        }
		        catch (error) {
		        }
		    }
		    var OdbBeaconCache = (function () {
		        function OdbBeaconCache(eventNamePrefix, handlers) {
		            var _this = this;
		            BeaconCache.eventNamePrefix = eventNamePrefix;
		            BeaconCache.handlers = handlers;
		            var bufferedEvents = Manager_1.Manager.addLogHandler(function (event) {
		                _this.addEvent(event);
		            });
		            // Add bufferred events to local store
		            for (var x = 0; x < bufferedEvents.length; x++) {
		                this.addEvent(bufferedEvents[x]);
		            }
		        }
		        OdbBeaconCache.prototype.addEvent = function (event) {
		            if (event.enabled) {
		                // put every new event to the session storage so that Sharepoint can upload it for us
		                // if user navigates away before Beacon event
		                LogProcessor_1.default.processAndLogEvent({
		                    event: event,
		                    logFunc: function (streamName, dictProperties) {
		                        var storeSize = _store.getValue(LogProcessor_1.default.STORE_SIZE_KEY);
		                        if (!storeSize) {
		                            storeSize = 0;
		                        }
		                        _store.setValue(storeSize.toString(), { name: streamName, props: dictProperties });
		                        _store.setValue(LogProcessor_1.default.STORE_SIZE_KEY, ++storeSize);
		                    },
		                    eventNamePrefix: BeaconCache.eventNamePrefix,
		                    handlers: BeaconCache.handlers
		                });
		            }
		        };
		        return OdbBeaconCache;
		    }());
		    function addToLoggingManager(eventNamePrefix, handlers) {
		        if (!BeaconCache.instance) {
		            BeaconCache.instance = new OdbBeaconCache(eventNamePrefix, handlers);
		        }
		        else {
		            throw new Error("The beaconCache has already been added to the logging manager with event name prefix " + eventNamePrefix + ".");
		        }
		    }
		    BeaconCache.addToLoggingManager = addToLoggingManager;
		})(BeaconCache || (BeaconCache = {}));
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = BeaconCache;
	
	
	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var DataStoreCachingType_1 = __webpack_require__(43);
		// DataStore class is used for transparent caching of data in memory and/or browser storage
		// - Parameter defaultCachingType defines whether you want to use browser storage for all operations
		// and which type of storage - session or local
		// - Parameter dataStoreKey is used to prefix every key in browser storage. Actual key for browser storage
		// will be dataStoreKey + key used in setValue method.
		// - If DataStore is instantiated with some type of browser caching enabled - it will test if browser storage
		// is available and use it. If it's not it will fall back to in-memory cache.
		// - If DataStore is instantiated from two different places with same dataStoreKey and some type of
		// browser storage caching, the memory storage will be shared as well as browser storage.
		var DataStore = (function () {
		    function DataStore(dataStoreKey, defaultCachingType) {
		        if (defaultCachingType === void 0) { defaultCachingType = DataStoreCachingType_1.default.none; }
		        DataStore.init();
		        this.dataStoreKey = dataStoreKey;
		        this.defaultCachingType = defaultCachingType;
		        if (defaultCachingType === DataStoreCachingType_1.default.none) {
		            this.dataStore = {};
		        }
		        else {
		            var store = DataStore._dataStore[this.dataStoreKey];
		            if (store === undefined) {
		                DataStore._dataStore[this.dataStoreKey] = {};
		            }
		            this.dataStore = DataStore._dataStore[this.dataStoreKey];
		        }
		    }
		    DataStore.hasStorageType = function (storageType) {
		        DataStore.init();
		        switch (storageType) {
		            case DataStoreCachingType_1.default.none: return true;
		            case DataStoreCachingType_1.default.sharedMemory: return true;
		            case DataStoreCachingType_1.default.session: return !!DataStore._sessionStorage;
		            case DataStoreCachingType_1.default.local: return !!DataStore._localStorage;
		        }
		        return false;
		    };
		    DataStore.init = function () {
		        if (DataStore._initialized) {
		            return;
		        }
		        // Need a try/catch since window.localStorage can throw.
		        try {
		            if ('localStorage' in window && window.localStorage && DataStore.testStorage(window.localStorage)) {
		                DataStore._localStorage = window.localStorage;
		            }
		        }
		        catch (exUsingLocalStorage) {
		        }
		        try {
		            if ('sessionStorage' in window && window.sessionStorage && DataStore.testStorage(window.sessionStorage)) {
		                DataStore._sessionStorage = window.sessionStorage;
		            }
		        }
		        catch (exUsingSessionStorage) {
		        }
		        // Fallback logic
		        if (DataStore._localStorage == null) {
		            DataStore._localStorage = DataStore._sessionStorage;
		        }
		        DataStore._initialized = true;
		    };
		    /** Need to check whether the value in localStorage is of the correct type.
		     * In Private Browsing in Safari, for example, localStorage is accessible,
		     * but all of the non-built-in properties return undefined, and setting
		     * such a property causes an exception.
		     */
		    DataStore.testStorage = function (storage) {
		        var _testKey = "BrowserStorageTest";
		        var _testValue = "1";
		        var result = false;
		        try {
		            storage.setItem(_testKey, _testValue);
		            if (storage.getItem(_testKey) === _testValue) {
		                result = true;
		            }
		            storage.removeItem(_testKey);
		        }
		        catch (e) { }
		        return result;
		    };
		    DataStore.prototype.setValue = function (key, value, cachingTypeOverride, normalizeKey) {
		        if (normalizeKey === void 0) { normalizeKey = true; }
		        key = normalizeKey ? this.normalizeKey(key) : key;
		        this.dataStore[key] = value;
		        var storage = this.getStorage(cachingTypeOverride);
		        if (storage) {
		            try {
		                var objectsFound = [];
		                var s = JSON.stringify(value, function (key, value) {
		                    if (typeof value === 'object' && value !== null) {
		                        if (objectsFound.indexOf(value) !== -1) {
		                            // discard the key if circular dependency was found
		                            return;
		                        }
		                        // Otherwise store value in the cache
		                        objectsFound.push(value);
		                    }
		                    return value;
		                });
		                // empty cache
		                objectsFound = null;
		                storage.setItem(this.dataStoreKey + key, s);
		            }
		            catch (e) {
		            }
		        }
		    };
		    DataStore.prototype.getValue = function (key, cachingTypeOverride, normalizeKey) {
		        if (normalizeKey === void 0) { normalizeKey = true; }
		        key = normalizeKey ? this.normalizeKey(key) : key;
		        var value = this.dataStore[key];
		        var storage = this.getStorage(cachingTypeOverride);
		        if (value === undefined && storage) {
		            var s = storage.getItem(this.dataStoreKey + key);
		            if (s) {
		                try {
		                    value = JSON.parse(s);
		                    this.dataStore[key] = value;
		                }
		                catch (e) {
		                    value = undefined;
		                }
		            }
		        }
		        return value;
		    };
		    DataStore.prototype.remove = function (key, cachingTypeOverride, normalizeKey) {
		        if (normalizeKey === void 0) { normalizeKey = true; }
		        key = normalizeKey ? this.normalizeKey(key) : key;
		        var storage = this.getStorage(cachingTypeOverride);
		        if (storage) {
		            storage.removeItem(this.dataStoreKey + key);
		        }
		        delete this.dataStore[key];
		    };
		    DataStore.prototype.getStorage = function (cachingTypeOverride) {
		        var cachingType = cachingTypeOverride ? cachingTypeOverride : this.defaultCachingType;
		        switch (cachingType) {
		            case DataStoreCachingType_1.default.none:
		                return null;
		            case DataStoreCachingType_1.default.sharedMemory:
		                return null;
		            case DataStoreCachingType_1.default.session:
		                return DataStore._sessionStorage;
		            case DataStoreCachingType_1.default.local:
		                return DataStore._localStorage;
		        }
		        return null;
		    };
		    DataStore.prototype.normalizeKey = function (key) {
		        return key && key.toLowerCase() || '';
		    };
		    DataStore._sessionStorage = null;
		    DataStore._localStorage = null;
		    DataStore._dataStore = {};
		    DataStore._initialized = false;
		    return DataStore;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = DataStore;
	
	
	/***/ },
	/* 43 */
	/***/ function(module, exports) {
	
		"use strict";
		var DataStoreCachingType;
		(function (DataStoreCachingType) {
		    DataStoreCachingType[DataStoreCachingType["none"] = 0] = "none";
		    DataStoreCachingType[DataStoreCachingType["session"] = 1] = "session";
		    DataStoreCachingType[DataStoreCachingType["local"] = 2] = "local";
		    DataStoreCachingType[DataStoreCachingType["sharedMemory"] = 3] = "sharedMemory";
		})(DataStoreCachingType || (DataStoreCachingType = {}));
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = DataStoreCachingType;
	
	
	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var Qos_event_1 = __webpack_require__(20);
		var PLT_event_1 = __webpack_require__(45);
		var Beacon_event_1 = __webpack_require__(39);
		var UnhandledError_event_1 = __webpack_require__(46);
		var RequireJSError_event_1 = __webpack_require__(47);
		var CaughtError_event_1 = __webpack_require__(24);
		var QosError_event_1 = __webpack_require__(25);
		var Verbose_event_1 = __webpack_require__(26);
		var Engagement_event_1 = __webpack_require__(15);
		var EventBase_1 = __webpack_require__(9);
		var RUMOneDataUpload_event_1 = __webpack_require__(34);
		var DebugPriorityLevel_1 = __webpack_require__(48);
		var LogProcessor;
		(function (LogProcessor) {
		    "use strict";
		    LogProcessor.STORE_KEY = "SPCacheLogger";
		    LogProcessor.STORE_SIZE_KEY = "Size";
		    var SOURCE_V2_Engagement = "ClientV2Engagement";
		    var DEBUG_LOG_STREAM = "ReliabilityLog";
		    var USER_ENGAGEMENT_STREAM = "UserEngagement";
		    var SOURCE_V2_Reliability = "ClientV2Reliability";
		    // regex for SLAPI event names
		    var SLAPI_EVENT_NAME_ALLOW = /[^a-z0-9\.\_\-\+]+/ig;
		    var _spModuleLink = window['_spModuleLink'];
		    var _appVersion = _spModuleLink ? _spModuleLink.buildNumber : "";
		    function processAndLogEvent(params) {
		        // Ignored events
		        if (params.handlers.ignoredEventsHandler && params.handlers.ignoredEventsHandler(params.event)) {
		            return;
		        }
		        // Get the data to log
		        var logDataArray = Engagement_event_1.Engagement.isTypeOf(params.event) ? _processEngagementEvent(params.event) :
		            Qos_event_1.Qos.isTypeOf(params.event) ? _processQosEvent(params.event, params.handlers.qosEventNameHandler || null, params.handlers.qosEventExtraDataHandler || null) :
		                PLT_event_1.PLT.isTypeOf(params.event) ? _processPLTEvent(params.event) :
		                    UnhandledError_event_1.UnhandledError.isTypeOf(params.event) ? _processUnhandledErrorEvent(params.event) :
		                        RequireJSError_event_1.RequireJSError.isTypeOf(params.event) ? _processRequireJSErrorEvent(params.event) :
		                            CaughtError_event_1.CaughtError.isTypeOf(params.event) ? _processCaughtErrorEvent(params.event) :
		                                Verbose_event_1.Verbose.isTypeOf(params.event) ? _processVerboseEvent(params.event) :
		                                    Beacon_event_1.Beacon.isTypeOf(params.event) ? _processBeaconEvent(params.event) :
		                                        RUMOneDataUpload_event_1.RUMOneDataUpload.isTypeOf(params.event) ? _processRUMOneDataUploadEvent(params.event) :
		                                            null;
		        // If the log data array is not defined the event was unhandled, log
		        // the event name so is easy to discover and fix
		        if (!logDataArray) {
		            logDataArray = [{
		                    userEngagementData: {
		                        EngagementName: "UnknownEvent",
		                        Duration: 0,
		                        LogType: 0,
		                        Properties: JSON.stringify({ name: params.event.eventName }),
		                        ClientTime: params.event.eventType === EventBase_1.ClonedEventType.End ? params.event.endTime : params.event.startTime,
		                        Source: SOURCE_V2_Engagement
		                    }
		                }];
		        }
		        // Log all the data in the array adding the event prefix to the tag/name
		        for (var index = 0, length = logDataArray.length; index < length; index++) {
		            var logData = logDataArray[index];
		            if (logData.debugData) {
		                logData.debugData.Tag = _addEventPrefix(logData.debugData.Tag, params.eventNamePrefix).replace(SLAPI_EVENT_NAME_ALLOW, "");
		                params.logFunc(DEBUG_LOG_STREAM, logData.debugData);
		            }
		            if (logData.userEngagementData) {
		                // SPList: special case for Engagement events
		                // set prefix to the name of the list type
		                // to be able to track usage/engagement by list type
		                var prefix = params.eventNamePrefix;
		                if (Engagement_event_1.Engagement.isTypeOf(params.event) && prefix === 'SPList') {
		                    // prefix will be set to a list type based on list base template
		                    // if list type not found, [refix will be set back to generic SPList
		                    prefix = _getScenarioNameFromListType();
		                }
		                logData.userEngagementData.EngagementName = _addEventPrefix(logData.userEngagementData.EngagementName, prefix).replace(SLAPI_EVENT_NAME_ALLOW, "");
		                // SPList: special case for Qos events; add listBaseTemplate ID to the property bag
		                if (Qos_event_1.Qos.isTypeOf(params.event) && params.eventNamePrefix === 'SPList') {
		                    params.event.data.extraData["ListBaseTemplate"] = _getListBaseTemplate();
		                }
		                params.logFunc(USER_ENGAGEMENT_STREAM, logData.userEngagementData);
		            }
		            if (logData.rumOneData) {
		                params.logFunc(logData.rumOneData.streamName, logData.rumOneData.dictionary);
		            }
		        }
		    }
		    LogProcessor.processAndLogEvent = processAndLogEvent;
		    // get the list base template id
		    function _getListBaseTemplate() {
		        var listTemplate = -1;
		        var spPageContextInfo = window['_spPageContextInfo'];
		        if (spPageContextInfo !== undefined && spPageContextInfo !== null) {
		            listTemplate = spPageContextInfo.listBaseTemplate;
		        }
		        return listTemplate;
		    }
		    // get the name of the listType; it's SPList for the unrecognized
		    // list templates; TODO: add all templates
		    function _getScenarioNameFromListType() {
		        var scenarioName = "";
		        var listTemplate = _getListBaseTemplate();
		        switch (listTemplate) {
		            case 100:
		                scenarioName = "ListNext";
		                break;
		            case 101:
		                scenarioName = "DocsNext";
		                break;
		            case 102:
		                scenarioName = "SurveyNext";
		                break;
		            case 103:
		                scenarioName = "LinksNext";
		                break;
		            case 104:
		                scenarioName = "AnnouncementsNext";
		                break;
		            case 107:
		                scenarioName = "TasksNext";
		                break;
		            case 109:
		                scenarioName = "PicLibNext";
		                break;
		            default:
		                scenarioName = "SPList";
		                break;
		        }
		        return scenarioName;
		    }
		    // string examples: "{\"w3cResponseEnd\":2", "\"appStart\":750"
		    function _cleanString(dataPLT) {
		        var cleanString = dataPLT;
		        cleanString = cleanString.replace("{", "");
		        cleanString = cleanString.replace(/\"/gi, "");
		        cleanString = cleanString.replace("}", "");
		        return cleanString;
		    }
		    function _addEventPrefix(eventName, prefix) {
		        if (!prefix) {
		            return eventName;
		        }
		        return prefix + '.' + eventName;
		    }
		    function _getResultTypeSuffix(resultType) {
		        if (resultType === Qos_event_1.ResultTypeEnum.Success) {
		            return ".Success";
		        }
		        else if (resultType === Qos_event_1.ResultTypeEnum.Failure) {
		            return ".Failure";
		        }
		        else if (resultType === Qos_event_1.ResultTypeEnum.ExpectedFailure) {
		            return ".ExpectedFailure";
		        }
		        return "";
		    }
		    function _processRUMOneDataUploadEvent(event) {
		        if (!event.data) {
		            return [{
		                    userEngagementData: {
		                        EngagementName: "RUMOne.no_EventData",
		                        Duration: 0,
		                        LogType: 0,
		                        ClientTime: event.startTime,
		                        Source: SOURCE_V2_Engagement
		                    }
		                }];
		        }
		        var rumOneDataUpdateEventData = event.data;
		        return [{
		                rumOneData: {
		                    streamName: rumOneDataUpdateEventData.streamName,
		                    dictionary: rumOneDataUpdateEventData.dictionary
		                }
		            }];
		    }
		    function _processEngagementEvent(event) {
		        var logDataList = [];
		        // if the event has not data we will get this in COSMOS
		        // if it's a start we have only the name and append ".Start" to it
		        // else we look for resultCode and append it to data.name with result type
		        // if resultCode is not present than we append only the result type to the name
		        // i.e. serverDataGetValue.Start OR serverDataGetValue.ResponseText.GetAuth.ExpectedFailure
		        var name = "no_EngagementName";
		        var properties = "";
		        if (event.data) {
		            var engagementData = event.data;
		            if (engagementData.name) {
		                name = engagementData.name;
		            }
		            // if there is an experimentData object, it means there is an experiment so create and log a new tag for it
		            // put all the experiment data in the properties bag;
		            if (engagementData.experiment) {
		                var abExperiment = engagementData.experiment;
		                var experimentData = abExperiment.GetExperimentData();
		                logDataList.push({ userEngagementData: {
		                        EngagementName: _getExperimentEventName(experimentData, abExperiment.IsExperimentOn()),
		                        Properties: JSON.stringify(experimentData),
		                        Duration: 0,
		                        LogType: 0,
		                        ClientTime: event.startTime,
		                        Source: SOURCE_V2_Engagement
		                    } });
		            }
		            // put the extraData in the properties bag
		            properties = engagementData.extraData ? JSON.stringify(engagementData.extraData) : "";
		        }
		        logDataList.push({ userEngagementData: {
		                EngagementName: name,
		                Properties: properties,
		                Duration: 0,
		                LogType: 0,
		                ClientTime: event.startTime,
		                Source: SOURCE_V2_Engagement
		            } });
		        return logDataList;
		    }
		    function _getExperimentEventName(experimentData, isOn) {
		        var name = (experimentData.name ? experimentData.name : 'noExperimentData') +
		            '.Experiment' +
		            (isOn ? 'ON' : 'OFF');
		        return name;
		    }
		    function _processQosEvent(event, qoSEventNameHandler, qosEventExtraDataHandler) {
		        var logData = {};
		        // if the event has not data we will get this in COSMOS
		        // if it's a start we have only the name and append ".Start" to it
		        // else we look for resultCode and append it to data.name with result type
		        // if resultCode is not present than we append only the result type to the name
		        // i.e. serverDataGetValue.ResponseText.Success OR serverDataGetValue.ResponseText.GetAuth.ExpectedFailure
		        var name = "no_QosName";
		        var qosData = event.data ? event.data : null;
		        if (qosData) {
		            if (qosData.name) {
		                name = qosData.name;
		            }
		            if (qoSEventNameHandler != null) {
		                name = qoSEventNameHandler(event, name);
		            }
		            qosData.extraData = qosData.extraData || {};
		            if (qosEventExtraDataHandler != null) {
		                qosEventExtraDataHandler(event, qosData);
		            }
		            qosData.extraData["appver"] = _appVersion;
		        }
		        // Duration is calculated only when we have an END event
		        var durationTime;
		        if (event.eventType === EventBase_1.ClonedEventType.End && event.startTime && event.endTime) {
		            durationTime = event.endTime - event.startTime;
		        }
		        else {
		            durationTime = 0;
		        }
		        logData.userEngagementData = {
		            EngagementName: name,
		            Properties: qosData && qosData.extraData ? JSON.stringify(qosData.extraData) : "",
		            Duration: durationTime,
		            LogType: 0,
		            ClientTime: event.eventType === EventBase_1.ClonedEventType.End ? event.endTime : event.startTime,
		            Source: SOURCE_V2_Reliability
		        };
		        return [logData];
		    }
		    function _processBeaconEvent(event) {
		        var logData = {};
		        var durationTime;
		        if (event.eventType === EventBase_1.ClonedEventType.End && event.startTime && event.endTime) {
		            durationTime = event.endTime - event.startTime;
		        }
		        else {
		            durationTime = 0;
		        }
		        logData.userEngagementData = {
		            EngagementName: "Beacon",
		            Properties: event.data ? JSON.stringify(event.data) : "no_EventData",
		            Duration: durationTime,
		            LogType: 0,
		            ClientTime: event.eventType === EventBase_1.ClonedEventType.End ? event.endTime : event.startTime,
		            Source: SOURCE_V2_Reliability
		        };
		        return [logData];
		    }
		    function _processPLTEvent(event) {
		        if (!event.data) {
		            return [{
		                    userEngagementData: {
		                        EngagementName: "PLT.no_EventData",
		                        Duration: 0,
		                        LogType: 0,
		                        ClientTime: event.startTime,
		                        Source: SOURCE_V2_Engagement
		                    }
		                }];
		        }
		        var logDataList = [];
		        //get the data for this event
		        var pltData = event.data;
		        // this will be the prefix for the tags; i.e. PLT.SetView-Files.w3cResponseEnd
		        var name = "PLT." + pltData.name.replace(" ", "");
		        // break down the PLT data and log each one as a separate record in the stream
		        //{"name":"SetView-Files","w3cResponseEnd":424,"appStart":254,"preRender":20,"dataFetch":310,"postRender":327,"render":347,"plt":1335}
		        var dataPLT = JSON.stringify(pltData).split(',');
		        var duration = 0;
		        // iterate through data and extract each type
		        // create tags like this: PLT.<pagename>.w3cResponseEnd; PLT.<pagename>.appStart
		        for (var i = 0; i < dataPLT.length; i++) {
		            var cleanedPLTString = _cleanString(dataPLT[i]);
		            // split the string and get the name and duration
		            // special case for duration when appCacheHit is a boolean
		            var subDataPLTs = cleanedPLTString.split(':');
		            // skip the 'name' key-value pair
		            if (_cleanString(subDataPLTs[1]) !== pltData.name) {
		                if (subDataPLTs[1] === 'true') {
		                    duration = 1;
		                }
		                else if (subDataPLTs[1] === 'false' || subDataPLTs[1] === 'null') {
		                    duration = 0;
		                }
		                else {
		                    duration = parseInt(subDataPLTs[1], 10);
		                }
		                logDataList.push({ userEngagementData: {
		                        EngagementName: name + "." + subDataPLTs[0],
		                        Properties: (subDataPLTs[0] === 'appCacheHit') ? JSON.stringify(event.data) : "",
		                        Duration: duration,
		                        LogType: 0,
		                        ClientTime: event.startTime,
		                        Source: SOURCE_V2_Engagement
		                    } });
		            }
		        }
		        return logDataList;
		    }
		    function _processUnhandledErrorEvent(event) {
		        return [{
		                userEngagementData: {
		                    EngagementName: "UnhandledError",
		                    Duration: 0,
		                    LogType: 0,
		                    ClientTime: event.startTime,
		                    Source: SOURCE_V2_Engagement
		                },
		                debugData: {
		                    Tag: "UnhandledError",
		                    Level: DebugPriorityLevel_1.default.Normal,
		                    Message: event.data ? JSON.stringify(event.data) : "no_EventData",
		                    Misc: "",
		                    ClientTime: event.startTime
		                }
		            }];
		    }
		    function _processRequireJSErrorEvent(event) {
		        var logData = {};
		        var name = "RequireJSError";
		        var errorData;
		        var errorMessage;
		        if (event.data) {
		            // clone all properties so that we can omit 'message' in JSON
		            errorData = {};
		            for (var key in event.data) {
		                if (key !== "message") {
		                    errorData[key] = event.data[key];
		                }
		                else {
		                    errorMessage = event.data[key];
		                }
		            }
		        }
		        logData.userEngagementData = {
		            EngagementName: name,
		            Duration: 0,
		            LogType: 0,
		            ClientTime: event.startTime,
		            Source: SOURCE_V2_Engagement
		        };
		        logData.debugData = {
		            Tag: name,
		            Level: DebugPriorityLevel_1.default.Normal,
		            Message: errorMessage ? errorMessage : "no_ErrorMessage",
		            Misc: errorData ? JSON.stringify(errorData) : "no_ErrorData",
		            ClientTime: event.startTime
		        };
		        return [logData];
		    }
		    function _processCaughtErrorEvent(event) {
		        var logData = {};
		        var name = "CaughtError";
		        if (QosError_event_1.QosError.isTypeOf(event)) {
		            if (event.data) {
		                var qosErrorData = event.data;
		                name = qosErrorData.name;
		                if (qosErrorData.resultCode) {
		                    name += "." + qosErrorData.resultCode;
		                }
		                name += _getResultTypeSuffix(qosErrorData.resultType);
		            }
		            else {
		                name = "QosErrorEvent.no_EventData";
		            }
		        }
		        else {
		            // log it once in the UserEngagement stream to count the hits
		            logData.userEngagementData = {
		                EngagementName: name,
		                Duration: 0,
		                LogType: 0,
		                ClientTime: event.startTime,
		                Source: SOURCE_V2_Engagement
		            };
		        }
		        // log it again in ReliabilityLog stream with data for debugging
		        var caughtErrorData = event.data ? event.data : null;
		        logData.debugData = {
		            Tag: name,
		            Level: DebugPriorityLevel_1.default.Normal,
		            Message: caughtErrorData && caughtErrorData.message ? caughtErrorData.message : "",
		            Misc: caughtErrorData && caughtErrorData.stack ? JSON.stringify(caughtErrorData.stack) : "",
		            ClientTime: event.startTime
		        };
		        return [logData];
		    }
		    function _processVerboseEvent(event) {
		        var logData = {};
		        var name = "Verbose";
		        if (event.data) {
		            var verboseData = event.data;
		            if (verboseData.name) {
		                name = verboseData.name + ".Verbose";
		            }
		        }
		        else {
		            name += ".no_EventData";
		        }
		        // log it in ReliabilityLog stream with data for debugging
		        logData.debugData = {
		            Tag: name,
		            Level: DebugPriorityLevel_1.default.Low,
		            Message: verboseData.message,
		            Misc: "",
		            ClientTime: event.startTime
		        };
		        return [logData];
		    }
		})(LogProcessor || (LogProcessor = {}));
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = LogProcessor;
	
	
	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var SingleEventBase_1 = __webpack_require__(16);
		var Features_1 = __webpack_require__(19);
		var PLT = (function (_super) {
		    __extends(PLT, _super);
		    /**
		     * The PLT event constructor
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function PLT(parent) {
		        _super.call(this, 'PLT,', 'PLT', parent);
		    }
		    /**
		     * This is true if the PLT event is enabled
		     */
		    PLT.enabled = function () {
		        return Features_1.default.isFeatureEnabled(PLT.samplingFeature);
		    };
		    /**
		     * This will create a single PLT event
		     * @param data {IPLTSingleSchema}
		     * -required name - The name of the PLT event
		     * -required w3cResponseEnd - Time to get the aspx from the server
		     * -required prefetchStart - Time it takes for our app to *start* prefetching
		     * -required deferredListDataRender - Time it takes for defered list data render from server
		     * -required appStart - Time it takes for our app to *start* running
		     * -required preRender - Time it takes for our app to make the relevant data fetch for this view
		     * -required dataFetch - Time it takes for our app to get data back from the server
		     * -required dataFetchServerTime - time the datafetch request spent on the server
		     * -required postRender - Time it takes from appDataFetchEnd to PLT
		     * -required render - Post render plus pre render
		     * -required plt - Time from fetchStart to plt
		     * -required pltWithUnload - Time from navigationStart to plt
		     * -required httpRequests - The count of http request till plt
		     * -required appCacheHit - Whether this page load is served from appCache
		     * @param parent {IEvent} The optional parent for this event
		     */
		    PLT.logData = function (data, parent) {
		        return SingleEventBase_1.SingleEventBase._logData(PLT, data, parent);
		    };
		    /**
		     * This is true when PLT event is enabled
		     */
		    PLT.prototype.isEnabled = function () {
		        return Features_1.default.isFeatureEnabled(PLT.samplingFeature);
		    };
		    PLT.prototype.setSingleData = function (data) {
		        this.data.name = this.cleanString(data.name);
		        this.data.w3cResponseEnd = data.w3cResponseEnd;
		        this.data.prefetchStart = data.prefetchStart;
		        this.data.deferredListDataRender = data.deferredListDataRender;
		        this.data.appStart = data.appStart;
		        this.data.preRender = data.preRender;
		        this.data.dataFetch = data.dataFetch;
		        this.data.dataFetchServerTime = data.dataFetchServerTime;
		        this.data.postRender = data.postRender;
		        this.data.render = data.render;
		        this.data.plt = data.plt;
		        this.data.pltWithUnload = data.pltWithUnload;
		        this.data.httpRequests = data.httpRequests;
		        this.data.appCacheHit = data.appCacheHit;
		    };
		    /**
		     * The name of the PLT event
		     */
		    PLT.fullName = 'PLT,';
		    /**
		     * The short name of the PLT event
		     */
		    PLT.shortName = 'PLT';
		    /**
		     * This is true if the PLT event is enabled
		     */
		    PLT.metadata = {
		        name: {
		            type: "String",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isKey: true,
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        w3cResponseEnd: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        prefetchStart: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        deferredListDataRender: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        appStart: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        preRender: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        dataFetch: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        dataFetchServerTime: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        postRender: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        render: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        plt: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        pltWithUnload: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        httpRequests: {
		            type: "Number",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        appCacheHit: {
		            type: "Boolean",
		            definedInName: "PLT",
		            definedInFullName: "PLT,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        }
		    };
		    /**
		     * The sampling feature for the PLT event
		     */
		    PLT.samplingFeature = { ODB: true, ODC: 'PLTLoggingSampling', Fallback: false };
		    return PLT;
		}(SingleEventBase_1.SingleEventBase));
		exports.PLT = PLT;
		PLT.prototype.metadata = PLT.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = PLT;
	
	
	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var SingleEventBase_1 = __webpack_require__(16);
		var UnhandledError = (function (_super) {
		    __extends(UnhandledError, _super);
		    /**
		     * The UnhandledError event constructor
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function UnhandledError(parent) {
		        _super.call(this, 'UnhandledError,', 'UnhandledError', parent);
		    }
		    /**
		     * This is true if the UnhandledError event is enabled
		     */
		    UnhandledError.enabled = function () {
		        return true;
		    };
		    /**
		     * This will create a single UnhandledError event
		     * @param data {IUnhandledErrorSingleSchema}
		     * -required message - This is the error message returned during the window.onerror handler
		     * -required stack - This is the stack trace of the error returned during the window.onerror handler, this is not available in all browsers and may only show up in certain ones (IEs)
		     * -required builtStack - This is the manually built stack trace of the unhandled exception
		     * -required line - This is the js line the unhandled exception happened on
		     * -required col - This is the js column the unhandled exception happened on
		     * -required url - This url of the js file that errored
		     * @param parent {IEvent} The optional parent for this event
		     */
		    UnhandledError.logData = function (data, parent) {
		        return SingleEventBase_1.SingleEventBase._logData(UnhandledError, data, parent);
		    };
		    /**
		     * This is false when UnhandledError event does not require a parent event
		     */
		    UnhandledError.prototype.requiresParent = function () {
		        return false;
		    };
		    /**
		     * This is true when UnhandledError event is a critical event
		     */
		    UnhandledError.prototype.isCritical = function () {
		        return true;
		    };
		    UnhandledError.prototype.setSingleData = function (data) {
		        this.data.message = this.cleanString(data.message);
		        this.data.stack = this.cleanString(data.stack);
		        this.data.builtStack = this.cleanString(data.builtStack);
		        this.data.line = data.line;
		        this.data.col = data.col;
		        this.data.url = this.cleanString(data.url);
		    };
		    /**
		     * The name of the UnhandledError event
		     */
		    UnhandledError.fullName = 'UnhandledError,';
		    /**
		     * The short name of the UnhandledError event
		     */
		    UnhandledError.shortName = 'UnhandledError';
		    /**
		     * This is true if the UnhandledError event is enabled
		     */
		    UnhandledError.metadata = {
		        message: {
		            type: "String",
		            definedInName: "UnhandledError",
		            definedInFullName: "UnhandledError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        stack: {
		            type: "String",
		            definedInName: "UnhandledError",
		            definedInFullName: "UnhandledError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        builtStack: {
		            type: "String",
		            definedInName: "UnhandledError",
		            definedInFullName: "UnhandledError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        line: {
		            type: "Number",
		            definedInName: "UnhandledError",
		            definedInFullName: "UnhandledError,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        col: {
		            type: "Number",
		            definedInName: "UnhandledError",
		            definedInFullName: "UnhandledError,",
		            isPrefixingDisabled: false,
		            isMetric: true
		        },
		        url: {
		            type: "String",
		            definedInName: "UnhandledError",
		            definedInFullName: "UnhandledError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        unMinStack: {
		            type: "Object",
		            definedInName: "UnhandledError",
		            definedInFullName: "UnhandledError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        }
		    };
		    return UnhandledError;
		}(SingleEventBase_1.SingleEventBase));
		exports.UnhandledError = UnhandledError;
		UnhandledError.prototype.metadata = UnhandledError.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = UnhandledError;
	
	
	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var SingleEventBase_1 = __webpack_require__(16);
		var RequireJSError = (function (_super) {
		    __extends(RequireJSError, _super);
		    /**
		     * The RequireJSError event constructor
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function RequireJSError(parent) {
		        _super.call(this, 'RequireJSError,', 'RequireJSError', parent);
		    }
		    /**
		     * This is true if the RequireJSError event is enabled
		     */
		    RequireJSError.enabled = function () {
		        return true;
		    };
		    /**
		     * This will create a single RequireJSError event
		     * @param data {IRequireJSErrorSingleSchema}
		     * -required message - This is the error message returned during the window.onerror handler
		     * -required requireModules - This is the array of required modules
		     * -required requireType - This is the require error type
		     * -required stack - This is the stack trace of the error returned during the window.onerror handler
		     * @param parent {IEvent} The optional parent for this event
		     */
		    RequireJSError.logData = function (data, parent) {
		        return SingleEventBase_1.SingleEventBase._logData(RequireJSError, data, parent);
		    };
		    /**
		     * This is false when RequireJSError event does not require a parent event
		     */
		    RequireJSError.prototype.requiresParent = function () {
		        return false;
		    };
		    /**
		     * This is true when RequireJSError event is a critical event
		     */
		    RequireJSError.prototype.isCritical = function () {
		        return true;
		    };
		    RequireJSError.prototype.setSingleData = function (data) {
		        this.data.message = this.cleanString(data.message);
		        this.data.requireModules = data.requireModules;
		        this.data.requireType = this.cleanString(data.requireType);
		        this.data.stack = this.cleanString(data.stack);
		    };
		    /**
		     * The name of the RequireJSError event
		     */
		    RequireJSError.fullName = 'RequireJSError,';
		    /**
		     * The short name of the RequireJSError event
		     */
		    RequireJSError.shortName = 'RequireJSError';
		    /**
		     * This is true if the RequireJSError event is enabled
		     */
		    RequireJSError.metadata = {
		        message: {
		            type: "String",
		            definedInName: "RequireJSError",
		            definedInFullName: "RequireJSError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        requireModules: {
		            type: "Array",
		            definedInName: "RequireJSError",
		            definedInFullName: "RequireJSError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        requireType: {
		            type: "String",
		            definedInName: "RequireJSError",
		            definedInFullName: "RequireJSError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        stack: {
		            type: "String",
		            definedInName: "RequireJSError",
		            definedInFullName: "RequireJSError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        unMinStack: {
		            type: "Object",
		            definedInName: "RequireJSError",
		            definedInFullName: "RequireJSError,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        }
		    };
		    return RequireJSError;
		}(SingleEventBase_1.SingleEventBase));
		exports.RequireJSError = RequireJSError;
		RequireJSError.prototype.metadata = RequireJSError.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = RequireJSError;
	
	
	/***/ },
	/* 48 */
	/***/ function(module, exports) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var DebugPriorityLevel;
		(function (DebugPriorityLevel) {
		    DebugPriorityLevel[DebugPriorityLevel["Low"] = 0] = "Low";
		    DebugPriorityLevel[DebugPriorityLevel["Normal"] = 1] = "Normal";
		})(DebugPriorityLevel || (DebugPriorityLevel = {}));
		;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = DebugPriorityLevel;
	
	
	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		// OneDrive:IgnoreCodeCoverage
		var RUMOneLogger_1 = __webpack_require__(30);
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = RUMOneLogger_1.ControlPerformanceData;
	
	
	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var DateTime = __webpack_require__(51);
		exports.DateTime = DateTime;
		var StringHelper = __webpack_require__(54);
		exports.StringHelper = StringHelper;
		var Api_event_1 = __webpack_require__(55);
		exports.Api = Api_event_1.Api;
		var PLT_event_1 = __webpack_require__(45);
		exports.PLT = PLT_event_1.PLT;
		var Async_1 = __webpack_require__(28);
		exports.Async = Async_1.default;
		var Component_1 = __webpack_require__(56);
		exports.Component = Component_1.default;
		var BaseDataStore_1 = __webpack_require__(42);
		exports.DataStore = BaseDataStore_1.default;
		var DataStoreCachingType_1 = __webpack_require__(43);
		exports.DataStoreCachingType = DataStoreCachingType_1.default;
		var EventGroup_1 = __webpack_require__(62);
		exports.EventGroup = EventGroup_1.default;
		var FabricTheming_1 = __webpack_require__(63);
		exports.FabricTheming = FabricTheming_1.default;
		var Features_1 = __webpack_require__(19);
		exports.Features = Features_1.default;
		var GroupDataSource_1 = __webpack_require__(67);
		exports.GroupDataSource = GroupDataSource_1.default;
		var Guid_1 = __webpack_require__(14);
		exports.Guid = Guid_1.default;
		var HtmlEncoding_1 = __webpack_require__(69);
		exports.HtmlEncoding = HtmlEncoding_1.default;
		var Locale_1 = __webpack_require__(53);
		exports.Locale = Locale_1.default;
		var Manager_1 = __webpack_require__(10);
		exports.Manager = Manager_1.default;
		var ObjectUtil_1 = __webpack_require__(11);
		exports.ObjectUtil = ObjectUtil_1.default;
		var PerformanceCollection_1 = __webpack_require__(70);
		exports.PerformanceCollection = PerformanceCollection_1.default;
		var PlatformDetection_1 = __webpack_require__(35);
		exports.PlatformDetection = PlatformDetection_1.default;
		var Promise_1 = __webpack_require__(61);
		exports.Promise = Promise_1.default;
		var RgbaColor_1 = __webpack_require__(65);
		exports.RgbaColor = RgbaColor_1.default;
		var SiteHeaderLogoAcronym_1 = __webpack_require__(71);
		exports.SiteHeaderLogoAcronym = SiteHeaderLogoAcronym_1.default;
		var ThemeProvider_1 = __webpack_require__(72);
		exports.ThemeProvider = ThemeProvider_1.default;
		var Uri_1 = __webpack_require__(74);
		exports.Uri = Uri_1.default;
		var UriEncoding_1 = __webpack_require__(12);
		exports.UriEncoding = UriEncoding_1.default;
		var WebTheme_1 = __webpack_require__(75);
		exports.WebTheme = WebTheme_1.default;
	
	
	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var DatetimeResx = __webpack_require__(52);
		var Locale_1 = __webpack_require__(53);
		var StringHelper_1 = __webpack_require__(54);
		// this is the difference between the .net ticks and the javascript Date ticks
		var TICKS_CONVERSION_CONSTANT = 62135596800000;
		// number of milliseconds for the given timespan
		// copied from SPRelativeDateTime, including 32 days to a month
		var ONE_SECOND = 1000;
		var ONE_MINUTE = 60 * ONE_SECOND;
		var TWO_MINUTES = 2 * ONE_MINUTE;
		var ONE_HOUR = 60 * ONE_MINUTE;
		var TWO_HOURS = 2 * ONE_HOUR;
		var ONE_DAY = 24 * ONE_HOUR;
		var TWO_DAYS = 2 * ONE_DAY;
		var ONE_WEEK = 7 * ONE_DAY;
		var ONE_MONTH = 32 * ONE_DAY;
		var _getLocale;
		var supportsTimeZoneDateOptions;
		var shortDateFormat;
		var shortTimeFormat;
		var shortDateFormatUTC;
		var shortTimeFormatUTC;
		var formatShortDate;
		var formatShortTime;
		var formatShortDateUTC;
		var formatShortTimeUTC;
		/**
		 * Convert a date-time string to a JavaScript Date object, for IE8 compat.
		 *  Modern browsers and IE9+ can just take the string directly to the Date constructor.
		 *  Format is: 1999-12-31T12:34:56.0000000Z
		 *  Trailing Z indicates UTC timezone, otherwise it uses the browser's time zone.
		 */
		function iso8601DateTimeToJsDate(dateTime) {
		    'use strict';
		    // note that Date.parse() doesn't work for this format in IE8 either
		    var isUTC = false;
		    if (dateTime.toUpperCase().indexOf('Z') === dateTime.length - 1) {
		        isUTC = true;
		    }
		    var timeValues = dateTime.split(/[^0-9]/);
		    if (timeValues.length < 6) {
		        return; // error
		    }
		    // note that Date 0-indexes months
		    if (!isUTC) {
		        return new Date(Number(timeValues[0]), Number(timeValues[1]) - 1, Number(timeValues[2]), Number(timeValues[3]), Number(timeValues[4]), Number(timeValues[5]));
		    }
		    else {
		        return new Date(Date.UTC(Number(timeValues[0]), Number(timeValues[1]) - 1, Number(timeValues[2]), Number(timeValues[3]), Number(timeValues[4]), Number(timeValues[5])));
		    }
		}
		exports.iso8601DateTimeToJsDate = iso8601DateTimeToJsDate;
		/**
		 * Get a string like "X minutes ago" that reflects the time elapsed since the input time.
		 * Only works for past times, future times just return a browser-determined localized time string.
		 */
		function getRelativeDateTimeStringPast(pastTime, startWithLowerCase) {
		    'use strict';
		    if (startWithLowerCase === void 0) { startWithLowerCase = false; }
		    var timespan = Date.now() - pastTime.getTime(); // time elapsed in ms
		    if (timespan < -5 * ONE_MINUTE) {
		        return pastTime.toLocaleDateString(Locale_1.default.language);
		    }
		    else if (timespan < ONE_MINUTE) {
		        // "Less than a minute ago"
		        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_LessThanAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_LessThanAMinute;
		    }
		    else if (timespan < TWO_MINUTES) {
		        // "About a minute ago"
		        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinute;
		    }
		    else if (timespan < ONE_HOUR) {
		        // "{0} minutes ago"
		        var minutes = Math.floor(timespan / ONE_MINUTE);
		        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XMinutes, DatetimeResx.strings.RelativeDateTime_XMinutesIntervals, minutes).replace("{0}", String(minutes));
		    }
		    else if (timespan < TWO_HOURS) {
		        // "About an hour ago"
		        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHour_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHour;
		    }
		    else if (timespan < ONE_DAY) {
		        // "{0} hours ago"
		        var hours = Math.floor(timespan / ONE_HOUR);
		        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XHours, DatetimeResx.strings.RelativeDateTime_XHoursIntervals, hours).replace("{0}", String(hours));
		    }
		    else if (timespan < TWO_DAYS) {
		        // "Yesterday at {0}"
		        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_YesterdayAndTime_StartWithLowerCase.replace("{0}", pastTime.toLocaleTimeString(Locale_1.default.language)) :
		            DatetimeResx.strings.RelativeDateTime_YesterdayAndTime.replace("{0}", pastTime.toLocaleTimeString(Locale_1.default.language));
		    }
		    else if (timespan < ONE_MONTH) {
		        // "{0} days ago" (in the past month-ish)
		        var days = Math.floor(timespan / ONE_DAY);
		        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XDays, DatetimeResx.strings.RelativeDateTime_XDaysIntervals, days).replace("{0}", String(days));
		    }
		    // Any other time, just return the regular full original time
		    return pastTime.toLocaleDateString(Locale_1.default.language); // browser-determined localized date (no time)
		}
		exports.getRelativeDateTimeStringPast = getRelativeDateTimeStringPast;
		/**
		 * This is a modified implementation of DateTime.GetRelativeDateTimeStringPast(...).
		 * The differences here are as follows:
		 *      (1) The time string for yesterday does not include the seconds
		 *      (2) Instead of showing 'X days ago' for dates older than a month, default to showing the full date
		 *      (3) The full date will also include the time (also without seconds)
		 */
		function getRelativeDateTimeStringPastWithHourMinute(pastTime) {
		    'use strict';
		    var timespan = Date.now() - pastTime.getTime(); // time elapsed in ms
		    var date = pastTime.toLocaleDateString(Locale_1.default.language); // browser-determined localized date
		    var time = pastTime.toLocaleTimeString(Locale_1.default.language, { hour: 'numeric', minute: '2-digit' }); //time without seconds
		    if (timespan < ONE_DAY) {
		        return getRelativeDateTimeStringPast(pastTime);
		    }
		    else if (timespan < TWO_DAYS) {
		        // "Yesterday at {0}" without seconds
		        return StringHelper_1.format(DatetimeResx.strings.RelativeDateTime_YesterdayAndTime, time);
		    }
		    // Any other time, just return the regular full original date with time, without seconds
		    return StringHelper_1.format(DatetimeResx.strings.DateTime_DateAndTime, date, time);
		}
		exports.getRelativeDateTimeStringPastWithHourMinute = getRelativeDateTimeStringPastWithHourMinute;
		/**
		 * True if the date is on or between the first and last day of the current week. This uses the Date function getDay()
		 * which returns the day of the week for the specified date according to local time, where 0 represents Sunday.
		 */
		function isThisWeek(pastTime) {
		    'use strict';
		    var today = new Date();
		    var start = new Date(today.getTime() - today.getDay() * ONE_DAY);
		    var end = new Date(start.getTime() + ONE_WEEK - ONE_DAY);
		    var isThisWeek = (start.getTime() <= pastTime.getTime() && pastTime.getTime() <= end.getTime());
		    return isThisWeek;
		}
		exports.isThisWeek = isThisWeek;
		/**
		 * True if the date is on or between the first and last day of the previous week. This uses the Date function getDay()
		 * which returns the day of the week for the specified date according to local time, where 0 represents Sunday.
		 */
		function isLastWeek(pastTime) {
		    'use strict';
		    var today = new Date();
		    var start = new Date(today.getTime() - today.getDay() * ONE_DAY - ONE_WEEK);
		    var end = new Date(start.getTime() + ONE_WEEK - ONE_DAY);
		    var isLastWeek = (start.getTime() <= pastTime.getTime() && pastTime.getTime() <= end.getTime());
		    return isLastWeek;
		}
		exports.isLastWeek = isLastWeek;
		// for use with lists' server-processed date value
		/**
		 * @param relativeDateTimeJSString: list server-processed date value string
		 * @startWithLowerCase: use this option when the return string is not at beginning of the sentence.
		 */
		function getRelativeDateTimeStringForLists(relativeDateTimeJSString, startWithLowerCase) {
		    'use strict';
		    if (startWithLowerCase === void 0) { startWithLowerCase = false; }
		    var ret = null;
		    var retTemplate = null;
		    var codes = relativeDateTimeJSString.split('|');
		    // Passthrough case
		    if (codes[0] === "0") {
		        return relativeDateTimeJSString.substring(2);
		    }
		    var bFuture = codes[1] === "1";
		    var timeBucket = codes[2];
		    var timeValue = codes.length >= 4 ? codes[3] : null;
		    var timeValue2 = codes.length >= 5 ? codes[4] : null;
		    switch (timeBucket) {
		        // a few seconds
		        case "1":
		            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AFewSecondsFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AFewSecondsFuture) :
		                (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AFewSeconds_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AFewSeconds);
		            break;
		        // about a minute
		        case "2":
		            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinuteFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinuteFuture) :
		                (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinute);
		            break;
		        // x minutes
		        case "3":
		            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_XMinutesFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_XMinutesFuture)
		                : DatetimeResx.strings.RelativeDateTime_XMinutes, bFuture ? DatetimeResx.strings.RelativeDateTime_XMinutesFutureIntervals : DatetimeResx.strings.RelativeDateTime_XMinutesIntervals, Number(timeValue));
		            break;
		        // about an hour
		        case "4":
		            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHourFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHourFuture)
		                : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHour_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHour);
		            break;
		        // yesterday / tomorrow
		        case "5":
		            if (timeValue == null) {
		                ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Tomorrow_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Tomorrow)
		                    : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Yesterday_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Yesterday);
		            }
		            else {
		                retTemplate = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_TomorrowAndTime_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_TomorrowAndTime)
		                    : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_YesterdayAndTime_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_YesterdayAndTime);
		            }
		            break;
		        // x hours
		        case "6":
		            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_XHoursFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_XHoursFuture)
		                : DatetimeResx.strings.RelativeDateTime_XHours, bFuture ? DatetimeResx.strings.RelativeDateTime_XHoursFutureIntervals : DatetimeResx.strings.RelativeDateTime_XHoursIntervals, Number(timeValue));
		            break;
		        // day and time
		        case "7":
		            if (timeValue2 === null) {
		                ret = timeValue;
		            }
		            else {
		                retTemplate = DatetimeResx.strings.RelativeDateTime_DayAndTime;
		            }
		            break;
		        // <Days> days
		        case "8":
		            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? DatetimeResx.strings.RelativeDateTime_XDaysFuture : DatetimeResx.strings.RelativeDateTime_XDays, bFuture ? DatetimeResx.strings.RelativeDateTime_XDaysFutureIntervals : DatetimeResx.strings.RelativeDateTime_XDaysIntervals, Number(timeValue));
		            break;
		        // today
		        case "9":
		            ret = startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Today_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Today;
		            break;
		    }
		    if (retTemplate !== null) {
		        ret = retTemplate.replace("{0}", timeValue);
		        if (timeValue2 !== null) {
		            ret = ret.replace("{1}", timeValue2);
		        }
		    }
		    return ret;
		}
		exports.getRelativeDateTimeStringForLists = getRelativeDateTimeStringForLists;
		/**
		 * Converts a given date string into its UTC/ISO standard format
		 */
		function convertDateToISOString(expiration) {
		    'use strict';
		    var expirationDate = new Date(expiration);
		    // For more info on the time zone offset and its signage, see:
		    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
		    var isOffsetNegative = (expirationDate.getTimezoneOffset() < 0) ? true : false;
		    var year = expirationDate.getFullYear().toString();
		    var month = _padStringWithZeroes((expirationDate.getMonth() + 1).toString(), 2); //zero based month
		    var day = _padStringWithZeroes(expirationDate.getDate().toString(), 2);
		    var hours = _padStringWithZeroes(expirationDate.getHours().toString(), 2);
		    var minutes = _padStringWithZeroes(expirationDate.getMinutes().toString(), 2);
		    var seconds = _padStringWithZeroes(expirationDate.getSeconds().toString(), 2);
		    var offsetHours = _padStringWithZeroes((isOffsetNegative ? Math.ceil(expirationDate.getTimezoneOffset() / 60).toString().replace("-", "") : Math.floor(expirationDate.getTimezoneOffset() / 60).toString()), 2);
		    var offsetMinutes = _padStringWithZeroes((expirationDate.getTimezoneOffset() % 60).toString().replace("-", ""), 2);
		    var expirationString = year + month + day + 'T' + hours + minutes + seconds + (isOffsetNegative ? '+' : '-') + offsetHours + offsetMinutes;
		    return expirationString;
		}
		exports.convertDateToISOString = convertDateToISOString;
		/**
		 * get the last day of the month based on the input date
		 */
		function getLastDayOfMonth(date) {
		    'use strict';
		    var lastDay = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), 1, 0, 0, 0, 0));
		    // To get the last day of the month we will increment the month
		    lastDay.setUTCMonth(lastDay.getUTCMonth() + 1);
		    // Then subtract a day
		    lastDay.setUTCDate(lastDay.getUTCDate() - 1);
		    // Then set the time to be the last second of the day
		    lastDay.setUTCHours(23, 59, 59, 999);
		    return lastDay;
		}
		exports.getLastDayOfMonth = getLastDayOfMonth;
		/**
		 * Given the .Net ticks of a date, convert it to a Date
		 */
		function getDateFromDotNetTicks(dotNetTicks) {
		    'use strict';
		    if (!dotNetTicks) {
		        return null;
		    }
		    var ticksInMilliseconds = (dotNetTicks / 10000) - TICKS_CONVERSION_CONSTANT;
		    return new Date(ticksInMilliseconds);
		}
		exports.getDateFromDotNetTicks = getDateFromDotNetTicks;
		function createShortDateFormatters() {
		    'use strict';
		    var locale = _getLocale();
		    var supportsUTC = _supportsTimeZoneDateOptions();
		    if (window['Intl'] && window['Intl']['DateTimeFormat']) {
		        var dateOptions = {};
		        var timeOptions = { hour: '2-digit', minute: '2-digit' };
		        shortDateFormat = new Intl.DateTimeFormat(locale, dateOptions);
		        shortTimeFormat = new Intl.DateTimeFormat(locale, timeOptions);
		        if (supportsUTC) {
		            dateOptions.timeZone = 'UTC';
		            timeOptions.timeZone = 'UTC';
		        }
		        shortDateFormatUTC = new Intl.DateTimeFormat(locale, dateOptions);
		        shortTimeFormatUTC = new Intl.DateTimeFormat(locale, timeOptions);
		        formatShortDate = shortDateFormat.format;
		        formatShortTime = shortTimeFormat.format;
		        formatShortDateUTC = shortDateFormatUTC.format;
		        formatShortTimeUTC = shortTimeFormatUTC.format;
		    }
		    else {
		        // No support for formatter objects.
		        formatShortDate = formatShortDateUTC = function (date) {
		            return date.toLocaleDateString(locale);
		        };
		        formatShortTime = formatShortTimeUTC = function (date) {
		            return date.toLocaleTimeString(locale);
		        };
		    }
		}
		/**
		 * Returns a short version of a date to display (e.g. 11:45 PM if today, or 11/2/2015 if not today)
		 */
		function getShortDisplayDate(date, useUTCTimezone) {
		    'use strict';
		    if (!date) {
		        return '';
		    }
		    if (!formatShortDate) {
		        createShortDateFormatters();
		    }
		    var now = new Date();
		    var isToday = date.getDate() === now.getDate() && Math.abs(now.getTime() - date.getTime()) < ONE_DAY;
		    var formatter;
		    if (useUTCTimezone) {
		        if (isToday) {
		            formatter = formatShortTimeUTC;
		        }
		        else {
		            formatter = formatShortDateUTC;
		        }
		    }
		    else {
		        if (isToday) {
		            formatter = formatShortTime;
		        }
		        else {
		            formatter = formatShortDate;
		        }
		    }
		    return formatter(date);
		}
		exports.getShortDisplayDate = getShortDisplayDate;
		/**
		 * Returns a full version of a date to display (e.g. 11/2/2015 11:45 PM)
		 * useUTCTimezone defaults to false
		 * useHour12 is ignored, and will be determined by the locale.
		 */
		function getFullDisplayDate(date, useUTCTimezone, useHour12) {
		    'use strict';
		    if (!formatShortDate) {
		        createShortDateFormatters();
		    }
		    var dateString = useUTCTimezone ? formatShortDateUTC(date) : formatShortDate(date);
		    var timeString = useUTCTimezone ? formatShortTimeUTC(date) : formatShortTime(date);
		    return StringHelper_1.format(DatetimeResx.strings.DateAndTime, dateString, timeString);
		}
		exports.getFullDisplayDate = getFullDisplayDate;
		_getLocale = function () {
		    'use strict';
		    var validLocale;
		    var locales = [
		        window['$Config'] && window['$Config']['mkt'],
		        Locale_1.default.language,
		        navigator.language,
		        'en'].filter(function (str) { return !!str; });
		    for (var _i = 0, locales_1 = locales; _i < locales_1.length; _i++) {
		        var locale = locales_1[_i];
		        try {
		            new Date().toLocaleDateString(locale);
		            validLocale = locale;
		            break;
		        }
		        catch (e) {
		        }
		    }
		    _getLocale = function () { return validLocale; };
		    return validLocale;
		};
		function _supportsTimeZoneDateOptions() {
		    'use strict';
		    if (supportsTimeZoneDateOptions === void 0) {
		        try {
		            var locale = _getLocale();
		            (new Date()).toLocaleDateString(locale, { timeZone: 'UTC' });
		            supportsTimeZoneDateOptions = true;
		        }
		        catch (E) {
		            // We know of some versions of IE 11 that fail when date options with a timezone is specified.
		            supportsTimeZoneDateOptions = false;
		        }
		    }
		    return supportsTimeZoneDateOptions;
		}
		/**
		 * Pads a date string with the request number of '0' characters
		 */
		function _padStringWithZeroes(toPad, numDigits) {
		    'use strict';
		    var paddedString = toPad;
		    while (paddedString.length < numDigits) {
		        paddedString = '0' + paddedString;
		    }
		    return paddedString;
		}
	
	
	/***/ },
	/* 52 */
	/***/ function(module, exports) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		exports.strings = { "RelativeDateTime_AFewSeconds": "A few seconds ago", "RelativeDateTime_AFewSeconds_StartWithLowerCase": "a few seconds ago", "RelativeDateTime_Format_DateTimeFormattingString_Override": "", "RelativeDateTime_Format_DateTimeFormattingString": "{0}, {1}", "RelativeDateTime_AFewSecondsFuture": "In a few seconds", "RelativeDateTime_AFewSecondsFuture_StartWithLowerCase": "in a few seconds", "RelativeDateTime_AboutAMinuteFuture": "In about a minute", "RelativeDateTime_AboutAMinuteFuture_StartWithLowerCase": "in about a minute", "RelativeDateTime_LessThanAMinute": "Less than a minute ago", "RelativeDateTime_LessThanAMinute_StartWithLowerCase": "less than a minute ago", "RelativeDateTime_AboutAMinute": "About a minute ago", "RelativeDateTime_AboutAMinute_StartWithLowerCase": "about a minute ago", "RelativeDateTime_XMinutesFuture": "In {0} minute||In {0} minutes", "RelativeDateTime_XMinutesFuture_StartWithLowerCase": "in {0} minute||in {0} minutes", "RelativeDateTime_XMinutesFutureIntervals": "1||2-", "RelativeDateTime_XMinutesIntervals": "1||2-", "RelativeDateTime_AboutAnHourFuture": "In about an hour", "RelativeDateTime_AboutAnHourFuture_StartWithLowerCase": "in about an hour", "RelativeDateTime_AboutAnHour": "About an hour ago", "RelativeDateTime_AboutAnHour_StartWithLowerCase": "about an hour ago", "RelativeDateTime_Tomorrow": "Tomorrow", "RelativeDateTime_Tomorrow_StartWithLowerCase": "tomorrow", "RelativeDateTime_Yesterday": "Yesterday", "RelativeDateTime_Yesterday_StartWithLowerCase": "yesterday", "RelativeDateTime_YesterdayAndTime": "Yesterday at {0}", "RelativeDateTime_YesterdayAndTime_StartWithLowerCase": "yesterday at {0}", "DateTime_DateAndTime": "{0} at {1}", "RelativeDateTime_TomorrowAndTime": "Tomorrow at {0}", "RelativeDateTime_TomorrowAndTime_StartWithLowerCase": "tomorrow at {0}", "RelativeDateTime_XHoursFuture": "In {0} hour||In {0} hours", "RelativeDateTime_XHoursFuture_StartWithLowerCase": "in {0} hour||in {0} hours", "RelativeDateTime_XHours": "{0} hour ago||{0} hours ago", "RelativeDateTime_XHoursFutureIntervals": "1||2-", "RelativeDateTime_XHoursIntervals": "1||2-", "RelativeDateTime_DayAndTime": "{0} at {1}", "RelativeDateTime_XDaysFuture": "{0} day from now||{0} days from now", "RelativeDateTime_XDays": "{0} day ago||{0} days ago", "RelativeDateTime_XDaysFutureIntervals": "1||2-", "RelativeDateTime_XDaysIntervals": "1||2-", "RelativeDateTime_Today": "Today", "RelativeDateTime_Today_StartWithLowerCase": "today", "RelativeDateTime_XMinutes": "{0} minute ago||{0} minutes ago", "DateAndTime": "{0} {1}" };
	
	
	/***/ },
	/* 53 */
	/***/ function(module, exports) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var Locale = (function () {
		    function Locale() {
		    }
		    Locale.invalidate = function () {
		        Locale.isRightToLeft = (document.documentElement.getAttribute('dir') === 'rtl');
		        Locale.safeLeft = Locale.isRightToLeft ? 'right' : 'left';
		        Locale.safeRight = Locale.isRightToLeft ? 'left' : 'right';
		        /** Robert Chen has the detailed explanation here : The most magic thing here is that OneDrive page and teamsite page has exactly the same line of code with regard to html tag Lang attribute.
		         * <SharePoint:SPHtmlTag lang="<%$Resources:wss,language_value%>" dir="<%$Resources:wss,multipages_direction_dir_value%>" ID="SPHtmlTag" runat="server">
		         * And in teamsite doclib, this lang gets executed to the current user locale. And that is actually already a magic------What happens here is the in order to get the doclib page in ContentDB, we had a standard MondoSproc call which gets the page and the SPWeb. In constructing the web, SP *  * code has smart logic to set Thread.CurrentThread.CurrentUICulture to match the MUI language! And with that magic, ="<%$Resources:wss,language_value%> actually gets sets properly to the user language, not the pre-defined web language.
		         * For OneDrive.aspx which lives inside _layouts folder, the order of code execution changes. We must have executed this line of ASPX code first ="<%$Resources:wss,language_value%> before SPWeb was opened and did the magic to set Thread.CurrentThread.CurrentUICulture.
		         * So the Thread.CurrentThread.CurrentUICulture affecting ="<%$Resources:wss,language_value%> with SPWeb magic end up not working in Onedrive.aspx! And there’s really nothing that we can do about it unless we rewrite the page!
		         * So the conclusion is that the lang attribute is by design (of implementation) different from the regular team site pages which live inside content db.
		         */
		        var language = window["_spPageContextInfo"] && window["_spPageContextInfo"].currentCultureName;
		        // fallback of xml:lang for IE9
		        Locale.language = language ||
		            document.documentElement.getAttribute('lang') ||
		            document.documentElement.getAttribute('xml:lang') ||
		            'en-us';
		    };
		    return Locale;
		}());
		Locale.invalidate();
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Locale;
	
	
	/***/ },
	/* 54 */
	/***/ function(module, exports) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		// Regex that finds { and } so they can be removed on a lookup for string format
		var FORMAT_ARGS_REGEX = /[\{\}]/g;
		// Regex that finds {#} so it can be replaced by the arguments in string format
		var FORMAT_REGEX = /\{\d+\}/g;
		/**
		 * String Format is like C# string format.
		 * Usage Example: "hello {0}!".format("mike") will return "hello mike!"
		 * Calling format on a string with less arguments than specified in the format is invalid
		 * Example "I love {0} every {1}".format("CXP") will result in a Debug Exception.
		 */
		function format(s) {
		    'use strict';
		    var values = [];
		    for (var _i = 1; _i < arguments.length; _i++) {
		        values[_i - 1] = arguments[_i];
		    }
		    var args = values;
		    // Callback match function
		    function replace_func(match) {
		        // looks up in the args
		        var replacement = args[match.replace(FORMAT_ARGS_REGEX, "")];
		        // catches undefined in nondebug and null in debug and nondebug
		        if (replacement === null) {
		            replacement = '';
		        }
		        return replacement;
		    }
		    return (s.replace(FORMAT_REGEX, replace_func));
		}
		exports.format = format;
		/**
		 * Returns true if s ends with suffix.
		 */
		function doesStringEndWith(s, suffix) {
		    'use strict';
		    return s.substr(s.length - suffix.length) === suffix;
		}
		exports.doesStringEndWith = doesStringEndWith;
		/**
		 * Returns true if s starts with prefix.
		 */
		function doesStringStartWith(s, prefix) {
		    'use strict';
		    return s.substr(0, prefix.length) === prefix;
		}
		exports.doesStringStartWith = doesStringStartWith;
		/**
		 * Return a string of the given length, using 0s to pad in from the right.
		 */
		function rightPad(data, length) {
		    'use strict';
		    var result = data.toString();
		    while (result.length < length) {
		        result = result + "0";
		    }
		    return result;
		}
		exports.rightPad = rightPad;
		/**
		 * Look for any of the chars in searchValues in str.
		 * Returns the index of the char found or -1 if nothing is found.
		 */
		function findOneOf(str, searchValues) {
		    'use strict';
		    for (var idx = 0; idx < str.length; idx++) {
		        var ch = str[idx];
		        if (searchValues.indexOf(ch) !== -1) {
		            return idx;
		        }
		    }
		    return -1; //none of the searchValues exist in string
		}
		exports.findOneOf = findOneOf;
		/**
		 * Determines if two strings are equal when both converted to lowercase.
		 */
		function equalsCaseInsensitive(a, b) {
		    'use strict';
		    if (a && b) {
		        return a.toLowerCase() === b.toLowerCase();
		    }
		    return a === b;
		}
		exports.equalsCaseInsensitive = equalsCaseInsensitive;
		/**
		 * Capitalizes the first letter of str.
		 */
		function capitalize(str) {
		    'use strict';
		    if (str) {
		        return str[0].toUpperCase() + str.substr(1);
		    }
		    return str;
		}
		exports.capitalize = capitalize;
		/**
		 * De-capitalizes the first letter of str.
		 */
		function decapitalize(str) {
		    'use strict';
		    if (str) {
		        return str[0].toLowerCase() + str.substr(1);
		    }
		    return str;
		}
		exports.decapitalize = decapitalize;
		/**
		 * Selects a string based on plurality.
		 *
		 * @param count - The value to base selection on
		 * @param single - The string to select when it's a singular value
		 * @param multiple - The string to select when it's a plural value
		 *
		 * @deprecated This method does NOT give accurate results for many languages!!
		 *             Use getLocalizedCountValue instead.
		 */
		function pluralSelect(count, single, plural) {
		    'use strict';
		    return count === 1 ? single : plural;
		}
		exports.pluralSelect = pluralSelect;
		/**
		 * Given a specially formatted localized text, a set of intervals, and a count,
		 * return the localized text which corresponds to the first interval the
		 * count falls into.
		 *
		 * Please see https://microsoft.sharepoint.com/teams/OISGPortal/LocKits/_layouts/15/start.aspx#/Lockit%20Instructions/SharePoint%20Core%20Localization.aspx
		 * for more details.
		 *
		 * @param {string} locText - || deliminated blocks of localized texts, representing
		 *  the various singular and plural forms of the string  being localized
		 * @param {string} intervals - || deliminated blocks of numeric intervals, defining the ranges
		 *  of that interval. Has special support for , * and -.
		 * @param {number} count - The count used to determine which interval to return.
		 *
		 * @return
		 * The localized block which corresponds to the first interval the count falls into.
		 *
		 * @example
		 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 0)
		 *   returns items
		 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 1)
		 *   returns item
		 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 2)
		 *   returns items
		 */
		function getLocalizedCountValue(locText, intervals, count) {
		    'use strict';
		    count = Number(count); // defensively make sure count is a number
		    // !!!IMPORTANT!!! changes in this function need to be in sync with
		    // the methods with the same name located at:
		    // otools/inc/sts/stsom/utilities/SPLocUtility.cs
		    // sts/Client/Script/Init/LocUtility.cs
		    if (locText === undefined || intervals === undefined || count === undefined) {
		        return null;
		    }
		    var ret = '';
		    var locIndex = -1;
		    var intervalsArray = intervals.split('||');
		    for (var i = 0, length_1 = intervalsArray.length; i < length_1; i++) {
		        var interval = intervalsArray[i];
		        if (!interval) {
		            continue;
		        }
		        var subIntervalsArray = interval.split(',');
		        for (var _i = 0, subIntervalsArray_1 = subIntervalsArray; _i < subIntervalsArray_1.length; _i++) {
		            var subInterval = subIntervalsArray_1[_i];
		            if (!subInterval) {
		                continue;
		            }
		            // there are three possiblities, wildcard, interval, or number
		            if (isNaN(Number(subInterval))) {
		                if (subInterval.indexOf('-') !== -1) {
		                    // if it's an interval the format is Number-Number
		                    var range = subInterval.split('-');
		                    if (range.length !== 2) {
		                        continue;
		                    }
		                    var min = void 0;
		                    var max = void 0;
		                    if (range[0] === '') {
		                        min = 0;
		                    }
		                    else {
		                        if (isNaN(Number(range[0]))) {
		                            continue;
		                        }
		                        else {
		                            min = parseInt(range[0], 10);
		                        }
		                    }
		                    if (count >= min) {
		                        if (range[1] === '') {
		                            locIndex = i;
		                            break;
		                        }
		                        else {
		                            if (isNaN(Number(range[1]))) {
		                                continue;
		                            }
		                            else {
		                                max = parseInt(range[1], 10);
		                            }
		                        }
		                        if (count <= max) {
		                            locIndex = i;
		                            break;
		                        }
		                    }
		                }
		                else if (subInterval.indexOf('*') !== -1) {
		                    // Wildcard
		                    var regexExpr = subInterval.trim().replace(/\*/g, '[0-9]*');
		                    var regex = new RegExp("^" + regexExpr + "$");
		                    if (regex.test(count.toString())) {
		                        locIndex = i;
		                        break;
		                    }
		                }
		            }
		            else {
		                var exactNumber = parseInt(subInterval, 10);
		                if (count === exactNumber) {
		                    locIndex = i;
		                    break;
		                }
		            }
		        }
		        if (locIndex !== -1) {
		            break;
		        }
		    }
		    if (locIndex !== -1) {
		        var locValues = locText.split('||');
		        if (locValues[locIndex]) {
		            ret = locValues[locIndex];
		        }
		    }
		    return ret;
		}
		exports.getLocalizedCountValue = getLocalizedCountValue;
		/**
		 * Format the locText with the localized count value.
		 */
		function formatWithLocalizedCountValue(locText, intervals, count) {
		    'use strict';
		    var template = getLocalizedCountValue(locText, intervals, count);
		    var result = format(template, count.toString());
		    return result;
		}
		exports.formatWithLocalizedCountValue = formatWithLocalizedCountValue;
	
	
	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var PairedEventBase_1 = __webpack_require__(21);
		var Features_1 = __webpack_require__(19);
		var ResultTypeEnum_1 = __webpack_require__(22);
		var ResultTypeEnum_2 = __webpack_require__(22);
		exports.ResultTypeEnum = ResultTypeEnum_2.ResultTypeEnum;
		var Api = (function (_super) {
		    __extends(Api, _super);
		    /**
		     * The Api event constructor
		     * @param data {IApiStartSchema}
		     * -required url - The api url
		     * -required name - This is the name of the qos event
		     * -optional resultCode - This is result code for the qos event
		     * -optional resultType - This is the result type enum
		     * -optional error - This is the error message to be logged with failed result
		     * -optional extraData - This is the random extra data for the qos event
		     * -optional extraMetrics - Extra data for the qos event that should be logged as aggregatable metrics
		     * @param parent {IEvent} The optional parent for this event
		     */
		    function Api(data, parent) {
		        _super.call(this, 'Api,Qos,', 'Api', data, parent);
		    }
		    /**
		     * This is true if the Api event is enabled
		     */
		    Api.enabled = function () {
		        return Features_1.default.isFeatureEnabled(Api.samplingFeature);
		    };
		    Api.instrumentPromise = function (startSchema, createPromise, getCompleteSchema, getErrorSchema, timeoutMs, timeoutSchema, parent) {
		        return PairedEventBase_1.PairedEventBase._instrumentPromise(Api, startSchema, createPromise, getCompleteSchema, getErrorSchema, timeoutMs, timeoutSchema, parent);
		    };
		    /**
		     * This will end the Api event
		     * @param data {IApiEndSchema}
		     * -optional resultCode - This is result code for the qos event
		     * -required resultType - This is the result type enum
		     * -optional error - This is the error message to be logged with failed result
		     * -optional extraData - This is the random extra data for the qos event
		     * -optional extraMetrics - Extra data for the qos event that should be logged as aggregatable metrics
		     */
		    Api.prototype.end = function (data) {
		        return this._end(data);
		    };
		    /**
		     * This writes verbose logs to memory to be uploaded if event ends with failure
		     */
		    Api.prototype.verbose = function (message) {
		        return this._verbose(message);
		    };
		    /**
		     * Sets a time limit for the scenario. A timeout result will be logged if no end happens in desired timeframe
		     */
		    Api.prototype.setTimeout = function (ms, data) {
		        return this._setTimeout(ms, data);
		    };
		    /**
		     * This is true when Api event is enabled
		     */
		    Api.prototype.isEnabled = function () {
		        return Features_1.default.isFeatureEnabled(Api.samplingFeature);
		    };
		    Api.prototype.setStartData = function (data) {
		        this.data.url = this.cleanString(data.url);
		        this.data.name = this.cleanString(data.name);
		        if (typeof data.resultCode !== "undefined") {
		            this.data.resultCode = this.cleanString(data.resultCode);
		        }
		        if (typeof data.resultType !== "undefined") {
		            this.data.resultType = data.resultType;
		        }
		        if (typeof data.error !== "undefined") {
		            this.data.error = this.cleanString(data.error);
		        }
		        if (typeof data.extraData !== "undefined") {
		            this.data.extraData = data.extraData;
		        }
		        if (typeof data.extraMetrics !== "undefined") {
		            this.data.extraMetrics = data.extraMetrics;
		        }
		    };
		    Api.prototype.setEndData = function (data) {
		        if (typeof data.resultCode !== "undefined") {
		            this.data.resultCode = this.cleanString(data.resultCode);
		        }
		        this.data.resultType = data.resultType;
		        if (typeof data.error !== "undefined") {
		            this.data.error = this.cleanString(data.error);
		        }
		        if (typeof data.extraData !== "undefined") {
		            this.data.extraData = data.extraData;
		        }
		        if (typeof data.extraMetrics !== "undefined") {
		            this.data.extraMetrics = data.extraMetrics;
		        }
		    };
		    /**
		     * The name of the Api event
		     */
		    Api.fullName = 'Api,Qos,';
		    /**
		     * The short name of the Api event
		     */
		    Api.shortName = 'Api';
		    /**
		     * This is true if the Api event is enabled
		     */
		    Api.metadata = {
		        url: {
		            type: "String",
		            definedInName: "Api",
		            definedInFullName: "Api,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        name: {
		            type: "String",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            isKey: true,
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        resultCode: {
		            type: "String",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        resultType: {
		            type: "ResultTypeEnum",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            baseType: "Enum",
		            typeRef: ResultTypeEnum_1.ResultTypeEnum,
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        error: {
		            type: "String",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        },
		        extraData: {
		            type: "Object",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            isPrefixingDisabled: false,
		            isMetric: false
		        },
		        extraMetrics: {
		            type: "Object",
		            definedInName: "Qos",
		            definedInFullName: "Qos,",
		            isPrefixingDisabled: true,
		            isMetric: false
		        }
		    };
		    /**
		     * The sampling feature for the Api event
		     */
		    Api.samplingFeature = { ODB: true, ODC: 'ApiEventLogging', Fallback: false };
		    return Api;
		}(PairedEventBase_1.PairedEventBase));
		exports.Api = Api;
		Api.prototype.metadata = Api.metadata;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Api;
	
	
	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var Scope_1 = __webpack_require__(57);
		var Resources_1 = __webpack_require__(59);
		/**
		 * Base class for lifetime-managed, scoped components.
		 *
		 * Many web components ultimately need to set up subscriptions to events,
		 * manage HTML elements, wait on asychronous activities, and clean up
		 * loaded state. The `Component` base class provides a way to create a hierarchy
		 * of objects with lifetime management and automatic resource scoping.
		 *
		 * `Component` combines the benefits of `ResourceScope` and `Scope` into a single
		 *  package for convenience.
		 *
		 * If a component-like class needs the benefits of lifetime management but cannot
		 * extend `Component`, consider wrapping a `Scope` and a `ResourceScope` in order
		 * to create child components.
		 *
		 * @export
		 * @class Component
		 * @implements {IDisposable}
		 *
		 * @example
		 *  export interface ISearchServiceParams extends IComponentParams {
		 *      searchMode: SearchMode;
		 *  }
		 *
		 *  export interface ISearchDependencies extends IComponentDependencies {
		 *      context: IContext
		 *      DataRequestor?: typeof DataRequestor;
		 *  }
		 *
		 *  export default class SearchService extends Component {
		 *      public static readonly dependencies = ObjectUtil.extend({
		 *          context: contextKey
		 *      }, Component.dependencies);
		 *
		 *      private _dataRequestor: DataRequestor;
		 *      private _context: IContext;
		 *      private _searchMode: SearchMode;
		 *
		 *      constructor(params: ISearchServiceParams, dependencies: ISearchServiceDependencies) {
		 *          super(params, dependencies);
		 *
		 *          const {
		 *              searchMode
		 *          } = params;
		 *
		 *          const {
		 *              context
		 *              DataRequestor: dataRequestorType // This parameter is only used in unit tests
		 *          } = dependencies;
		 *
		 *          this._searchMode = searchMode;
		 *
		 *          this._context = context;
		 *
		 *          this._dataRequestor = new (this.child(dataRequestorType))();
		 *      }
		 *
		 *      public search(options: ISearchOptions): Promise<ISearchResult> {
		 *          return this._dataRequestor.getData(...).then((data: ISearchResponse) => {
		 *              return this._processResponse(data);
		 *          });
		 *      }
		 *  }
		 */
		var Component = (function () {
		    /**
		     * Creates an instance of Component.
		     * In general, derived classes should invoke `super(params, dependencies)`, supplying both
		     * `params` and `dependencies` to the `Component` class.
		     * When creating a new instance of a derived component, use either
		     * `new (resources.injected(MyComponent))()`
		     * when outside a `Component` or
		     * `new (this.child(MyComponent))()`
		     * when inside a `Component`. This will ensure that resources are properly passed and lifetimes
		     * are properly managed.
		     *
		     * @param {IComponentParams} [params={}] Optional params to control behaviors of this class.
		     * In general, classes which extend components
		     * @param {IComponentDependencies} [dependencies={}] Optional dependencies to override types consumed by this class.
		     * `dependencies` is intended for use during unit testing, to override types consumed outside of resourcing.
		     * Most dependency injection should be done using `ResourceScope`.
		     */
		    function Component(params, dependencies) {
		        if (params === void 0) { params = {}; }
		        if (dependencies === void 0) { dependencies = {}; }
		        var _a = this.resources, resources = _a === void 0 ? (dependencies.resources || params.resources) : _a;
		        this.resources = resources;
		        this._Component_scope = new Scope_1.default();
		    }
		    Object.defineProperty(Component.prototype, "scope", {
		        /**
		         * Gets the lifetime scope manager for this component.
		         * In general, use `new (this.child(Type))()` to create child components
		         * with proper lifetime management.
		         * However, `this.scope` can be used to
		         *
		         * @protected
		         * @type {Scope}
		         */
		        get: function () {
		            return this._Component_scope;
		        },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(Component.prototype, "isDisposed", {
		        /**
		         * Determines whether or not this component has been disposed.
		         *
		         * @readonly
		         * @protected
		         * @type {boolean}
		         */
		        get: function () {
		            return this.scope.isDisposed;
		        },
		        enumerable: true,
		        configurable: true
		    });
		    Component.prototype.dispose = function () {
		        this._Component_scope.dispose();
		    };
		    /**
		     * Produces a constructor for a type which injects instances
		     * with this component's current resources and binds them
		     * to this component's lifetime. New code should prefer `this.child`.
		     *
		     * @protected
		     * @template T
		     * @param {T} type
		     * @returns {T}
		     */
		    Component.prototype.managed = function (type) {
		        if (this.resources) {
		            type = this.resources.injected(type);
		        }
		        return this.scope.attached(type);
		    };
		    Component.prototype.child = function (keyOrType) {
		        var type;
		        if (keyOrType instanceof Resources_1.ResourceKey) {
		            type = this.resources.consume(keyOrType);
		        }
		        else if (this.resources) {
		            type = this.resources.injected(keyOrType, {
		                injectChildResourceScope: true
		            });
		        }
		        else {
		            type = keyOrType;
		        }
		        return this.scope.attached(type);
		    };
		    Component.dependencies = {
		        resources: Resources_1.resourceScopeKey
		    };
		    return Component;
		}());
		exports.Component = Component;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Component;
	
	
	/***/ },
	/* 57 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var Disposable_1 = __webpack_require__(58);
		/**
		 * Lifetime manager for scoping components.
		 *
		 * @export
		 * @class Scope
		 * @implements {IDisposable}
		 *
		 * @example
		 *  const scope = new Scope();
		 *
		 *  let instance = new (scope.attached(MyComponent))();
		 *
		 *  scope.dispose();
		 */
		var Scope = (function () {
		    /**
		     * Creates an instance of Scope.
		     */
		    function Scope() {
		        this._disposables = {};
		        this._lastDisposableId = 0;
		    }
		    /**
		     * Produces a constructor for instances of a type which will be bound to the lifetime
		     * of this scope.
		     *
		     * @template T the type of object to be created.
		     * @param {T} the original constructor for the type.
		     * @returns {T} a new constructor to invoke to create the object.
		     */
		    Scope.prototype.attached = function (type) {
		        var scope = this;
		        var Attached = function () {
		            return scope.attach(type.apply(this, arguments) || this);
		        };
		        if (true) {
		            // This pattern results in the correct type being displayed in the debugger
		            var wrappedConstructor_1 = Attached;
		            Attached = function () {
		                return wrappedConstructor_1.apply(Object.create(type.prototype), arguments);
		            };
		        }
		        Attached.prototype = type.prototype;
		        return Attached;
		    };
		    Scope.prototype.attach = function (instance) {
		        var _this = this;
		        var id = "" + ++this._lastDisposableId;
		        var disposable = Disposable_1.hook(instance, function () {
		            delete _this._disposables[id];
		        });
		        this._disposables[id] = disposable;
		        return disposable;
		    };
		    /**
		     * Disposes this scope and any attached objects.
		     */
		    Scope.prototype.dispose = function () {
		        if (!this.isDisposed) {
		            this.isDisposed = true;
		        }
		        var disposables = this._disposables;
		        for (var _i = 0, _a = Object.keys(disposables); _i < _a.length; _i++) {
		            var id = _a[_i];
		            var disposable = disposables[id];
		            if (disposable && Disposable_1.isDisposable(disposable)) {
		                disposable.dispose();
		            }
		            delete disposables[id];
		        }
		    };
		    return Scope;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Scope;
	
	
	/***/ },
	/* 58 */
	/***/ function(module, exports) {
	
		"use strict";
		var DisposalChain = (function () {
		    function DisposalChain(owner) {
		        this._callbacks = [];
		        this._owner = owner;
		    }
		    DisposalChain.prototype.addCallback = function (callback) {
		        this._callbacks.push(callback);
		    };
		    DisposalChain.prototype.dispose = function () {
		        // Handle dispose callbacks is the reverse order from when they were attached.
		        while (this._callbacks.length) {
		            var callback = this._callbacks.pop();
		            callback.call(this._owner);
		        }
		    };
		    return DisposalChain;
		}());
		/**
		 * Determines whether not an object requires is disposable.
		 *
		 * @export
		 * @template T
		 * @param {(T | IDisposable)} object
		 * @returns {object is IDisposable}
		 */
		function isDisposable(object) {
		    'use strict';
		    return typeof object.dispose === 'function';
		}
		exports.isDisposable = isDisposable;
		function hook(instance, onDispose) {
		    'use strict';
		    var disposable = instance;
		    var dispose = disposable.dispose;
		    var disposalChain = typeof dispose === 'function' && dispose.disposalChain;
		    if (!disposalChain) {
		        disposalChain = new DisposalChain(disposable);
		        var disposeHook = (function () {
		            disposalChain.dispose();
		            if (dispose) {
		                // Restore the old dispose method and clean up modifications.
		                disposable.dispose = dispose;
		                disposable.dispose();
		            }
		        });
		        disposable.dispose = disposeHook;
		        disposeHook.disposalChain = disposalChain;
		    }
		    disposalChain.addCallback(onDispose);
		    return disposable;
		}
		exports.hook = hook;
	
	
	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		var ResourceScope_1 = __webpack_require__(60);
		var Disposable_1 = __webpack_require__(58);
		/**
		 * An implementation of IResourceLoader that constructs a {ResolvedResourceFactory} from the type that the load function resolves to.
		 */
		var ResolvedResourceLoader = (function () {
		    function ResolvedResourceLoader(load, dependencies) {
		        this._load = load;
		        this._dependencies = dependencies;
		    }
		    ResolvedResourceLoader.prototype.load = function () {
		        var _this = this;
		        var promise = this._load().then(function (type) {
		            return new ResolvedResourceFactory(type, _this._dependencies);
		        });
		        this.load = function () { return promise; };
		        return promise;
		    };
		    return ResolvedResourceLoader;
		}());
		exports.ResolvedResourceLoader = ResolvedResourceLoader;
		/**
		 * An implementation of IResourceFactory that instantiates the passed type, resolving any dependencies from resources.
		 */
		var ResolvedResourceFactory = (function () {
		    function ResolvedResourceFactory(type, dependencies) {
		        this._type = type;
		        this.dependencies = type.dependencies || dependencies;
		    }
		    ResolvedResourceFactory.prototype.create = function (dependencies) {
		        var instance = new this._type({}, dependencies);
		        return {
		            instance: instance,
		            disposable: instance
		        };
		    };
		    return ResolvedResourceFactory;
		}());
		exports.ResolvedResourceFactory = ResolvedResourceFactory;
		/**
		 * An implementation of IResourceFactory that provides a constructor for the passed type with dependencies resolved from resources.
		 */
		var ResolvedResourceTypeFactory = (function () {
		    function ResolvedResourceTypeFactory(type, dependencies) {
		        this._type = type;
		        this.dependencies = type.dependencies || dependencies;
		    }
		    ResolvedResourceTypeFactory.prototype.create = function (dependencies) {
		        return {
		            instance: ResourceScope_1.getResolvedConstructor(this._type, dependencies)
		        };
		    };
		    return ResolvedResourceTypeFactory;
		}());
		exports.ResolvedResourceTypeFactory = ResolvedResourceTypeFactory;
		/**
		 * An implementation of IResourceFactory for classes that have no dependencies and take no parameters.
		 */
		var SimpleResourceFactory = (function () {
		    function SimpleResourceFactory(type) {
		        this._type = type;
		    }
		    Object.defineProperty(SimpleResourceFactory.prototype, "dependencies", {
		        get: function () {
		            return {};
		        },
		        enumerable: true,
		        configurable: true
		    });
		    SimpleResourceFactory.prototype.create = function () {
		        var instance = new this._type();
		        return {
		            instance: instance,
		            disposable: Disposable_1.isDisposable(instance) && instance
		        };
		    };
		    return SimpleResourceFactory;
		}());
		exports.SimpleResourceFactory = SimpleResourceFactory;
		__export(__webpack_require__(60));
	
	
	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var Promise_1 = __webpack_require__(61);
		var ObjectUtil_1 = __webpack_require__(11);
		var Scope_1 = __webpack_require__(57);
		var Disposable_1 = __webpack_require__(58);
		var lastId = 0;
		var ResourceKey = (function () {
		    function ResourceKey(nameOrOptions) {
		        this.id = ++lastId;
		        if (typeof nameOrOptions === 'string') {
		            this.name = nameOrOptions;
		        }
		        else {
		            this.name = nameOrOptions.name;
		            this.factory = nameOrOptions.factory;
		            this.useNarrowestScope = nameOrOptions.useNarrowestScope;
		        }
		    }
		    /**
		     * Provides information about this resource key
		     */
		    ResourceKey.prototype.toString = function () {
		        return "Resource #" + this.id + " \"" + this.name + "\"";
		    };
		    return ResourceKey;
		}());
		exports.ResourceKey = ResourceKey;
		var ConstantResourceFactory = (function () {
		    function ConstantResourceFactory(value) {
		        this._value = value;
		    }
		    Object.defineProperty(ConstantResourceFactory.prototype, "dependencies", {
		        get: function () {
		            return {};
		        },
		        enumerable: true,
		        configurable: true
		    });
		    ConstantResourceFactory.prototype.create = function () {
		        return { instance: this._value };
		    };
		    return ConstantResourceFactory;
		}());
		exports.ConstantResourceFactory = ConstantResourceFactory;
		exports.resourceScopeKey = new ResourceKey({
		    name: 'resources'
		});
		var Handle = (function () {
		    function Handle(factory, instanceManager) {
		        this.factory = factory;
		        this.manager = instanceManager;
		    }
		    Handle.prototype.getInstance = function (key, resourceScopeOptions) {
		        var factory = this.factory.value;
		        var resource = factory.create(this.manager.getConsumer().resolve(factory.dependencies, resourceScopeOptions));
		        var instance = resource.instance;
		        if (resource.disposable) {
		            this.manager.scope.attach(resource.disposable);
		        }
		        this.getInstance = function () { return instance; };
		        return instance;
		    };
		    Handle.prototype.promote = function (targetHandleManager) {
		        return new Handle({
		            manager: targetHandleManager,
		            loader: this.factory.loader,
		            value: this.factory.value
		        });
		    };
		    return Handle;
		}());
		var logBeginConstruction;
		var logEndConstruction;
		var logConsume;
		var logExpose;
		var log;
		function getResolvedConstructor(resolvableConstructor, resolvedDependencies) {
		    var Resolved = function (params) {
		        var instance = resolvableConstructor.call(this, params, resolvedDependencies) || this;
		        return instance;
		    };
		    if (true) {
		        // This pattern results in the correct type being displayed in the debugger
		        var wrappedConstructor_1 = Resolved;
		        Resolved = function (params) {
		            logBeginConstruction(resolvableConstructor, 'Resources.resolved');
		            var instance = wrappedConstructor_1.call(Object.create(resolvableConstructor.prototype), params);
		            logEndConstruction(resolvableConstructor, 'Resources.resolved');
		            return instance;
		        };
		    }
		    Resolved.prototype = resolvableConstructor.prototype;
		    return Resolved;
		}
		exports.getResolvedConstructor = getResolvedConstructor;
		var HandleManager = (function () {
		    function HandleManager(parentOrOptions) {
		        this.handles = {};
		        var options;
		        if (parentOrOptions instanceof HandleManager) {
		            if (parentOrOptions.isDisposed) {
		                throw new Error('Parent ResourceScope has already been disposed!');
		            }
		            options = parentOrOptions.options;
		            this._parent = parentOrOptions;
		            this._level = parentOrOptions._level + 1;
		        }
		        else {
		            options = parentOrOptions || {};
		            this._level = 0;
		            if (true) {
		                // Check for setting and enable tracing if set
		                if (!('__ResourceTraceState' in window) && localStorage['EnableResourceTracing']) {
		                    window['__ResourceTraceState'] = {
		                        log: [],
		                        stack: [],
		                        types: {},
		                        exposed: {}
		                    };
		                }
		                log('Created new root level Resource Scope');
		            }
		        }
		        this.scope = new Scope_1.default();
		        this.options = options;
		    }
		    Object.defineProperty(HandleManager.prototype, "isDisposed", {
		        get: function () {
		            return this.scope.isDisposed;
		        },
		        enumerable: true,
		        configurable: true
		    });
		    HandleManager.prototype.block = function (key) {
		        return this._expose(key);
		    };
		    HandleManager.prototype.isDescendantOf = function (manager) {
		        return this._level > manager._level;
		    };
		    HandleManager.prototype.getResourceScope = function (options) {
		        // Bypass type check in order to pass non-exported class to public constructor
		        return this.scope.attach(new ResourceScope(this, options));
		    };
		    HandleManager.prototype.getHandle = function (key) {
		        var manager = this;
		        var keyId = key.id;
		        // Starting with this scope, attempt to find the first scope with an entry (may be undefined)
		        // for the given key. Stop when there are no more ancestor scopes.
		        while (!(keyId in manager.handles) && manager._parent) {
		            manager = manager._parent;
		        }
		        return manager.handles[keyId] || (this.options.useFactoriesOnKeys && key.factory && (manager.handles[keyId] = new Handle({
		            value: key.factory,
		            manager: manager
		        })));
		    };
		    HandleManager.prototype.getLocalInstanceHandle = function (keyId) {
		        var handle = this.handles[keyId];
		        // If we have a handle with a manager, return it.
		        return handle && handle.manager && handle;
		    };
		    HandleManager.prototype.expose = function (key, factory, instance) {
		        return this._expose(key, function (handleManager) { return new Handle({
		            value: factory.value,
		            loader: factory.loader,
		            manager: handleManager
		        }, instance && handleManager); });
		    };
		    HandleManager.prototype.getConsumer = function () {
		        this.lock();
		        var consumer = new ResourceConsumer(this);
		        this.getConsumer = function () { return consumer; };
		        return consumer;
		    };
		    HandleManager.prototype.getLoader = function () {
		        this.lock();
		        var loader = new ResourceLoader(this);
		        this.getLoader = function () { return loader; };
		        return loader;
		    };
		    HandleManager.prototype.dispose = function () {
		        this.scope.dispose();
		        this.handles = {};
		        this.getConsumer = onConsumeAfterDispose;
		        this.getLoader = onLoadAfterDispose;
		    };
		    HandleManager.prototype.bind = function (key) {
		        var handle = this.getHandle(key);
		        if (handle) {
		            return this._expose(key, function (handleManager) { return handle.promote(handleManager); });
		        }
		        return this;
		    };
		    HandleManager.prototype.getWritableHandleManager = function () {
		        return this;
		    };
		    HandleManager.prototype.lock = function () {
		        this.getWritableHandleManager = this._fork;
		    };
		    HandleManager.prototype._fork = function () {
		        if (this.options.lockResourcesForChildren) {
		            return this.scope.attach(new HandleManager(this));
		        }
		        else if (true) {
		            log("Expose after consume/child at " + this._level);
		        }
		        return this;
		    };
		    HandleManager.prototype._expose = function (key, createHandle) {
		        if (this.isDisposed) {
		            throw new Error('Cannot expose a resource on a ResourceScope that has been disposed.');
		        }
		        if (key === exports.resourceScopeKey) {
		            throw new Error('It is illegal to expose the ResourceScope key');
		        }
		        var keyId = key.id;
		        var handleManager = this.getWritableHandleManager();
		        var handles = handleManager.handles;
		        if (handles[keyId]) {
		            if (this.options.noDoubleExpose) {
		                throw new Error(key.toString() + " has already been exposed/consumed at this scope.");
		            }
		            else if (true) {
		                log("Duplicate exposure of " + key.toString() + ".");
		            }
		        }
		        handles[keyId] = createHandle ? createHandle(handleManager) : void 0;
		        return handleManager;
		    };
		    return HandleManager;
		}());
		function onConsumeAfterDispose() {
		    throw new Error('Cannot consume a resource from a ResourceScope that has been disposed.');
		}
		function onLoadAfterDispose() {
		    throw new Error('Cannot load a resource from a ResourceScope that has been disposed.');
		}
		var ResourceLoader = (function () {
		    function ResourceLoader(handleManager) {
		        this._handleManager = handleManager;
		        this._loadState = {};
		    }
		    ResourceLoader.prototype.loadAllAsync = function (dependencies) {
		        var _this = this;
		        var unloadedDependencies = this._getAllUnloadedDependencies(dependencies);
		        if (unloadedDependencies instanceof Error) {
		            return Promise_1.default.wrapError(unloadedDependencies);
		        }
		        else {
		            var loadPromises = [];
		            var _loop_1 = function(keyId) {
		                var factory = unloadedDependencies[keyId];
		                // Protect against duplicate loads due to timing bugs
		                var rawPromise = factory.loader.load();
		                factory.loader = {
		                    load: function () { return rawPromise; }
		                };
		                loadPromises.push(rawPromise.then(function (value) {
		                    if (true) {
		                        log("Loaded Resource #" + keyId);
		                    }
		                    factory.value = value;
		                    var factoryDependencies = value.dependencies;
		                    if (factoryDependencies) {
		                        return _this.loadAllAsync(factoryDependencies);
		                    }
		                }));
		            };
		            for (var keyId in unloadedDependencies) {
		                _loop_1(keyId);
		            }
		            return Promise_1.default.all(loadPromises).then(function () {
		                // Return void;
		            }, function (errors) { return errors[0] || errors; });
		        }
		    };
		    ResourceLoader.prototype._getAllUnloadedDependencies = function (dependencies) {
		        var loadStateMap = this._loadState;
		        var unloaded = {};
		        for (var id in dependencies) {
		            var dependency = dependencies[id];
		            var key = dependency.key || dependency;
		            if (key === exports.resourceScopeKey) {
		                continue;
		            }
		            var keyId = key.id;
		            if (!(keyId in loadStateMap)) {
		                loadStateMap[keyId] = true;
		                var isOptional = dependency.isOptional;
		                var handle = this._handleManager.getHandle(key);
		                if (handle) {
		                    var factory = handle.factory;
		                    if (factory.value) {
		                        var factoryDependencies = factory.value.dependencies;
		                        var unloadedDependencies = factoryDependencies ? this._getAllUnloadedDependencies(factoryDependencies) : {};
		                        if (!(unloadedDependencies instanceof Error)) {
		                            ObjectUtil_1.default.extend(unloaded, unloadedDependencies);
		                        }
		                        else if (!isOptional) {
		                            return unloadedDependencies;
		                        }
		                    }
		                    else if (!factory.loader) {
		                        return new Error(key.toString() + " is being loaded, but no loader was defined.");
		                    }
		                    else {
		                        unloaded[keyId] = factory;
		                    }
		                }
		                else if (!isOptional) {
		                    return new Error(key.toString() + " is being loaded, but has not been exposed by a parent scope.");
		                }
		            }
		        }
		        return unloaded;
		    };
		    return ResourceLoader;
		}());
		var ResourceConsumer = (function () {
		    function ResourceConsumer(handleManager) {
		        this._handleManager = handleManager;
		    }
		    ResourceConsumer.prototype.consume = function (key, isOptional, scopeOptions) {
		        var result = this._getValidHandle(key, []);
		        if (!(result instanceof Error)) {
		            return result.getInstance(key, scopeOptions);
		        }
		        else if (!isOptional) {
		            throw result;
		        }
		    };
		    ResourceConsumer.prototype.resolve = function (dependencies, scopeOptions) {
		        var result = {};
		        for (var id in dependencies) {
		            var dependency = dependencies[id];
		            if ((dependency.key || dependency) === exports.resourceScopeKey) {
		                result[id] = this._handleManager.getResourceScope(scopeOptions);
		                continue;
		            }
		            var handle = this._getValidHandle(dependency, []);
		            if (!(handle instanceof Error)) {
		                result[id] = handle.getInstance(dependency.key || dependency, scopeOptions);
		            }
		            else if (!dependency.isOptional) {
		                throw handle;
		            }
		        }
		        return result;
		    };
		    ResourceConsumer.prototype.isExposed = function (key) {
		        return !(this._getValidHandle(key, []) instanceof Error);
		    };
		    ResourceConsumer.prototype._getValidHandle = function (resourceDependency, stack) {
		        var key = resourceDependency.key || resourceDependency;
		        var keyId = key.id;
		        if (stack.indexOf(key) >= 0) {
		            // Circular reference will *always* throw, even on isExposed.
		            throw new Error(key.toString() + " has a circular dependency.");
		        }
		        // Check the cache first
		        var handleManager = this._handleManager;
		        var localHandle = handleManager.getLocalInstanceHandle(keyId);
		        if (localHandle) {
		            return localHandle;
		        }
		        var handle = localHandle || handleManager.getHandle(key);
		        if (!handle) {
		            return new Error(key.toString() + " is being consumed, but has not been exposed by a parent scope.");
		        }
		        var factoryEntry = handle.factory;
		        var factory = factoryEntry.value;
		        if (!factory) {
		            return new Error(key.toString() + " is being consumed synchronously, but was exposed asynchronously and has not been loaded.");
		        }
		        // Find the highest possible scope at which an instance of T can be stored.
		        stack.push(key);
		        var instanceManager = handle.manager;
		        var targetManager = key.useNarrowestScope ? handleManager : instanceManager || factoryEntry.manager;
		        var dependencies = factory.dependencies || {};
		        for (var id in dependencies) {
		            var dependency = dependencies[id];
		            if ((dependency.key || dependency) === exports.resourceScopeKey) {
		                continue;
		            }
		            // Recurse on dependencies.
		            var dependencyHandle = this._getValidHandle(dependency, stack);
		            if (dependencyHandle instanceof Error) {
		                if (!dependency.isOptional) {
		                    stack.pop();
		                    return dependencyHandle;
		                }
		            }
		            else if (dependencyHandle.manager.isDescendantOf(targetManager)) {
		                targetManager = dependencyHandle.manager;
		            }
		        }
		        stack.pop();
		        if (!instanceManager || instanceManager !== targetManager) {
		            // Need a new handle.
		            handle = new Handle(factoryEntry, targetManager);
		            // Place on targetManager, so that other levels can reuse
		            targetManager.handles[keyId] = handle;
		        }
		        return handleManager.handles[keyId] = handle;
		    };
		    return ResourceConsumer;
		}());
		var ResourceScope = (function () {
		    function ResourceScope(parentOrOptions, options) {
		        var parentOwner;
		        var handleManager;
		        if (parentOrOptions instanceof ResourceScope) {
		            handleManager = parentOrOptions._handleManager;
		            parentOwner = parentOrOptions._owner;
		        }
		        else if (parentOrOptions instanceof HandleManager) {
		            handleManager = parentOrOptions;
		        }
		        else {
		            options = parentOrOptions || options;
		        }
		        var scope = new Scope_1.default();
		        if (handleManager) {
		            if (handleManager.scope.isDisposed) {
		                throw new Error('Parent ResourceScope has already been disposed.');
		            }
		            handleManager.lock();
		            if (!handleManager.options.lockResourcesForChildren) {
		                this._getWritableHandleManager = this._fork;
		            }
		        }
		        this._handleManager = handleManager || (handleManager = scope.attach(new HandleManager(options)));
		        this._scope = scope;
		        var owner = options ? options.owner : '';
		        this._owner = parentOwner ? parentOwner + " > " + owner : owner;
		        if (true) {
		            log("new ResourceScope: '" + owner + "'");
		        }
		    }
		    /**
		     * Obtains an instance of a resource with the given key exposed by either this scope
		     * or a parent. Throws if the resource is not found and isOptional is not set.
		     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
		     * @param isOptional {boolean} - if true, consuming an unexposed resource will return undefined
		     * @returns an instance of the resource, if available in this scope or a parent.
		     */
		    ResourceScope.prototype.consume = function (key, isOptional) {
		        if (true) {
		            logConsume(key, isOptional);
		        }
		        return this._handleManager.getConsumer().consume(key, isOptional, { owner: key.toString() });
		    };
		    /**
		     * Obtains an instance of a resource with the given key exposed by either this scope
		     * or a parent. Throws if the resource is not found and isOptional is not set.
		     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
		     * @param isOptional {boolean} - if true, consuming an unexposed resource will return undefined
		     * @returns a promise for an instance of the resource, if available in this scope or a parent.
		     */
		    ResourceScope.prototype.consumeAsync = function (key, isOptional) {
		        if (true) {
		            logConsume(key, isOptional);
		        }
		        var handleManager = this._handleManager;
		        return handleManager.getLoader().loadAllAsync({
		            resource: {
		                key: key,
		                isOptional: isOptional
		            }
		        }).then(function () {
		            return handleManager.getConsumer().consume(key, isOptional, { owner: key.toString() });
		        });
		    };
		    /**
		     * Ensures that the specified dependencies have been loaded for synchronous consumption.
		     * @param dependencies {IResourceDependencies} - the dependencies to load.
		     * @returns a promise that will complete when the specified resources are available.
		     */
		    ResourceScope.prototype.load = function (dependencies) {
		        return this._handleManager.getLoader().loadAllAsync(dependencies);
		    };
		    /**
		     * Exposes an asynchronous loader for a resource with the given type-safe key.
		     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
		     * @param loader - the object that can asynchronously load a factory of the desired type
		     */
		    ResourceScope.prototype.exposeAsync = function (key, loader) {
		        this._expose(key, {
		            loader: loader
		        });
		    };
		    /**
		     * Exposes a factory for a resource with the given type-safe key.
		     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
		     * @param factory - the factory that will construct instances when required by this or any child scope.
		     */
		    ResourceScope.prototype.exposeFactory = function (key, factory) {
		        this._expose(key, {
		            value: factory
		        });
		    };
		    /**
		     * Exposes a resource with the given type-safe key.
		     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
		     * @param instance - the instance of the resource to use within this scope.
		     */
		    ResourceScope.prototype.expose = function (key, instance) {
		        if (true) {
		            logExpose(key, this._owner, instance);
		        }
		        this._expose(key, {
		            value: new ConstantResourceFactory(instance)
		        }, instance);
		        return instance;
		    };
		    /**
		     * Hides any resources exposed by parent scopes for the specified key.
		     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
		     */
		    ResourceScope.prototype.block = function (key) {
		        this._handleManager = this._getWritableHandleManager().block(key);
		    };
		    /**
		     * Re-exposes the currently exposed resource at the specified key at the current resource scope.
		     * The effect of this is that the lifetime of instances created by the resource system that depend on the
		     * specific key will not exceed the lifetime of this resource scope.
		     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
		     */
		    ResourceScope.prototype.bind = function (key) {
		        this._handleManager = this._getWritableHandleManager().bind(key);
		    };
		    /**
		     * Checks if a given resource key is exposed in the resource scope (including in parent scopes).
		     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
		     * @return {boolean}
		     */
		    ResourceScope.prototype.isExposed = function (key) {
		        if (true) {
		            logConsume(key, true);
		        }
		        var handleManager = this._handleManager;
		        return !handleManager.isDisposed && handleManager.getConsumer().isExposed(key);
		    };
		    /**
		     * Produces an alternate constructor for the given type which pre-injects the instance with resources
		     * before invoking the real constructor.
		     * This function preserves the original argument types for the constructor, allowing validation
		     * of arguments.
		     * @param type - the type of object for which to create an injected constructor.
		     * @returns an injected version of the original constructor for the type.
		     */
		    ResourceScope.prototype.injected = function (type, options) {
		        if (options === void 0) { options = {}; }
		        var injectChildResourceScope = options.injectChildResourceScope;
		        var childOptions = {
		            owner: options.owner || type.name
		        };
		        var resources = injectChildResourceScope ? this._scope.attach(new ResourceScope(this, childOptions)) : this;
		        var Injected = function () {
		            this.resources = resources;
		            var instance = type.apply(this, arguments) || this;
		            if (injectChildResourceScope) {
		                Disposable_1.hook(instance, disposeInstanceResources);
		            }
		            return instance;
		        };
		        if (true) {
		            // This pattern results in the correct type being displayed in the debugger
		            var wrappedConstructor_2 = Injected;
		            Injected = function () {
		                logBeginConstruction(type, 'Resources.injected');
		                var instance = wrappedConstructor_2.apply(Object.create(type.prototype), arguments);
		                logEndConstruction(type, 'Resources.injected');
		                return instance;
		            };
		        }
		        Injected.prototype = type.prototype;
		        return Injected;
		    };
		    ResourceScope.prototype.resolved = function (type, dependencies) {
		        var finalDependencies = ObjectUtil_1.default.extend(ObjectUtil_1.default.extend({}, type.dependencies), dependencies);
		        var resolvedDependencies = this._handleManager.getConsumer().resolve(finalDependencies);
		        return getResolvedConstructor(type, resolvedDependencies);
		    };
		    ResourceScope.prototype.resolvedAsync = function (type, dependencies) {
		        var _this = this;
		        dependencies = type.dependencies || dependencies;
		        return this._handleManager.getLoader().loadAllAsync(dependencies).then(function () { return _this.resolved(type, dependencies); });
		    };
		    /**
		     * Disposes this resource scope and any resources bound to this scope's lifetime.
		     */
		    ResourceScope.prototype.dispose = function () {
		        this._scope.dispose();
		    };
		    ResourceScope.prototype._expose = function (key, factoryInfo, instance) {
		        this._handleManager = this._getWritableHandleManager().expose(key, factoryInfo, instance);
		    };
		    // These methods are to support legacy call patterns by imitating old behavior
		    ResourceScope.prototype._getWritableHandleManager = function () {
		        return this._handleManager;
		    };
		    ResourceScope.prototype._fork = function () {
		        delete this._getWritableHandleManager;
		        if (true) {
		            log("Fork: '" + this._owner + "'");
		        }
		        return this._scope.attach(new HandleManager(this._handleManager));
		    };
		    return ResourceScope;
		}());
		exports.ResourceScope = ResourceScope;
		function disposeInstanceResources() {
		    this.resources.dispose();
		}
		if (true) {
		    var getTraceState_1 = function () {
		        return window['__ResourceTraceState'];
		    };
		    logBeginConstruction = function (type, wrapperType) {
		        var traceState = getTraceState_1();
		        if (traceState) {
		            var typeName = type['name'];
		            var stack = traceState.stack, types = traceState.types;
		            var parent_1 = stack[stack.length - 1] || '_root';
		            (types[parent_1] || (types[parent_1] = {}))[typeName] = wrapperType;
		            if (!(typeName in types)) {
		                types[typeName] = {};
		            }
		        }
		    };
		    logEndConstruction = function (type, wrapperType) {
		        var traceState = getTraceState_1();
		        if (traceState) {
		            traceState.stack.pop();
		        }
		    };
		    logConsume = function (key, isOptional) {
		        var traceState = getTraceState_1();
		        if (traceState) {
		            var stack = traceState.stack, types = traceState.types;
		            var parent_2 = stack[stack.length - 1] || '_root';
		            (types[parent_2] || (types[parent_2] = {}))[isOptional ? key.id + "?" : key.id] = key.name;
		        }
		    };
		    logExpose = function (key, owner, instance) {
		        var traceState = getTraceState_1();
		        if (traceState) {
		            var typeName = instance && instance.constructor['name'];
		            var exposed = traceState.exposed;
		            (exposed[owner] || (exposed[owner] = [])).push({
		                id: key.id,
		                name: key.name,
		                type: typeName
		            });
		        }
		    };
		    log = function (message) {
		        var traceState = getTraceState_1();
		        if (traceState) {
		            traceState.log.push(message);
		        }
		    };
		}
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = ResourceScope;
	
	
	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * This file was originally ported from WinJS.
		 */
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var Async_1 = __webpack_require__(28);
		var EventGroup_1 = __webpack_require__(62);
		var async = new Async_1.default();
		function doneHandler(value) {
		    "use strict";
		    async.setImmediate(function () {
		        throw value;
		    });
		}
		var errorET = "error";
		var canceledName = "Canceled";
		var events;
		//
		// Global error counter, for each error which enters the system we increment this once and then
		// the error number travels with the error as it traverses the tree of potential handlers.
		//
		// When someone has registered to be told about error [using EventGroup.on(Promise, 'error')] promises
		// which are in error will get tagged with a ._errorId field. This tagged field is the
		// contract by which nested promises with errors will be identified as chaining for the
		// purposes of the callonerror semantics. If a nested promise in error is encountered without
		// a ._errorId it will be assumed to be foreign and treated as an interop boundary and
		// a new error id will be minted.
		//
		var error_number = 1;
		;
		var state_created; // -> working
		var state_working; // -> error | error_notify | success | success_notify | canceled | waiting
		var state_waiting; // -> error | error_notify | success | success_notify | waiting_canceled
		var state_waiting_canceled; // -> error | error_notify | success | success_notify | canceling
		var state_canceled; // -> error | error_notify | success | success_notify | canceling
		var state_canceling; // -> error_notify
		var state_success_notify; // -> success
		var state_success; // -> .
		var state_error_notify; // -> error
		var state_error; // -> .
		// Noop function, used in the various states to indicate that they don't support a given
		// message. Named with the somewhat cute name '_' because it reads really well in the states.
		function _() {
		    "use strict";
		}
		// Initial state
		//
		state_created = {
		    name: "created",
		    enter: function (promise) {
		        promise._setState(state_working);
		    },
		    cancel: _,
		    done: _,
		    then: _,
		    _completed: _,
		    _error: _,
		    _notify: _,
		    _setCompleteValue: _,
		    _setErrorValue: _
		};
		// Ready state, waiting for a message (completed/error), able to be canceled
		//
		state_working = {
		    name: "working",
		    enter: _,
		    cancel: function (promise) {
		        promise._setState(state_canceled);
		    },
		    done: done,
		    then: then,
		    _completed: completed,
		    _error: error,
		    _notify: _,
		    _setCompleteValue: setCompleteValue,
		    _setErrorValue: setErrorValue
		};
		// Waiting state, if a promise is completed with a value which is itself a promise
		// (has a then() method) it signs up to be informed when that child promise is
		// fulfilled at which point it will be fulfilled with that value.
		//
		state_waiting = {
		    name: "waiting",
		    enter: function (promise) {
		        var waitedUpon = promise._value;
		        // We can special case our own intermediate promises which are not in a
		        //  terminal state by just pushing this promise as a listener without
		        //  having to create new indirection functions
		        if (waitedUpon instanceof ThenPromise &&
		            waitedUpon._state !== state_error &&
		            waitedUpon._state !== state_success) {
		            pushListener(waitedUpon, { promise: promise });
		        }
		        else {
		            var error_1 = function (value) {
		                if (waitedUpon._errorId) {
		                    promise._chainedError(value, waitedUpon);
		                }
		                else {
		                    // Because this is an interop boundary we want to indicate that this
		                    //  error has been handled by the promise infrastructure before we
		                    //  begin a new handling chain.
		                    //
		                    callonerror(promise, value, detailsForHandledError, waitedUpon, error_1);
		                    promise._error(value);
		                }
		            };
		            error_1.handlesOnError = true;
		            waitedUpon.then(promise._completed.bind(promise), error_1);
		        }
		    },
		    cancel: function (promise) {
		        promise._setState(state_waiting_canceled);
		    },
		    done: done,
		    then: then,
		    _completed: completed,
		    _error: error,
		    _notify: _,
		    _setCompleteValue: setCompleteValue,
		    _setErrorValue: setErrorValue
		};
		// Waiting canceled state, when a promise has been in a waiting state and receives a
		// request to cancel its pending work it will forward that request to the child promise
		// and then waits to be informed of the result. This promise moves itself into the
		// canceling state but understands that the child promise may instead push it to a
		// different state.
		//
		state_waiting_canceled = {
		    name: "waiting_canceled",
		    enter: function (promise) {
		        // Initiate a transition to canceling. Triggering a cancel on the promise
		        // that we are waiting upon may result in a different state transition
		        // before the state machine pump runs again.
		        promise._setState(state_canceling);
		        var waitedUpon = promise._value;
		        if (waitedUpon.cancel) {
		            waitedUpon.cancel();
		        }
		    },
		    cancel: _,
		    done: done,
		    then: then,
		    _completed: completed,
		    _error: error,
		    _notify: _,
		    _setCompleteValue: setCompleteValue,
		    _setErrorValue: setErrorValue
		};
		// Canceled state, moves to the canceling state and then tells the promise to do
		// whatever it might need to do on cancelation.
		//
		state_canceled = {
		    name: "canceled",
		    enter: function (promise) {
		        // Initiate a transition to canceling. The _cancelAction may change the state
		        // before the state machine pump runs again.
		        promise._setState(state_canceling);
		        promise._cancelAction();
		    },
		    cancel: _,
		    done: done,
		    then: then,
		    _completed: completed,
		    _error: error,
		    _notify: _,
		    _setCompleteValue: setCompleteValue,
		    _setErrorValue: setErrorValue
		};
		// Canceling state, commits to the promise moving to an error state with an error
		// object whose 'name' and 'message' properties contain the string "Canceled"
		//
		state_canceling = {
		    name: "canceling",
		    enter: function (promise) {
		        var error = new Error(canceledName);
		        error.name = error.message;
		        error["_handled"] = true;
		        promise._value = error;
		        promise._setState(state_error_notify);
		    },
		    cancel: _,
		    done: _,
		    then: _,
		    _completed: _,
		    _error: _,
		    _notify: _,
		    _setCompleteValue: _,
		    _setErrorValue: _
		};
		// Success notify state, moves a promise to the success state and notifies all children
		//
		state_success_notify = {
		    name: "complete_notify",
		    enter: function (promise) {
		        promise.done = CompletePromise.prototype.done;
		        promise.then = CompletePromise.prototype.then;
		        if (promise._listeners) {
		            var queue = [promise];
		            var p = void 0;
		            while (queue.length) {
		                p = queue.shift();
		                p._state._notify(p, queue);
		            }
		        }
		        promise._setState(state_success);
		    },
		    cancel: _,
		    done: null,
		    then: null,
		    _completed: _,
		    _error: _,
		    _notify: notifySuccess,
		    _setCompleteValue: _,
		    _setErrorValue: _
		};
		// Success state, moves a promise to the success state and does NOT notify any children.
		// Some upstream promise is owning the notification pass.
		//
		state_success = {
		    name: "success",
		    enter: function (promise) {
		        promise.done = CompletePromise.prototype.done;
		        promise.then = CompletePromise.prototype.then;
		        promise._cleanupAction();
		    },
		    cancel: _,
		    done: null,
		    then: null,
		    _completed: _,
		    _error: _,
		    _notify: notifySuccess,
		    _setCompleteValue: _,
		    _setErrorValue: _
		};
		// Error notify state, moves a promise to the error state and notifies all children
		//
		state_error_notify = {
		    name: "error_notify",
		    enter: function (promise) {
		        promise.done = ErrorPromise.prototype.done;
		        promise.then = ErrorPromise.prototype.then;
		        if (promise._listeners) {
		            var queue = [promise];
		            var p = void 0;
		            while (queue.length) {
		                p = queue.shift();
		                p._state._notify(p, queue);
		            }
		        }
		        promise._setState(state_error);
		    },
		    cancel: _,
		    done: null,
		    then: null,
		    _completed: _,
		    _error: _,
		    _notify: notifyError,
		    _setCompleteValue: _,
		    _setErrorValue: _
		};
		// Error state, moves a promise to the error state and does NOT notify any children.
		// Some upstream promise is owning the notification pass.
		//
		state_error = {
		    name: "error",
		    enter: function (promise) {
		        promise.done = ErrorPromise.prototype.done;
		        promise.then = ErrorPromise.prototype.then;
		        promise._cleanupAction();
		    },
		    cancel: _,
		    done: null,
		    then: null,
		    _completed: _,
		    _error: _,
		    _notify: notifyError,
		    _setCompleteValue: _,
		    _setErrorValue: _
		};
		//
		// The statemachine implementation follows a very particular pattern, the states are specified
		// as static stateless bags of functions which are then indirected through the state machine
		// instance (a Promise). As such all of the functions on each state have the promise instance
		// passed to them explicitly as a parameter and the Promise instance members do a little
		// dance where they indirect through the state and insert themselves in the argument list.
		//
		// We could instead call directly through the promise states however then every caller
		// would have to remember to do things like pumping the state machine to catch state transitions.
		//
		//
		// Implementations of shared state machine code.
		//
		function completed(promise, value) {
		    "use strict";
		    var targetState;
		    if (value && typeof value === "object" && typeof value.then === "function") {
		        targetState = state_waiting;
		    }
		    else {
		        targetState = state_success_notify;
		    }
		    promise._value = value;
		    promise._setState(targetState);
		}
		function createErrorDetails(exception, error, promise, id, parent, handler) {
		    "use strict";
		    return {
		        exception: exception,
		        error: error,
		        promise: promise,
		        handler: handler,
		        id: id,
		        parent: parent
		    };
		}
		function detailsForHandledError(promise, errorValue, context, handler) {
		    "use strict";
		    var exception = context._isException;
		    var errorId = context._errorId;
		    return createErrorDetails(exception ? errorValue : null, exception ? null : errorValue, promise, errorId, context, handler);
		}
		function detailsForChainedError(promise, errorValue, context) {
		    "use strict";
		    var exception = context._isException;
		    var errorId = context._errorId;
		    setErrorInfo(promise, errorId, exception);
		    return createErrorDetails(exception ? errorValue : null, exception ? null : errorValue, promise, errorId, context);
		}
		function detailsForError(promise, errorValue) {
		    "use strict";
		    var errorId = ++error_number;
		    setErrorInfo(promise, errorId);
		    return createErrorDetails(null, errorValue, promise, errorId);
		}
		function detailsForException(promise, exceptionValue) {
		    "use strict";
		    var errorId = ++error_number;
		    setErrorInfo(promise, errorId, true);
		    return createErrorDetails(exceptionValue, null, promise, errorId);
		}
		function done(promise, onComplete, onError) {
		    "use strict";
		    pushListener(promise, { c: onComplete, e: onError });
		}
		function error(promise, value, onerrorDetails, context) {
		    "use strict";
		    promise._value = value;
		    callonerror(promise, value, onerrorDetails, context);
		    promise._setState(state_error_notify);
		}
		function notifySuccess(promise, queue) {
		    "use strict";
		    var value = promise._value;
		    var listeners = promise._listeners;
		    if (!listeners) {
		        return;
		    }
		    promise._listeners = null;
		    var i;
		    var len;
		    for (i = 0, len = Array.isArray(listeners) ? listeners.length : 1; i < len; i++) {
		        var listener = len === 1 ? listeners : listeners[i];
		        var onComplete = listener.c;
		        var target = listener.promise;
		        if (target) {
		            try {
		                target._setCompleteValue(onComplete ? onComplete(value) : value);
		            }
		            catch (ex) {
		                target._setExceptionValue(ex);
		            }
		            if (target._state !== state_waiting && target._listeners) {
		                queue.push(target);
		            }
		        }
		        else {
		            CompletePromise.prototype.done.call(promise, onComplete);
		        }
		    }
		}
		function notifyError(promise, queue) {
		    "use strict";
		    var value = promise._value;
		    var listeners = promise._listeners;
		    if (!listeners) {
		        return;
		    }
		    promise._listeners = null;
		    var i;
		    var len;
		    for (i = 0, len = Array.isArray(listeners) ? listeners.length : 1; i < len; i++) {
		        var listener = len === 1 ? listeners : listeners[i];
		        var onError = listener.e;
		        var target = listener.promise;
		        if (target) {
		            var asyncCallbackStarted = false;
		            try {
		                if (onError) {
		                    asyncCallbackStarted = true;
		                    if (!onError.handlesOnError) {
		                        callonerror(target, value, detailsForHandledError, promise, onError);
		                    }
		                    target._setCompleteValue(onError(value));
		                }
		                else {
		                    target._setChainedErrorValue(value, promise);
		                }
		            }
		            catch (ex) {
		                target._setExceptionValue(ex);
		            }
		            if (target._state !== state_waiting && target._listeners) {
		                queue.push(target);
		            }
		        }
		        else {
		            ErrorPromise.prototype.done.call(promise, null, onError);
		        }
		    }
		}
		function callonerror(promise, value, onerrorDetailsGenerator, context, handler) {
		    "use strict";
		    if (value instanceof Error && value.message === canceledName) {
		        return;
		    }
		    events.raise(errorET, onerrorDetailsGenerator(promise, value, context, handler));
		}
		function pushListener(promise, listener) {
		    "use strict";
		    var listeners = promise._listeners;
		    if (listeners) {
		        // We may have either a single listener (which will never be wrapped in an array)
		        // or 2+ listeners (which will be wrapped). Since we are now adding one more listener
		        // we may have to wrap the single listener before adding the second.
		        listeners = Array.isArray(listeners) ? listeners : [listeners];
		        listeners.push(listener);
		    }
		    else {
		        listeners = listener;
		    }
		    promise._listeners = listeners;
		}
		// The difference beween setCompleteValue()/setErrorValue() and complete()/error() is that setXXXValue() moves
		// a promise directly to the success/error state without starting another notification pass (because one
		// is already ongoing).
		function setErrorInfo(promise, errorId, isException) {
		    "use strict";
		    promise._isException = isException || false;
		    promise._errorId = errorId;
		}
		function setErrorValue(promise, value, onerrorDetails, context) {
		    "use strict";
		    promise._value = value;
		    callonerror(promise, value, onerrorDetails, context);
		    promise._setState(state_error);
		}
		function setCompleteValue(promise, value) {
		    "use strict";
		    var targetState;
		    if (value && typeof value === "object" && typeof value.then === "function") {
		        targetState = state_waiting;
		    }
		    else {
		        targetState = state_success;
		    }
		    promise._value = value;
		    promise._setState(targetState);
		}
		function then(promise, onComplete, onError) {
		    "use strict";
		    var result = new ThenPromise(promise);
		    pushListener(promise, { promise: result, c: onComplete, e: onError });
		    return result;
		}
		//
		// Slim promise implementations for already completed promises, these are created
		// under the hood on synchronous completion paths as well as by Promise.wrap
		// and Promise.wrapError.
		//
		var ErrorPromise = (function () {
		    function ErrorPromise(value, errorFunc) {
		        if (errorFunc === void 0) { errorFunc = detailsForError; }
		        this._value = value;
		        callonerror(this, value, errorFunc);
		    }
		    ErrorPromise.prototype.cancel = function () {
		        /* No-op */
		    };
		    ErrorPromise.prototype.done = function (unused, onError) {
		        var value = this._value;
		        if (onError) {
		            try {
		                if (!onError.handlesOnError) {
		                    callonerror(null, value, detailsForHandledError, this, onError);
		                }
		                var result = onError(value);
		                if (result && typeof result === "object" && typeof result.done === "function") {
		                    // If a promise is returned we need to wait on it.
		                    result.done();
		                }
		                return;
		            }
		            catch (ex) {
		                value = ex;
		            }
		        }
		        if (value instanceof Error && value.message === canceledName) {
		            // suppress cancel
		            return;
		        }
		        // force the exception to be thrown asyncronously to avoid any try/catch blocks
		        //
		        doneHandler(value);
		    };
		    ErrorPromise.prototype.then = function (unused, onError) {
		        // If the promise is already in a error state and no error handler is provided
		        // we optimize by simply returning the promise instead of creating a new one.
		        //
		        if (!onError) {
		            return this;
		        }
		        var result;
		        var value = this._value;
		        try {
		            if (!onError.handlesOnError) {
		                callonerror(null, value, detailsForHandledError, this, onError);
		            }
		            result = new CompletePromise(onError(value));
		        }
		        catch (ex) {
		            // If the value throw from the error handler is the same as the value
		            // provided to the error handler then there is no need for a new promise.
		            //
		            if (ex === value) {
		                result = this;
		            }
		            else {
		                result = new ExceptionPromise(ex);
		            }
		        }
		        return result;
		    };
		    return ErrorPromise;
		}());
		var ExceptionPromise = (function (_super) {
		    __extends(ExceptionPromise, _super);
		    function ExceptionPromise(value) {
		        _super.call(this, value, detailsForException);
		    }
		    return ExceptionPromise;
		}(ErrorPromise));
		var CompletePromise = (function () {
		    function CompletePromise(value) {
		        if (value && typeof value === "object" && typeof value.then === "function") {
		            var result = new ThenPromise(null);
		            result._setCompleteValue(value);
		            return result;
		        }
		        this._value = value;
		    }
		    CompletePromise.prototype.cancel = function () {
		        /* No-op */
		    };
		    CompletePromise.prototype.done = function (onComplete) {
		        if (!onComplete) {
		            return;
		        }
		        try {
		            var result = onComplete(this._value);
		            if (result && typeof result === "object" && typeof result.done === "function") {
		                result.done();
		            }
		        }
		        catch (ex) {
		            // force the exception to be thrown asynchronously to avoid any try/catch blocks
		            doneHandler(ex);
		        }
		    };
		    CompletePromise.prototype.then = function (onComplete) {
		        var resultPromise;
		        try {
		            // If the value returned from the completion handler is the same as the value
		            // provided to the completion handler then there is no need for a new promise.
		            //
		            var newValue = onComplete ? onComplete(this._value) : this._value;
		            resultPromise = newValue === this._value ? this : new CompletePromise(newValue);
		        }
		        catch (ex) {
		            resultPromise = new ExceptionPromise(ex);
		        }
		        return resultPromise;
		    };
		    return CompletePromise;
		}());
		function timeout(timeoutMS) {
		    "use strict";
		    var id;
		    return new Promise(function (c) {
		        if (timeoutMS) {
		            id = async.setTimeout(c, timeoutMS);
		        }
		        else {
		            async.setImmediate(c);
		        }
		    }, function () {
		        if (id) {
		            async.clearTimeout(id);
		        }
		    });
		}
		function timeoutWithPromise(timeout, promise) {
		    "use strict";
		    var cancelPromise = function () { promise.cancel(); };
		    var cancelTimeout = function () { timeout.cancel(); };
		    timeout.then(cancelPromise);
		    promise.then(cancelTimeout, cancelTimeout);
		    return promise;
		}
		var staticCanceledPromise;
		var Promise = (function () {
		    function Promise(init, oncancel) {
		        this._init(init, oncancel);
		    }
		    Object.defineProperty(Promise, "cancel", {
		        get: function () {
		            return (staticCanceledPromise = staticCanceledPromise || new ErrorPromise(canceledName));
		        },
		        enumerable: true,
		        configurable: true
		    });
		    /**
		     * Returns a promise that is fulfilled when one of the input promises
		     * has been fulfilled.
		     */
		    Promise.any = function (values) {
		        return new Promise(function (complete, error) {
		            var keys = Object.keys(values);
		            if (keys.length === 0) {
		                complete();
		            }
		            var canceled = 0;
		            keys.forEach(function (key) {
		                Promise.as(values[key]).then(function () { complete({ key: key, value: values[key] }); }, function (e) {
		                    if (e instanceof Error && e.name === canceledName) {
		                        if ((++canceled) === keys.length) {
		                            complete(Promise.cancel);
		                        }
		                        return;
		                    }
		                    error({ key: key, value: values[key] });
		                });
		            });
		        }, function () {
		            var keys = Object.keys(values);
		            keys.forEach(function (key) {
		                var promise = Promise.as(values[key]);
		                if (typeof promise.cancel === "function") {
		                    promise.cancel();
		                }
		            });
		        });
		    };
		    Promise.as = function (value) {
		        var returnValue;
		        if (value && typeof value === "object" && typeof value.then === "function") {
		            returnValue = value;
		        }
		        else {
		            returnValue = new CompletePromise(value);
		        }
		        return returnValue;
		    };
		    /**
		     * Determines whether a value fulfills the promise contract.
		     */
		    Promise.is = function (value) {
		        return value && typeof value === "object" && typeof value.then === "function";
		    };
		    /**
		     * Determines whether an error value represents a promise cancellation.
		     */
		    Promise.isCanceled = function (e) {
		        return (e instanceof Error && e.name === canceledName);
		    };
		    Promise.all = function (values) {
		        return new Promise(function (complete, error) {
		            var keys = Object.keys(values);
		            var errors = Array.isArray(values) ? [] : {};
		            var results = Array.isArray(values) ? [] : {};
		            var undefineds = 0;
		            var pending = keys.length;
		            var argDone = function (key) {
		                if ((--pending) === 0) {
		                    var errorCount = Object.keys(errors).length;
		                    if (errorCount === 0) {
		                        complete(results);
		                    }
		                    else {
		                        var canceledCount_1 = 0;
		                        keys.forEach(function (key) {
		                            var e = errors[key];
		                            if (e instanceof Error && e.name === canceledName) {
		                                canceledCount_1++;
		                            }
		                        });
		                        if (canceledCount_1 === errorCount) {
		                            complete(Promise.cancel);
		                        }
		                        else {
		                            error(errors);
		                        }
		                    }
		                }
		            };
		            keys.forEach(function (key) {
		                var value = values[key];
		                if (value === undefined) {
		                    undefineds++;
		                }
		                else {
		                    Promise.then(value, function (value) { results[key] = value; argDone(key); }, function (value) { errors[key] = value; argDone(key); });
		                }
		            });
		            pending -= undefineds;
		            if (pending === 0) {
		                complete(results);
		                return;
		            }
		        }, function () {
		            Object.keys(values).forEach(function (key) {
		                var promise = Promise.as(values[key]);
		                if (typeof promise.cancel === "function") {
		                    promise.cancel();
		                }
		            });
		        });
		    };
		    Promise.then = function (value, onComplete, onError) {
		        return Promise.as(value).then(onComplete, onError);
		    };
		    Promise.thenEach = function (values, onComplete, onError) {
		        var result = Array.isArray(values) ? [] : {};
		        Object.keys(values).forEach(function (key) {
		            result[key] = Promise.as(values[key]).then(onComplete, onError);
		        });
		        return Promise.all(result);
		    };
		    Promise.serial = function (tasks) {
		        return tasks.reduce(function (previous, task) {
		            return previous.then(task);
		        }, Promise.wrap());
		    };
		    Promise.timeout = function (time, promise) {
		        var to = timeout(time);
		        return promise ? timeoutWithPromise(to, promise) : to;
		    };
		    Promise.wrap = function (value) {
		        var cp = new CompletePromise(value);
		        return cp;
		    };
		    /**
		     * Wraps a non-promise error value in a promise. You can use this function if you need
		     * to pass an error to a function that requires a promise.
		     */
		    Promise.wrapError = function (error) {
		        var ep = new ErrorPromise(error);
		        return ep;
		    };
		    /**
		     * Attempts to cancel the fulfillment of a promised value. If the promise hasn't
		     * already been fulfilled and cancellation is supported, the promise enters
		     * the error state with a value of Error("Canceled").
		     */
		    Promise.prototype.cancel = function () {
		        this._state.cancel(this);
		        this._run();
		    };
		    /**
		     * Allows you to specify the work to be done on the fulfillment of the promised value,
		     * the error handling to be performed if the promise fails to fulfill
		     * a value.
		     *
		     * After the handlers have finished executing, this function throws any error that would have been returned
		     * from then() as a promise in the error state.
		     *
		     * @param onComplete The function to be called if the promise is fulfilled successfully with a value. The fulfilled value is passed as the single argument. If the value is null, the fulfilled value is returned. The value returned from the function becomes the fulfilled value of the promise returned by then. If an exception is thrown while executing the function, the promise returned by then moves into the error state.
		     * @param onError The function to be called if the promise is fulfilled with an error. The error is passed as the single argument. If it is null, the error is forwarded. The value returned from the function is the fulfilled value of the promise returned by then.
		     */
		    Promise.prototype.done = function (onComplete, onError) {
		        this._state.done(this, onComplete, onError);
		    };
		    Promise.prototype.then = function (onComplete, onError) {
		        return this._state.then(this, onComplete, onError);
		    };
		    Promise.prototype._init = function (init, oncancel) {
		        this._oncancel = oncancel;
		        this._setState(state_created);
		        this._run();
		        try {
		            var complete = this._completed.bind(this);
		            var error_2 = this._error.bind(this);
		            init(complete, error_2);
		        }
		        catch (ex) {
		            this._setExceptionValue(ex);
		        }
		    };
		    Promise.prototype._cancelAction = function () {
		        if (this._oncancel) {
		            try {
		                this._oncancel();
		            }
		            catch (ex) { }
		        }
		    };
		    Promise.prototype._cleanupAction = function () {
		        this._oncancel = null;
		    };
		    Promise.prototype._chainedError = function (value, context) {
		        var result = this._state._error(this, value, detailsForChainedError, context);
		        this._run();
		        return result;
		    };
		    Promise.prototype._completed = function (value) {
		        var result = this._state._completed(this, value);
		        this._run();
		        return result;
		    };
		    Promise.prototype._error = function (value) {
		        var result = this._state._error(this, value, detailsForError);
		        this._run();
		        return result;
		    };
		    Promise.prototype._setState = function (state) {
		        this._nextState = state;
		    };
		    Promise.prototype._setCompleteValue = function (value) {
		        this._state._setCompleteValue(this, value);
		        this._run();
		    };
		    Promise.prototype._setChainedErrorValue = function (value, context) {
		        var result = this._state._setErrorValue(this, value, detailsForChainedError, context);
		        this._run();
		        return result;
		    };
		    Promise.prototype._setExceptionValue = function (value) {
		        var result = this._state._setErrorValue(this, value, detailsForException);
		        this._run();
		        return result;
		    };
		    Promise.prototype._run = function () {
		        while (this._nextState) {
		            this._state = this._nextState;
		            this._nextState = null;
		            this._state.enter(this);
		        }
		    };
		    return Promise;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Promise;
		events = new EventGroup_1.default(Promise);
		events.declare(errorET);
		//
		// Internal implementation detail promise, ThenPromise is created when a promise needs
		// to be returned from a then() method.
		//
		var ThenPromise = (function (_super) {
		    __extends(ThenPromise, _super);
		    function ThenPromise(creator) {
		        _super.call(this);
		        this._creator = creator;
		        this._initThen();
		    }
		    ThenPromise.prototype._init = function () {
		        // Override to do nothing.
		    };
		    ThenPromise.prototype._cancelAction = function () {
		        if (this._creator) {
		            this._creator.cancel();
		        }
		    };
		    ThenPromise.prototype._cleanupAction = function () {
		        this._creator = null;
		    };
		    ThenPromise.prototype._initThen = function () {
		        this._setState(state_created);
		        this._run();
		    };
		    return ThenPromise;
		}(Promise));
		var SignalPromise = (function (_super) {
		    __extends(SignalPromise, _super);
		    function SignalPromise(cancel) {
		        _super.call(this);
		        this._oncancel = cancel;
		        this._initSignal();
		    }
		    SignalPromise.prototype._init = function () {
		        // Override to do nothing.
		    };
		    SignalPromise.prototype._cancelAction = function () {
		        if (this._oncancel) {
		            this._oncancel();
		        }
		    };
		    SignalPromise.prototype._cleanupAction = function () {
		        this._oncancel = null;
		    };
		    SignalPromise.prototype._initSignal = function () {
		        this._setState(state_created);
		        this._run();
		    };
		    return SignalPromise;
		}(Promise));
		exports.SignalPromise = SignalPromise;
	
	
	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var ErrorHelper_1 = __webpack_require__(23);
		/** An instance of EventGroup allows anything with a handle to it to trigger events on it.
		 *  If the target is an HTMLElement, the event will be attached to the element and can be
		 *  triggered as usual (like clicking for onclick).
		 *  The event can be triggered by calling EventGroup.raise() here. If the target is an
		 *  HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets
		 *  handled here in EventGroup, and the handler is called in the context of the parent
		 *  (which is passed in in the constructor).
		 */
		var EventGroup = (function () {
		    /** parent: the context in which events attached to non-HTMLElements are called */
		    function EventGroup(parent) {
		        this._id = EventGroup._uniqueId++;
		        this._parent = parent;
		        this._eventRecords = [];
		    }
		    /** For IE8, bubbleEvent is ignored here and must be dealt with by the handler.
		     *  Events raised here by default have bubbling set to false and cancelable set to true.
		     *  This applies also to built-in events being raised manually here on HTMLElements,
		     *  which may lead to unexpected behavior if it differs from the defaults.
		     */
		    EventGroup.raise = function (target, eventName, eventArgs, bubbleEvent) {
		        var retVal;
		        if (EventGroup._isElement(target)) {
		            if (document.createEvent) {
		                var ev = document.createEvent('HTMLEvents');
		                ev.initEvent(eventName, bubbleEvent, true);
		                ev['args'] = eventArgs;
		                retVal = target.dispatchEvent(ev);
		            }
		            else if (document['createEventObject']) {
		                var evObj = document['createEventObject'](eventArgs);
		                // cannot set cancelBubble on evObj, fireEvent will overwrite it
		                target.fireEvent("on" + eventName, evObj);
		            }
		        }
		        else {
		            while (target && retVal !== false) {
		                var events = target.__events__;
		                var eventRecords = events ? events[eventName] : null;
		                for (var id in eventRecords) {
		                    var eventRecordList = eventRecords[id];
		                    for (var listIndex = 0; retVal !== false && listIndex < eventRecordList.length; listIndex++) {
		                        var record = eventRecordList[listIndex];
		                        if (record.objectCallback) {
		                            retVal = record.objectCallback.call(record.parent, eventArgs);
		                        }
		                    }
		                }
		                // If the target has a parent, bubble the event up.
		                target = bubbleEvent ? target.parent : null;
		            }
		        }
		        return retVal;
		    };
		    EventGroup.isObserved = function (target, eventName) {
		        var events = target && target.__events__;
		        return !!events && !!events[eventName];
		    };
		    /** Check to see if the target has declared support of the given event. */
		    EventGroup.isDeclared = function (target, eventName) {
		        var declaredEvents = target && target.__declaredEvents;
		        return !!declaredEvents && !!declaredEvents[eventName];
		    };
		    EventGroup.stopPropagation = function (event) {
		        if (event.stopPropagation) {
		            event.stopPropagation();
		        }
		        else {
		            event.cancelBubble = true;
		        }
		    };
		    EventGroup._isElement = function (target) {
		        return !!target && (target instanceof HTMLElement || target.addEventListener);
		    };
		    EventGroup.prototype.dispose = function () {
		        if (!this._isDisposed) {
		            this._isDisposed = true;
		            this.off();
		            this._parent = null;
		        }
		    };
		    /** On the target, attach a set of events, where the events object is a name to function mapping. */
		    EventGroup.prototype.onAll = function (target, events, useCapture) {
		        for (var eventName in events) {
		            this.on(target, eventName, events[eventName], useCapture);
		        }
		    };
		    /** On the target, attach an event whose handler will be called in the context of the parent
		     * of this instance of EventGroup.
		     */
		    EventGroup.prototype.on = function (target, eventName, callback, useCapture) {
		        var _this = this;
		        if (eventName.indexOf(',') > -1) {
		            var events = eventName.split(/[ ,]+/);
		            for (var i = 0; i < events.length; i++) {
		                this.on(target, events[i], callback, useCapture);
		            }
		        }
		        else {
		            var parent = this._parent;
		            var eventRecord = {
		                target: target,
		                eventName: eventName,
		                parent: parent,
		                callback: callback,
		                objectCallback: null,
		                elementCallback: null,
		                useCapture: useCapture
		            };
		            // Initialize and wire up the record on the target, so that it can call the callback if the event fires.
		            var events_1 = (target.__events__ = target.__events__ || {});
		            events_1[eventName] = events_1[eventName] || {
		                count: 0
		            };
		            events_1[eventName][this._id] = events_1[eventName][this._id] || [];
		            events_1[eventName][this._id].push(eventRecord);
		            events_1[eventName].count++;
		            if (EventGroup._isElement(target)) {
		                var processElementEvent = function () {
		                    var args = [];
		                    for (var _i = 0; _i < arguments.length; _i++) {
		                        args[_i - 0] = arguments[_i];
		                    }
		                    if (_this._isDisposed) {
		                        return;
		                    }
		                    try {
		                        var result = callback.apply(parent, args);
		                        if (result === false && args[0] && args[0].preventDefault) {
		                            var e = args[0];
		                            e.preventDefault();
		                            e.cancelBubble = true;
		                        }
		                    }
		                    catch (e) {
		                        ErrorHelper_1.default.log(e);
		                    }
		                    return result;
		                };
		                eventRecord.elementCallback = processElementEvent;
		                if (target.addEventListener) {
		                    /* tslint:disable:ban-native-functions */
		                    target.addEventListener(eventName, processElementEvent, useCapture);
		                }
		                else if (target.attachEvent) {
		                    target.attachEvent("on" + eventName, processElementEvent);
		                }
		            }
		            else {
		                var processObjectEvent = function () {
		                    var args = [];
		                    for (var _i = 0; _i < arguments.length; _i++) {
		                        args[_i - 0] = arguments[_i];
		                    }
		                    if (_this._isDisposed) {
		                        return;
		                    }
		                    return callback.apply(parent, args);
		                };
		                eventRecord.objectCallback = processObjectEvent;
		            }
		            // Remember the record locally, so that it can be removed.
		            this._eventRecords.push(eventRecord);
		        }
		    };
		    EventGroup.prototype.off = function (target, eventName, callback, useCapture) {
		        for (var i = 0; i < this._eventRecords.length; i++) {
		            var eventRecord = this._eventRecords[i];
		            if ((!target || target === eventRecord.target) &&
		                (!eventName || eventName === eventRecord.eventName) &&
		                (!callback || callback === eventRecord.callback) &&
		                ((typeof useCapture !== 'boolean') || useCapture === eventRecord.useCapture)) {
		                var events = eventRecord.target.__events__;
		                var targetArrayLookup = events[eventRecord.eventName];
		                var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;
		                // We may have already target's entries, so check for null.
		                if (targetArray) {
		                    if (targetArray.length === 1 || !callback) {
		                        targetArrayLookup.count -= targetArray.length;
		                        delete events[eventRecord.eventName][this._id];
		                    }
		                    else {
		                        targetArrayLookup.count--;
		                        targetArray.splice(targetArray.indexOf(eventRecord), 1);
		                    }
		                    if (!targetArrayLookup.count) {
		                        delete events[eventRecord.eventName];
		                    }
		                }
		                if (eventRecord.elementCallback) {
		                    if (eventRecord.target.removeEventListener) {
		                        eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.useCapture);
		                    }
		                    else if (eventRecord.target.detachEvent) {
		                        eventRecord.target.detachEvent("on" + eventRecord.eventName, eventRecord.elementCallback);
		                    }
		                }
		                this._eventRecords.splice(i--, 1);
		            }
		        }
		    };
		    /** Trigger the given event in the context of this instance of EventGroup. */
		    EventGroup.prototype.raise = function (eventName, eventArgs, bubbleEvent) {
		        return EventGroup.raise(this._parent, eventName, eventArgs, bubbleEvent);
		    };
		    /** Declare an event as being supported by this instance of EventGroup. */
		    EventGroup.prototype.declare = function (event) {
		        var declaredEvents = this._parent.__declaredEvents = this._parent.__declaredEvents || {};
		        if (typeof event === 'string') {
		            declaredEvents[event] = true;
		        }
		        else {
		            for (var i = 0; i < event.length; i++) {
		                declaredEvents[event[i]] = true;
		            }
		        }
		    };
		    EventGroup._uniqueId = 0;
		    return EventGroup;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = EventGroup;
	
	
	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var HslColor_1 = __webpack_require__(64);
		var RgbaColor_1 = __webpack_require__(65);
		var Shades_1 = __webpack_require__(66);
		/**
		 * Utility class with static methods to work with Fabric-style themes.
		 */
		var FabricTheming = (function () {
		    function FabricTheming() {
		    }
		    /**
		     * Generates a palette of Fabric colors from a primary RGB color value.
		     * @param {RgbaColor} primaryRgb Primary RGB color used to generate a palette.
		     * @param {boolean} inverted Whether the theme is inverted, with a dark background and light foreground.
		     */
		    FabricTheming.generateFabricColors = function (primaryRgb, inverted) {
		        if (inverted === void 0) { inverted = false; }
		        var generatedShades = {
		            "themeDarker": Shades_1.Shades.Darkest,
		            "themeDark": Shades_1.Shades.Darker,
		            "themeDarkAlt": Shades_1.Shades.Darker,
		            "themeLight": Shades_1.Shades.Lighter,
		            "themeLightAlt": Shades_1.Shades.Lighter,
		            "themeLighter": Shades_1.Shades.Lightest,
		            "themeLighterAlt": Shades_1.Shades.Lightest,
		            "themePrimary": Shades_1.Shades.Unshaded,
		            "themeAccent": Shades_1.Shades.Unshaded,
		            "themeSecondary": Shades_1.Shades.Medium,
		            "themeTertiary": Shades_1.Shades.Lighter,
		            "themeTertiaryAlt": Shades_1.Shades.Lighter
		        };
		        // Expected color slots. Start each defaulting to null to avoid warnings about missing slots.
		        var colors = FabricTheming._getDefaultThemeTokenMap();
		        // Starting points for the generated palette.
		        var primaryColor = RgbaColor_1.default.fromRgba(primaryRgb.R, primaryRgb.G, primaryRgb.B);
		        for (var shadeName in generatedShades) {
		            var shade = generatedShades[shadeName];
		            if (inverted && shade !== Shades_1.Shades.Unshaded) {
		                shade = Shades_1.Shades.Darkest + Shades_1.Shades.Lightest - shade;
		            }
		            colors[shadeName] = Shades_1.getShade(primaryColor, shade);
		        }
		        var accent = colors["themeAccent"];
		        colors["themeAccentTranslucent10"] = accent ?
		            RgbaColor_1.default.fromRgba(accent.R, accent.G, accent.B, 0.1 * RgbaColor_1.default.maxComponent) : null;
		        // Handle neutral slots for inverted themes
		        if (inverted) {
		            var invertedText = '#f8f8f8'; // neutralLighterAlt
		            var invertedNeutralQuaternary = '#6b6b6b';
		            var invertedNeutralQuaternaryAlt = '#707070';
		            var invertedNeutralColors = {
		                'black': '#fff',
		                'blackTranslucent40': '#66ffffff',
		                'neutralDark': '#fff',
		                'neutralPrimary': invertedText,
		                'neutralPrimaryTranslucent50': '#7ff8f8f8',
		                'neutralPrimaryAlt': '#f4f4f4',
		                'neutralSecondary': '#eaeaea',
		                'neutralSecondaryAlt': '#c8c8c8',
		                'neutralTertiary': '#a6a6a6',
		                'neutralTertiaryAlt': '#767676',
		                'neutralQuaternary': invertedNeutralQuaternary,
		                'neutralQuaternaryAlt': invertedNeutralQuaternaryAlt,
		                'cmdbarSelected': invertedNeutralQuaternary,
		                'cmdbarSelectedHover': invertedNeutralQuaternaryAlt,
		                'neutralLight': '#666666',
		                'neutralLighter': '#333',
		                'neutralLighterAlt': '#212121',
		                'primaryText': invertedText,
		                'primaryBackground': '#000',
		                'white': '#000',
		                'whiteTranslucent40': '#66000000',
		                'error': '#f00',
		                'errorBackground': '#7e3333'
		            };
		            for (var neutralSlot in invertedNeutralColors) {
		                if (invertedNeutralColors.hasOwnProperty(neutralSlot)) {
		                    colors[neutralSlot] =
		                        RgbaColor_1.default.fromHtmlColor(invertedNeutralColors[neutralSlot]);
		                }
		            }
		        }
		        return colors;
		    };
		    /**
		     * Applies an Hsl delta to an HslColor to produce a new HslColor.
		     * @param {HslColor} primaryHsl Starting HSL color value.
		     * @param {number} hDelta Delta to apply to the hue.
		     * @param {number} sDelta Delta to apply to the saturation.
		     * @param {number} lDelta Delta to apply to the luminance.
		     */
		    FabricTheming.applyHslDelta = function (primaryHsl, hDelta, sDelta, lDelta) {
		        var hue = primaryHsl.hue - hDelta;
		        if (hue > 1 || hue < 0) {
		            hue = hue - Math.floor(hue);
		        }
		        var sat = primaryHsl.sat - sDelta;
		        if (sat > 1) {
		            sat = 1;
		        }
		        else if (sat < 0) {
		            sat = 0;
		        }
		        var lum = primaryHsl.lum - lDelta;
		        if (lum > 1) {
		            lum = 1;
		        }
		        else if (lum < 0) {
		            lum = 0;
		        }
		        var hslValue = new HslColor_1.default(hue, sat, lum);
		        return hslValue;
		    };
		    FabricTheming._getDefaultThemeTokenMap = function () {
		        return {
		            backgroundOverlay: null,
		            primaryBackground: null,
		            primaryText: null,
		            themeDarker: null,
		            themeDark: null,
		            themeDarkAlt: null,
		            themePrimary: null,
		            themeSecondary: null,
		            themeTertiary: null,
		            themeLight: null,
		            themeLighter: null,
		            themeLighterAlt: null,
		            black: null,
		            cmdbarSelected: null,
		            cmdbarSelectedHover: null,
		            neutralDark: null,
		            neutralPrimary: null,
		            neutralPrimaryAlt: null,
		            neutralPrimaryTranslucent50: null,
		            neutralSecondary: null,
		            neutralSecondaryAlt: null,
		            neutralTertiary: null,
		            neutralTertiaryAlt: null,
		            neutralQuaternary: null,
		            neutralQuaternaryAlt: null,
		            neutralLight: null,
		            neutralLighter: null,
		            neutralLighterAlt: null,
		            white: null,
		            blackTranslucent40: null,
		            whiteTranslucent40: null,
		            yellow: null,
		            yellowLight: null,
		            orange: null,
		            orangeLight: null,
		            redDark: null,
		            red: null,
		            magentaDark: null,
		            magenta: null,
		            magentaLight: null,
		            purpleDark: null,
		            purple: null,
		            purpleLight: null,
		            blueDark: null,
		            blueMid: null,
		            blue: null,
		            blueLight: null,
		            tealDark: null,
		            teal: null,
		            tealLight: null,
		            greenDark: null,
		            green: null,
		            greenLight: null,
		            error: null,
		            errorBackground: null,
		            success: null,
		            successBackground: null,
		            alert: null,
		            alertBackground: null,
		            infoBackground: null,
		            info: null,
		            orangeLighter: null
		        };
		    };
		    return FabricTheming;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = FabricTheming;
	
	
	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var RgbaColor_1 = __webpack_require__(65);
		/**
		 * A color represented by hue, saturation, luminance, and alpha (opacity) components.
		 */
		var HslColor = (function () {
		    /**
		     * Constructs a new HSL color object.
		     * @param {number} h The hue (between 0 and 1) of the color.
		     * @param {number} s The saturation (between 0 and 1) of the color.
		     * @param {number} l The luminance (between 0 and 1) of the color.
		     * @param {number} a The opacity (between 0 and 255) of the color.
		     */
		    function HslColor(h, s, l, a) {
		        function LimitNumberToUnitInterval(value) {
		            return Math.min(1.0, Math.max(0.0, value));
		        }
		        this.hue = LimitNumberToUnitInterval(h);
		        this.sat = LimitNumberToUnitInterval(s);
		        this.lum = LimitNumberToUnitInterval(l);
		        this.alpha = a == null ? RgbaColor_1.default.maxComponent : a;
		    }
		    /**
		     * Constructs an HslColor from an RgbaColor.
		     * @param {RgbaColor} color The color to convert to HSL.
		     */
		    HslColor.fromRgba = function (color) {
		        // Using integer values as much as possible to make comparisons easier.
		        // I will indicate non-integer values with a  "_float" suffix.
		        // These integer values are each some integer multiple of the true value.
		        var scaleFactor = RgbaColor_1.default.maxComponent;
		        var h_float = 0.0;
		        var s_float = 0.0;
		        var l_float = 0.0;
		        var r = color.R;
		        var g = color.G;
		        var b = color.B;
		        var cMax = Math.max(Math.max(r, g), b);
		        var cMin = Math.min(Math.min(r, g), b);
		        var twiceL = cMax + cMin;
		        l_float = twiceL / (2 * scaleFactor);
		        if (cMax === cMin) {
		            s_float = 0.0;
		            h_float = -1.0;
		        }
		        else {
		            var dmax = cMax - cMin;
		            var pmax = cMax + cMin;
		            // The scale factor cancels when we divide scaled values, so divisions can ignore it.
		            if (twiceL <= 1 * scaleFactor) {
		                s_float = dmax / pmax;
		            }
		            else {
		                s_float = dmax / (2 * scaleFactor - pmax); // Safe, since cMax != cMin
		            }
		            var dr_float = (cMax - r) * (1 / 6) / dmax;
		            var dg_float = (cMax - g) * (1 / 6) / dmax;
		            var db_float = (cMax - b) * (1 / 6) / dmax;
		            if (r === cMax) {
		                h_float = db_float - dg_float;
		            }
		            else if (g === cMax) {
		                h_float = (1 / 3) + dr_float - db_float;
		            }
		            else {
		                h_float = (2 / 3) + dg_float - dr_float;
		            }
		            if (h_float < 0) {
		                h_float += 1.0;
		            }
		            if (h_float > 1.0) {
		                h_float -= 1.0;
		            }
		        }
		        return new HslColor(h_float, s_float, l_float, color.A);
		    };
		    /**
		     * Converts a hue, saturation, or luminance value between 0 and 1 into
		     * an integer between 0 and 255.
		     */
		    HslColor._hslComponentToByte = function (value) {
		        var c_rgbaMax = RgbaColor_1.default.maxComponent;
		        var result = Math.round(c_rgbaMax * value);
		        return Math.min(c_rgbaMax, Math.max(0, result));
		    };
		    /**
		     * Internal method which given the calculated magic numbers and the hue,
		     * will calculate the appropriate RGB number.
		     * This algorithm is intended to stay in-sync with the equivalent code in
		     * mso\officespace\fscolorgallery.cpp.
		     * @param {number} m1 The first magic number.
		     * @param {number} m2 The second magic number.
		     * @param {number} hue The hue to be converted using the magic numbers.
		     */
		    HslColor._hueToRgbComponent = function (m1, m2, hue) {
		        var result;
		        if (hue < 0) {
		            hue += 1;
		        }
		        if (hue > 1) {
		            hue -= 1;
		        }
		        if (hue < 1 / 6) {
		            result = m1 + (m2 - m1) * hue * 6;
		        }
		        else if (hue < 1 / 2) {
		            result = m2;
		        }
		        else if (hue < 2 / 3) {
		            result = m1 + (m2 - m1) * (2 / 3 - hue) * 6;
		        }
		        else {
		            result = m1;
		        }
		        return HslColor._hslComponentToByte(result);
		    };
		    /**
		     * Darkens the color by the provided factor.
		     * @param {number} factor The factor (between 0 and 1) by which to scale the luminance.
		     */
		    HslColor.prototype.darken = function (factor) {
		        // TODO: Validate input.
		        this.lum *= factor;
		    };
		    /**
		     * Lightens the color by the provided factor.
		     * @param {number} factor The factor (between 0 and 1) by which to scale the luminance.
		     */
		    HslColor.prototype.lighten = function (factor) {
		        // TODO: Validate input.
		        this.lum = this.lum * factor + (1 - factor);
		    };
		    /**
		     * Returns an RgbaColor representation of this HslColor.
		     */
		    HslColor.prototype.toRgbaColor = function () {
		        var r;
		        var g;
		        var b;
		        var hue = this.hue;
		        var saturation = this.sat;
		        var luminance = this.lum;
		        if (Math.round(saturation * RgbaColor_1.default.maxComponent) === 0) {
		            r = g = b = HslColor._hslComponentToByte(luminance);
		        }
		        else {
		            var m1;
		            var m2;
		            if (luminance <= 0.5) {
		                m2 = luminance * (1 + saturation);
		            }
		            else {
		                m2 = luminance + saturation - (luminance * saturation);
		            }
		            m1 = 2 * luminance - m2;
		            r = HslColor._hueToRgbComponent(m1, m2, hue + (1 / 3));
		            g = HslColor._hueToRgbComponent(m1, m2, hue);
		            b = HslColor._hueToRgbComponent(m1, m2, hue - (1 / 3));
		        }
		        return RgbaColor_1.default.fromRgba(r, g, b, this.alpha);
		    };
		    return HslColor;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = HslColor;
	
	
	/***/ },
	/* 65 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * A color represented by red, green, blue, and alpha (opacity) components.
		 */
		var RgbaColor = (function () {
		    /** Constructs a default RgbaColor. Use RgbaColor.fromRgba to specify components. */
		    function RgbaColor() {
		        this.R = 0;
		        this.G = 0;
		        this.B = 0;
		        this.A = RgbaColor.maxComponent; // Default to fully opaque.
		    }
		    /**
		     * Creates a copy of the given color.
		     * @param {RgbaColor} c The color to clone.
		     */
		    RgbaColor.clone = function (c) {
		        return RgbaColor.fromRgba(c.R, c.G, c.B, c.A);
		    };
		    /**
		     * Returns true if the colors have identical component values of R, G, B, and A.
		     * @param {RgbaColor} c1 The first color to compare.
		     * @param {RgbaColor} c2 The second color to compare.
		     */
		    RgbaColor.equals = function (c1, c2) {
		        var c1IsNull = !c1;
		        var c2IsNull = !c2;
		        if (c1IsNull || c2IsNull) {
		            return c1IsNull && c2IsNull;
		        }
		        else {
		            return c1.R === c2.R && c1.G === c2.G && c1.B === c2.B && c1.A === c2.A;
		        }
		    };
		    /**
		     * Creates an RgbaColor from red, green, blue, and alpha component values.
		     * @param {number} r The red component value (between 0 and 255).
		     * @param {number} g The green component value (between 0 and 255).
		     * @param {number} b The blue component value (between 0 and 255).
		     * @param {number} a The alpha component value (between 0 and 255).
		     */
		    RgbaColor.fromRgba = function (r, g, b, a) {
		        var colorObj = new RgbaColor;
		        colorObj.R = Math.round(r);
		        colorObj.G = Math.round(g);
		        colorObj.B = Math.round(b);
		        colorObj.A = a != null ? Math.round(a) : RgbaColor.maxComponent;
		        return colorObj;
		    };
		    /**
		     * Parses an HTML color string in the formats #AARRGGBB, #RRGGBB, or #RGB.
		     * @param {string} htmlColor The HTML color string to parse.
		     */
		    RgbaColor.fromHtmlColor = function (htmlColor) {
		        function TwoHexCharsToNumber(str, index1, index2) {
		            return parseInt(str.charAt(index1) + str.charAt(index2), 16);
		        }
		        var resultColor = new RgbaColor;
		        if (typeof htmlColor === "string" && htmlColor.charAt(0) === "#") {
		            switch (htmlColor.length) {
		                case 9:
		                    resultColor.A = TwoHexCharsToNumber(htmlColor, 1, 2);
		                    resultColor.R = TwoHexCharsToNumber(htmlColor, 3, 4);
		                    resultColor.G = TwoHexCharsToNumber(htmlColor, 5, 6);
		                    resultColor.B = TwoHexCharsToNumber(htmlColor, 7, 8);
		                    break;
		                case 7:
		                    resultColor.R = TwoHexCharsToNumber(htmlColor, 1, 2);
		                    resultColor.G = TwoHexCharsToNumber(htmlColor, 3, 4);
		                    resultColor.B = TwoHexCharsToNumber(htmlColor, 5, 6);
		                    break;
		                case 4:
		                    resultColor.R = TwoHexCharsToNumber(htmlColor, 1, 1);
		                    resultColor.G = TwoHexCharsToNumber(htmlColor, 2, 2);
		                    resultColor.B = TwoHexCharsToNumber(htmlColor, 3, 3);
		                    break;
		            }
		        }
		        return resultColor;
		    };
		    /**
		     * Converts an RgbaColor into an HTML string suitable for use as a CSS color value.
		     * @param {RgbaColor} c The color to convert.
		     * @param {boolean} bFilterValue If true, this produces a string to in the #AARRGGBB format.
		     */
		    RgbaColor.toHtmlString = function (c, bFilterValue) {
		        function ByteToHexString(b) {
		            var byte = Number(b);
		            if (!(byte >= 0 && byte <= RgbaColor.maxComponent)) {
		                throw new Error("Argument must be a Number in [0, 255]");
		            }
		            var hex = byte.toString(16);
		            if (byte < 16) {
		                hex = "0" + hex;
		            }
		            return hex;
		        }
		        if (c.A < RgbaColor.maxComponent && !bFilterValue) {
		            return "rgba(" +
		                c.R.toString(10) + ", " +
		                c.G.toString(10) + ", " +
		                c.B.toString(10) + ", " +
		                (c.A / RgbaColor.maxComponent).toFixed(2) + ")";
		        }
		        else {
		            return "#" +
		                (bFilterValue ? ByteToHexString(c.A) : "") +
		                ByteToHexString(c.R) +
		                ByteToHexString(c.G) +
		                ByteToHexString(c.B);
		        }
		    };
		    /**
		     * The maximum value of an R, G, B, or A component in an RgbaColor.
		     */
		    RgbaColor.maxComponent = 255;
		    return RgbaColor;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = RgbaColor;
	
	
	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var HslColor_1 = __webpack_require__(64);
		var RgbaColor_1 = __webpack_require__(65);
		// Various constants used for generated shades of a color.
		var WhiteShadeTable = [0.95, 0.85, 0.75, 0.65, 0.50];
		var BlackTintTable = [0.50, 0.65, 0.75, 0.85, 0.95];
		var ColorTintTable = [0.20, 0.40, 0.60];
		var ColorShadeTable = [0.75, 0.50];
		var LumTintTable = [0.10, 0.25, 0.50, 0.75, 0.90];
		var LumShadeTable = [0.90, 0.75, 0.50, 0.25, 0.10];
		var c_LuminanceLow = 0.2;
		var c_LuminanceHigh = 0.8;
		var rgbaMax = RgbaColor_1.default.maxComponent;
		var rgbaWhite = RgbaColor_1.default.fromRgba(rgbaMax, rgbaMax, rgbaMax);
		var rgbaBlack = RgbaColor_1.default.fromRgba(0, 0, 0);
		/** Shades of a given color, from Lightest to Darkest. */
		(function (Shades) {
		    Shades[Shades["Unshaded"] = 0] = "Unshaded";
		    Shades[Shades["Lightest"] = 1] = "Lightest";
		    Shades[Shades["Lighter"] = 2] = "Lighter";
		    Shades[Shades["Medium"] = 3] = "Medium";
		    Shades[Shades["Darker"] = 4] = "Darker";
		    Shades[Shades["Darkest"] = 5] = "Darkest";
		})(exports.Shades || (exports.Shades = {}));
		var Shades = exports.Shades;
		/**
		 * Returns true if the argument is a valid Shades value
		 * @param {Shades} shade The Shades value to validate.
		 */
		function _isValidShade(shade) {
		    'use strict';
		    return (shade >= Shades.Unshaded) && (shade <= Shades.Darkest);
		}
		/**
		 * Given an RgbaColor and a shade specification, generates the requested shade of the color.
		 * @param {RgbaColor} color The base color whose shades are to be computed
		 * @param {Shades} shade The shade of the base color to compute.
		 */
		function getShade(color, shade) {
		    'use strict';
		    if (!color) {
		        return null;
		    }
		    if (shade === Shades.Unshaded || !_isValidShade(shade)) {
		        return RgbaColor_1.default.fromRgba(color.R, color.G, color.B, color.A);
		    }
		    var hsl = HslColor_1.default.fromRgba(color);
		    var lum = hsl.lum;
		    var tableIndex = shade - 1;
		    if (RgbaColor_1.default.equals(color, rgbaWhite)) {
		        hsl.darken(WhiteShadeTable[tableIndex]);
		    }
		    else if (RgbaColor_1.default.equals(color, rgbaBlack)) {
		        hsl.lighten(BlackTintTable[tableIndex]);
		    }
		    else if (lum < c_LuminanceLow) {
		        hsl.lighten(LumTintTable[tableIndex]);
		    }
		    else if (lum > c_LuminanceHigh) {
		        hsl.darken(LumShadeTable[tableIndex]);
		    }
		    else {
		        if (tableIndex < ColorTintTable.length) {
		            hsl.lighten(ColorTintTable[tableIndex]);
		        }
		        else {
		            hsl.darken(ColorShadeTable[tableIndex - ColorTintTable.length]);
		        }
		    }
		    color = hsl.toRgbaColor();
		    return color;
		}
		exports.getShade = getShade;
	
	
	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var StringHelper_1 = __webpack_require__(54);
		var MembersList_1 = __webpack_require__(68);
		/**
		 * This datasource makes server call to get group related information.
		 */
		var GroupDataSource = (function () {
		    /**
		     * @constructor
		     */
		    function GroupDataSource(hostSettings) {
		        this._hostSettings = hostSettings;
		    }
		    /**
		     * Get REST Url to get group properties
		     * @param {string} Id (Guid) of the group
		     * @returns the REST url that can be used to get group basic properties
		     */
		    GroupDataSource.prototype.getGroupBasicPropertiesRESTUrl = function (groupId, withMembership) {
		        return this._getRESTUrl(StringHelper_1.format(withMembership ? GroupDataSource.groupBasicPropertiesWithMembershipUrlTemplate : GroupDataSource.groupBasicPropertiesUrlTemplate, groupId), 'SP.Directory.DirectorySession');
		    };
		    GroupDataSource.prototype.getGroupBasicProperties = function (responseText) {
		        var group = {};
		        try {
		            var response = JSON.parse(responseText);
		            if (response.d) {
		                group = this._copyGroup(response.d);
		                this._calculateMissingGroupProperties(group, group.id);
		            }
		        }
		        catch (e) {
		            group = {};
		        }
		        return group;
		    };
		    GroupDataSource.prototype._getRESTUrl = function (op, ns) {
		        return this._hostSettings.webServerRelativeUrl + '/_api/' + ns + '/' + op;
		    };
		    /**
		     * Given response from the server convert it into a group
		     */
		    GroupDataSource.prototype._copyGroup = function (src) {
		        var groupInfo = {};
		        if (src.description) {
		            groupInfo.description = src.description;
		        }
		        if (src.alias) {
		            groupInfo.alias = src.alias;
		        }
		        if (src.displayName) {
		            groupInfo.name = src.displayName;
		        }
		        if (src.principalName) {
		            groupInfo.principalName = src.principalName;
		        }
		        if (src.creationTime) {
		            groupInfo.creationTime = src.creationTime;
		        }
		        if (src.pictureUrl) {
		            groupInfo.pictureUrl = src.pictureUrl;
		        }
		        if (src.inboxUrl) {
		            groupInfo.inboxUrl = src.inboxUrl;
		        }
		        if (src.calendarUrl) {
		            groupInfo.calendarUrl = src.calendarUrl;
		        }
		        if (src.documentsUrl) {
		            groupInfo.filesUrl = src.documentsUrl;
		        }
		        if (src.siteUrl) {
		            groupInfo.sharePointUrl = src.siteUrl;
		        }
		        if (src.editGroupUrl) {
		            groupInfo.editUrl = src.editGroupUrl;
		        }
		        if (src.peopleUrl) {
		            groupInfo.membersUrl = src.peopleUrl;
		        }
		        if (src.notebookUrl) {
		            groupInfo.notebookUrl = src.notebookUrl;
		        }
		        if (src.isPublic) {
		            groupInfo.isPublic = src.isPublic;
		        }
		        if (src.mail) {
		            groupInfo.mail = src.mail;
		        }
		        // TODO: remove this once all branches get lowerCamelCase changelist
		        if (src.Description) {
		            groupInfo.description = src.Description;
		        }
		        if (src.Alias) {
		            groupInfo.alias = src.Alias;
		        }
		        if (src.DisplayName) {
		            groupInfo.name = src.DisplayName;
		        }
		        if (src.PrincipalName) {
		            groupInfo.principalName = src.PrincipalName;
		        }
		        if (src.CreationTime) {
		            groupInfo.creationTime = src.CreationTime;
		        }
		        if (src.PictureUrl) {
		            groupInfo.pictureUrl = src.PictureUrl;
		        }
		        if (src.InboxUrl) {
		            groupInfo.inboxUrl = src.InboxUrl;
		        }
		        if (src.CalendarUrl) {
		            groupInfo.calendarUrl = src.CalendarUrl;
		        }
		        if (src.DocumentsUrl) {
		            groupInfo.filesUrl = src.DocumentsUrl;
		        }
		        if (src.SiteUrl) {
		            groupInfo.sharePointUrl = src.SiteUrl;
		        }
		        if (src.EditGroupUrl) {
		            groupInfo.editUrl = src.EditGroupUrl;
		        }
		        if (src.PeopleUrl) {
		            groupInfo.membersUrl = src.PeopleUrl;
		        }
		        if (src.NotebookUrl) {
		            groupInfo.notebookUrl = src.NotebookUrl;
		        }
		        if (src.IsPublic) {
		            groupInfo.isPublic = src.IsPublic;
		        }
		        if (src.Mail) {
		            groupInfo.mail = src.Mail;
		        }
		        if (src.members || src.owners) {
		            this._copyMembership(src);
		        }
		        return groupInfo;
		    };
		    /**
		     *  Remove once federated directory makes appropriate fixes
		     */
		    GroupDataSource.prototype._calculateMissingGroupProperties = function (group, groupId) {
		        if (!group.creationTime) {
		            group.creationTime = Date.now();
		        }
		        if (!group.pictureUrl) {
		            group.pictureUrl = group.pictureUrl.replace("EWS/Exchange.asmx/s/GetUserPhoto", "OWA/service.svc/s/GetPersonaPhoto");
		        }
		        if (!group.profileUrl) {
		            group.profileUrl = this._getProfileUrl(groupId);
		        }
		        if (!group.notebookUrl && groupId) {
		            group.notebookUrl = this._getGroupStatusNotebookUrl(groupId);
		        }
		    };
		    GroupDataSource.prototype._getProfileUrl = function (id) {
		        return this._hostSettings.siteAbsoluteUrl + StringHelper_1.format(GroupDataSource.groupStatusPageTemplate, id, 'profile');
		    };
		    GroupDataSource.prototype._getGroupStatusNotebookUrl = function (id) {
		        return this._hostSettings.siteAbsoluteUrl + StringHelper_1.format(GroupDataSource.groupStatusPageTemplate, id, 'notebook');
		    };
		    GroupDataSource.prototype._copyMembership = function (src) {
		        var membershipInfo = {};
		        if (src.members && src.members.results) {
		            var membersList = this._copyMembers(src.members.results);
		            membershipInfo.membersList = membersList;
		        }
		        if (src.owners && src.owners.results) {
		            var ownersList = this._copyMembers(src.owners.results);
		            membershipInfo.ownersList = ownersList;
		        }
		        return membershipInfo;
		    };
		    /**
		     * Copy from member list json to memberList object
		     */
		    GroupDataSource.prototype._copyMembers = function (src) {
		        var membersList = new MembersList_1.default();
		        var members = new Array();
		        for (var i = 0; i < src.length; i++) {
		            var member = this._copyMember(src[i]);
		            members.push(member);
		        }
		        membersList.members = members;
		        membersList.totalCount = members.length;
		        return membersList;
		    };
		    /**
		     * Copy from json to IPerson object
		     */
		    GroupDataSource.prototype._copyMember = function (src) {
		        var user = {};
		        if (src.alias) {
		            user.sip = src.alias;
		        }
		        if (src.id) {
		            user.userId = src.id;
		        }
		        if (src.principalName) {
		            user.email = src.principalName;
		        }
		        if (src.displayName) {
		            user.name = src.displayName;
		        }
		        if (src.title) {
		            user.job = src.title;
		        }
		        if (src.pictureUrl) {
		            user.image = src.pictureUrl;
		        }
		        if (src.profilePage) {
		            user.profilePage = src.profilePage;
		        }
		        return user;
		    };
		    /**
		     * Static members
		     */
		    // Url templates
		    GroupDataSource.groupBasicPropertiesUrlTemplate = 'Group(\'{0}\')?$select=PrincipalName,DisplayName,Alias,Description,InboxUrl,CalendarUrl,DocumentsUrl,SiteUrl,EditGroupUrl,PictureUrl,PeopleUrl,NotebookUrl,Mail,IsPublic,CreationTime';
		    GroupDataSource.groupBasicPropertiesWithMembershipUrlTemplate = 'Group(\'{0}\')?$expand=Members,Owners&$select=PrincipalName,DisplayName,Alias,Description,InboxUrl,CalendarUrl,DocumentsUrl,SiteUrl,EditGroupUrl,PictureUrl,PeopleUrl,NotebookUrl,Mail,IsPublic,CreationTime,Members/PrincipalName,Members/Id,Members/DisplayName,Members/PictureUrl,Owners/PrincipalName,Owners/Id,Owners/DisplayName,Owners/PictureUrl';
		    GroupDataSource.groupStatusPageTemplate = '_layouts/15/groupstatus?id={0}&target={1}';
		    return GroupDataSource;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = GroupDataSource;
	
	
	/***/ },
	/* 68 */
	/***/ function(module, exports) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		;
		var MembersList = (function () {
		    function MembersList() {
		        this.totalCount = 0;
		        this.members = new Array();
		    }
		    /**
		     * Add given user to the members list of the group
		     */
		    MembersList.prototype.addUserToList = function (user) {
		        this.members.unshift(user);
		        this.totalCount++;
		    };
		    /**
		     * Remove user from members list of a group
		     */
		    MembersList.prototype.removeUserFromList = function (user) {
		        var indexToRemove = -1; // not found by default
		        for (var i = 0; i < this.members.length; i++) {
		            if (this.members[i].userId === user.userId) {
		                indexToRemove = i; // find the index
		            }
		        }
		        // If user exists in members list then remove it
		        if (indexToRemove >= 0) {
		            this.members.splice(indexToRemove, 1);
		            this.totalCount--;
		        }
		    };
		    return MembersList;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = MembersList;
	
	
	/***/ },
	/* 69 */
	/***/ function(module, exports) {
	
		"use strict";
		// encode <>&'"
		var ENCODE_HTML_TEXT_REGEX = /[<>&'"\\]/g;
		var CODES = {
		    '<': '&lt;',
		    '>': '&gt;',
		    '&': '&amp;',
		    '"': '&quot;',
		    '\'': '&#39;',
		    '\\': '&#92;'
		};
		var HtmlEncoding = (function () {
		    function HtmlEncoding() {
		    }
		    /**
		     * Encodes a string for use in HTML text. Not recommended for attribute values
		     * or anything that might be used in a URL.
		     */
		    HtmlEncoding.encodeText = function (inputString) {
		        if (!inputString) {
		            return "";
		        }
		        return inputString.replace(ENCODE_HTML_TEXT_REGEX, function (_match) { return CODES[_match]; });
		    };
		    return HtmlEncoding;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = HtmlEncoding;
	
	
	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var PLT_event_1 = __webpack_require__(45);
		var PLTHttpRequest_event_1 = __webpack_require__(18);
		var Api_event_1 = __webpack_require__(55);
		var EventBase_1 = __webpack_require__(9);
		var ErrorHelper_1 = __webpack_require__(23);
		var Manager_1 = __webpack_require__(10);
		exports.AppStartMarkerName = "EUPL.AppStart";
		exports.DataFetchStartMarkerName = "EUPL.DataManager.FirstDataFetch.GetItem.Start";
		exports.DataFetchEndMarkerName = "EUPL.DataManager.FirstDataFetch.GetItem.End";
		//For reference see http://www.w3.org/TR/navigation-timing/
		//also, got tips at http://www.stevesouders.com/blog/2014/08/21/resource-timing-practical-tips/
		var PerformanceCollection = (function () {
		    function PerformanceCollection() {
		    }
		    /**
		     * When list data is returned from server as deferred control, browser w3c timing responseEnd may not reflect correct timing of the manifest response end.
		     * To workaround this, we write "var g_responseEnd = new Date().getTime();" in server duration script tag.
		     * In most of the scenarios, we will still use performance.timing.responseEnd.
		     * If g_responseEnd is less than performance.timing.responseEnd or performance.timing.responseEnd is not available yet (this is will happen for deferred SPListRender sends splist data back to html), we will use g_responseEnd.
		     */
		    PerformanceCollection.getResponseEnd = function () {
		        if (window.performance && performance.timing) {
		            if (window["g_responseEnd"] &&
		                (!!performance.timing.responseEnd && (Number(window["g_responseEnd"]) < performance.timing.responseEnd) || !performance.timing.responseEnd)) {
		                return Number(window["g_responseEnd"]);
		            }
		            else {
		                return performance.timing.responseEnd;
		            }
		        }
		        else {
		            return NaN;
		        }
		    };
		    ;
		    PerformanceCollection.appStart = function () {
		        try {
		            if (window.performance && performance.timing) {
		                PerformanceCollection.mark(exports.AppStartMarkerName);
		                Manager_1.Manager.addLogHandler(this.eventLogHandler);
		                this.summary.w3cResponseEnd = (PerformanceCollection.getResponseEnd() - performance.timing.fetchStart); //Time to get the aspx from the server
		                this._times["appStart"] = new Date().getTime(); //Time it takes for our app to *start* running
		                this.summary.appStart = this._times["appStart"] - PerformanceCollection.getResponseEnd(); //Time it takes for our app to *start* running
		                this.summary.prefetchStart = -1;
		                this.summary.deferredListDataRender = -1;
		            }
		        }
		        catch (e) {
		            ErrorHelper_1.default.log(e);
		        }
		    };
		    //called when the view is fully loaded
		    PerformanceCollection.plt = function (name) {
		        try {
		            if (window.performance && performance.timing && PerformanceCollection._times["plt"] === undefined) {
		                var now = new Date().getTime();
		                Manager_1.Manager.removeLogHandler(this.eventLogHandler);
		                this._times["plt"] = (now - performance.timing.fetchStart);
		                this.summary.preRender = PerformanceCollection.getMarkerTime(exports.DataFetchStartMarkerName) - PerformanceCollection.getMarkerTime(exports.AppStartMarkerName); //Time it takes for our app to make the relevant data fetch for this view
		                this.summary.dataFetch = PerformanceCollection.getMarkerTime(exports.DataFetchEndMarkerName) - PerformanceCollection.getMarkerTime(exports.DataFetchStartMarkerName); //Time it takes for our app to get data back from the server
		                this.summary.postRender = PerformanceCollection.now() - PerformanceCollection.getMarkerTime(exports.DataFetchEndMarkerName);
		                this.summary.render = this.summary["preRender"] + this.summary["postRender"];
		                this.summary.plt = now - performance.timing.fetchStart; //unbiased end to end PLT from fetchStart that excludes unload of previous page.
		                this.summary.pltWithUnload = now - performance.timing.navigationStart; //unbiased end to end PLT from navigationStart that includes the unload of the previous page
		                this.summary.name = name;
		                //we consider an appcache hit if the w3cResponseEnd time is less than 40ms
		                this.summary.appCacheHit = this.summary.w3cResponseEnd <= 40 &&
		                    Boolean(window.applicationCache) &&
		                    Boolean(window.applicationCache.status !== window.applicationCache.UNCACHED);
		                // ASSERT(this.summary.appStart +
		                //     this.summary.dataFetch +
		                //     this.summary.postRender +
		                //     this.summary.preRender +
		                //     this.summary.w3cResponseEnd ===
		                //     this.summary.plt,
		                //     "PLT summary times do not add up");
		                // Get the count of events so we have it in the plt event logs
		                // This must be logged before log data otherwise the count is not passed
		                this.getHttpRequests();
		                var event_1 = PLT_event_1.PLT.logData(this.summary);
		                if (this.httpRequestCollection) {
		                    for (var _i = 0, _a = this.httpRequestCollection; _i < _a.length; _i++) {
		                        var eventData = _a[_i];
		                        PLTHttpRequest_event_1.PLTHttpRequest.logData(eventData, event_1);
		                    }
		                }
		                PerformanceCollection.mark('EUPL.glass');
		            }
		        }
		        catch (e) {
		            ErrorHelper_1.default.log(e);
		        }
		    };
		    PerformanceCollection.mark = function (name, limit) {
		        if (limit === null || limit === undefined || PerformanceCollection._markCount < limit) {
		            if (window.performance && window.performance.mark) {
		                window.performance.mark(name);
		            }
		            else {
		                if (window["_perfMarks"] === undefined) {
		                    window["_perfMarks"] = PerformanceCollection._marks; // make it exposed to TAB tests
		                }
		                PerformanceCollection._marks.push({
		                    name: name,
		                    startTime: new Date().getTime()
		                });
		            }
		            PerformanceCollection._markCount++;
		        }
		    };
		    PerformanceCollection.pageLoaded = function () {
		        return this._times["plt"] !== undefined;
		    };
		    PerformanceCollection.getMarkerTime = function (name) {
		        if (window.performance && window.performance.mark) {
		            var mark = window.performance.getEntriesByName(name);
		            return mark && mark.length > 0 ? Math.round(mark[0].startTime) : NaN;
		        }
		        else {
		            return NaN;
		        }
		    };
		    PerformanceCollection.now = function () {
		        return window.performance && window.performance.now ? Math.round(performance.now()) : NaN;
		    };
		    PerformanceCollection.eventLogHandler = function (event) {
		        // Look at all api events
		        if (Api_event_1.Api.isTypeOf(event)) {
		            if (PerformanceCollection._times["appDataFetchStart"] === undefined) {
		                // Calculate the start time from the first api event
		                PerformanceCollection._times["appDataFetchStart"] = event.startTime;
		            }
		            else if (event.eventType === EventBase_1.ClonedEventType.End || event.eventType === EventBase_1.ClonedEventType.Single) {
		                // Calculate the end time from the api events
		                PerformanceCollection._times["appDataFetchEnd"] = PerformanceCollection._times["appDataFetchEnd"] ? Math.max(PerformanceCollection._times["appDataFetchEnd"], event.endTime) : event.endTime;
		            }
		        }
		    };
		    PerformanceCollection.getHttpRequests = function () {
		        if (window.performance && window.performance.getEntriesByType) {
		            var httpRequestCollection = [];
		            var perfEntries = performance.getEntriesByType("resource");
		            var httpRequests = perfEntries.length;
		            for (var j = 0; j < httpRequests; j++) {
		                var data = {
		                    startTime: Math.round(perfEntries[j].startTime),
		                    url: perfEntries[j].name,
		                    duration: Math.round(perfEntries[j].duration)
		                };
		                httpRequestCollection.push(data);
		            }
		            //Make sure we get all the http requests from iframes as well
		            var iFrames = document.getElementsByTagName("iframe");
		            httpRequests += iFrames.length;
		            for (var i = 0; i < iFrames.length; i++) {
		                try {
		                    perfEntries = iFrames[i].contentWindow.performance.getEntriesByType("resource");
		                }
		                catch (e) {
		                    // If the iframe in question isn't domain lowered, we can't access it.
		                    perfEntries = null;
		                }
		                if (perfEntries) {
		                    var requests = perfEntries.length;
		                    httpRequests += requests;
		                    for (var j = 0; j < requests; j++) {
		                        var iframeData = {
		                            startTime: Math.round(perfEntries[j].startTime),
		                            url: perfEntries[j].name,
		                            duration: Math.round(perfEntries[j].duration)
		                        };
		                        httpRequestCollection.push(iframeData);
		                    }
		                }
		            }
		            this.summary.httpRequests = httpRequests;
		            this.httpRequestCollection = httpRequestCollection;
		        }
		    };
		    PerformanceCollection.summary = {};
		    PerformanceCollection._times = {};
		    PerformanceCollection._marks = []; // this is to support perf marks for enviorment like phantomJS that does not have performance.mark
		    PerformanceCollection._markCount = 0; // limit of how many perf marks to be collected
		    return PerformanceCollection;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = PerformanceCollection;
	
	
	/***/ },
	/* 71 */
	/***/ function(module, exports) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		/**
		 * This datasource makes a call to the Acronyms and Colors service and returns an IAcronymColor object.
		 */
		var SiteHeaderLogoAcronym = (function () {
		    /**
		     * @constructor
		     */
		    function SiteHeaderLogoAcronym(hostSettings) {
		        this._hostSettings = hostSettings;
		    }
		    /**
		     * Given a site name, return an URL to a REST endpoint where the site logo acronym and color information can be retrieved from.
		     * The REST endpoint is through the GetAcronymsAndColors API.
		     * Note: API takes in additional optional arguments like lcid, which as of this writing this method doesn't support.
		     *       Please extend as appropriate.
		     *
		     * @param {string} siteName Name of the site.
		     * @returns { string} the REST endpoint relative URL.
		     */
		    SiteHeaderLogoAcronym.prototype.getAcronymRESTUrl = function (siteName) {
		        return this._hostSettings.webServerRelativeUrl + ("/_api/sphome/GetAcronymsAndColors?labels=[{Text:" + encodeURIComponent('"' + siteName + '"') + "}]");
		    };
		    SiteHeaderLogoAcronym.prototype.getAcronymColor = function (responseText) {
		        //parse the responseText
		        var rtnObj = { acronym: undefined, color: undefined };
		        try {
		            var response = JSON.parse(responseText);
		            var responseResult = response.d.GetAcronymsAndColors.results[0];
		            rtnObj.acronym = responseResult.Acronym;
		            rtnObj.color = responseResult.Color;
		        }
		        catch (e) {
		            // try xml parsing
		            var parser = this._parseFn();
		            var elements = void 0;
		            var xmlDoc = parser(responseText);
		            if (elements = xmlDoc.getElementsByTagName("element")) {
		                var element = elements[0];
		                for (var i = 0; i < element.childNodes.length; i++) {
		                    switch (element.childNodes[i].nodeName) {
		                        case 'Acronym':
		                            rtnObj.acronym = element.childNodes[i].nodeValue;
		                            break;
		                        case 'Color':
		                            rtnObj.color = element.childNodes[i].nodeValue;
		                            break;
		                    }
		                }
		            }
		        }
		        return rtnObj;
		    };
		    /**
		     * Returns an XML parser.
		     */
		    SiteHeaderLogoAcronym.prototype._parseFn = function () {
		        var parseXml;
		        if (DOMParser) {
		            parseXml = function (xmlStr) {
		                return (new DOMParser()).parseFromString(xmlStr, "text/xml");
		            };
		        }
		        else if (ActiveXObject &&
		            new ActiveXObject("Microsoft.XMLDOM")) {
		            parseXml = function (xmlStr) {
		                var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
		                xmlDoc.async = "false";
		                xmlDoc.loadXML(xmlStr);
		                return xmlDoc;
		            };
		        }
		        else {
		            throw new Error("No XML parser found");
		        }
		        return parseXml;
		    };
		    return SiteHeaderLogoAcronym;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = SiteHeaderLogoAcronym;
	
	
	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var RgbaColor_1 = __webpack_require__(65);
		var ThemeCache_1 = __webpack_require__(73);
		var Promise_1 = __webpack_require__(61);
		var Engagement_event_1 = __webpack_require__(15);
		var Qos_event_1 = __webpack_require__(20);
		/**
		 * Provides theme data, either from the local cache or from the server.
		 */
		var ThemeProvider = (function () {
		    /**
		     * Constructs a ThemeProvider which acts like the provided loadData function but with caching.
		     * @param {() => Promise<IThemeData>} loadData Used to load data on a cache miss.
		     */
		    function ThemeProvider(loadData) {
		        this._loadData = loadData;
		    }
		    /**
		     * Given a URL, returns a string value which can be safely used as a
		     * background-image value in a CSS rule. If the url is falsey, this
		     * returns "none" to specify no background-image.
		     * @param {string} url The URL of a background image.
		     */
		    ThemeProvider._makeCssUrl = function (url) {
		        var cssUrlValue = "none";
		        if (url) {
		            cssUrlValue = 'url("' +
		                ThemeProvider._escapeQuotesAndParentheses(url) +
		                '")';
		        }
		        return cssUrlValue;
		    };
		    /**
		     * Escapes single- and double-quotes along with parentheses so that the
		     * resulting string is safe to use in a CSS background-image: url()
		     * @param {string} str The string to escape.
		     */
		    ThemeProvider._escapeQuotesAndParentheses = function (str) {
		        var replacements = { "'": "%27", '"': "%22", "(": "%28", ")": "%29" };
		        var result = null;
		        if (str != null) {
		            result = str.replace(/(['"\(\)])/gm, function (match, capture) {
		                return replacements[capture];
		            });
		        }
		        return result;
		    };
		    /**
		     * Loads the theme data and returns a map from theme tokens to replacement values.
		     * Suitable for use with loadTheme in load-themed-styles.
		     * @param {string} cacheToken Cache token used to validate cached data.
		     * @param {boolean} forceUpdate Whether to force fresh data to be loaded and cached.
		     */
		    ThemeProvider.prototype.loadThemeTokenMap = function (cacheToken, forceUpdate) {
		        return this.loadThemeData(cacheToken, forceUpdate).then(function (themeData) {
		            var themeValues;
		            if (themeData && themeData.palette) {
		                themeValues = {};
		                var palette = themeData.palette;
		                for (var colorSlot in palette) {
		                    var rgbaValue = palette[colorSlot];
		                    themeValues[colorSlot] = rgbaValue ? RgbaColor_1.default.toHtmlString(rgbaValue) : null;
		                }
		                themeValues["backgroundImageUri"] =
		                    ThemeProvider._makeCssUrl(themeData.backgroundImageUri);
		            }
		            return themeValues;
		        }, function (error) { return null; }); // on error, return null
		    };
		    /**
		     * Loads the theme data from the cache or via the a loadData method.
		     * @param {string} cacheToken Cache token used to validate cached data.
		     * @param {boolean} forceUpdate Whether to force fresh data to be loaded and cached.
		     */
		    ThemeProvider.prototype.loadThemeData = function (cacheToken, forceUpdate) {
		        if (!forceUpdate && this._dataPromise) {
		            return this._dataPromise;
		        }
		        var _this = this;
		        var failureResultCode = null;
		        var failureResultType = Qos_event_1.ResultTypeEnum.Failure;
		        this._dataPromise = Qos_event_1.Qos.instrumentPromise(
		        /*startSchema*/ { name: "ThemeProvider.LoadData" }, 
		        /*createPromise*/ function () { return new Promise_1.default(function loadDataOnExecute(complete, error) {
		            var previousData = null;
		            if (!forceUpdate) {
		                // Checks if we have valid cached data before returning it.
		                previousData = ThemeCache_1.default.getCachedTheme(cacheToken);
		            }
		            // If we have previous data and an update is not forced, use that data.
		            if (previousData) {
		                Engagement_event_1.Engagement.logData({ name: "ThemeProvider.DataFromCache" });
		                complete(previousData);
		            }
		            else {
		                if (forceUpdate) {
		                    Engagement_event_1.Engagement.logData({ name: "ThemeProvider.ForceUpdateData" });
		                }
		                Engagement_event_1.Engagement.logData({ name: "ThemeProvider.DataFromServer" });
		                // Get updated data. Might result in a server call.
		                _this._loadData(forceUpdate).done(function onComplete(themeData) {
		                    if (themeData) {
		                        if (themeData.cacheToken) {
		                            ThemeCache_1.default.updateThemeCache(themeData, cacheToken);
		                            complete(themeData);
		                        }
		                        else {
		                            //TODO what happens if error() is undefined?
		                            failureResultCode = "NoCacheToken";
		                            if (error) {
		                                error("Theme data with no CacheToken returned");
		                            }
		                        }
		                    }
		                    else {
		                        failureResultCode = "NoData";
		                        if (error) {
		                            error("No model returned");
		                        }
		                    }
		                }, function onError(err) {
		                    if (Promise_1.default.isCanceled(error)) {
		                        failureResultCode = "Canceled";
		                        failureResultType = Qos_event_1.ResultTypeEnum.ExpectedFailure;
		                    }
		                    else {
		                        failureResultCode = "ServerLoadFailure";
		                    }
		                    if (error) {
		                        error(err);
		                    }
		                });
		            }
		        }); }, 
		        /*getCompleteSchema*/ null, 
		        /*getErrorSchema*/ function getErrorSchema(error) {
		            if (Promise_1.default.isCanceled(error)) {
		                failureResultType = Qos_event_1.ResultTypeEnum.ExpectedFailure;
		                failureResultCode = "Canceled";
		            }
		            return {
		                resultType: failureResultType,
		                resultCode: failureResultCode || "Other",
		                error: error
		            };
		        });
		        return this._dataPromise;
		    };
		    return ThemeProvider;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = ThemeProvider;
	
	
	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var BaseDataStore_1 = __webpack_require__(42);
		var DataStoreCachingType_1 = __webpack_require__(43);
		var THEME_CACHE_VERSION = '1.7';
		var THEME_CACHE_PREFIX = 'odTheme';
		var DATA_KEY = 'Data';
		var TOKEN_KEY = 'CacheToken';
		var VERSION_KEY = 'CacheVersion';
		/**
		 * Utility methods for caching theme data.
		 */
		var ThemeCache = (function () {
		    function ThemeCache() {
		    }
		    /**
		     * Clears the theme cache.
		     */
		    ThemeCache.clearThemeCache = function () {
		        "use strict";
		        var ds = ThemeCache.getThemeDataStore();
		        ds.remove(DATA_KEY);
		        ds.remove(TOKEN_KEY);
		        ds.remove(VERSION_KEY);
		    };
		    /**
		     * Reads the cached theme, if the cacheToken is compatible.
		     * @param {string} cacheToken The cached value will only be returned if it has the same cache token.
		     */
		    ThemeCache.getCachedTheme = function (cacheToken) {
		        "use strict";
		        var cachedTheme;
		        var ds = ThemeCache.getThemeDataStore();
		        try {
		            // Make sure the data was cached with the expected version and
		            // the current theme cache token. Otherwise, return undefined.
		            if (cacheToken === ds.getValue(TOKEN_KEY) &&
		                THEME_CACHE_VERSION === ds.getValue(VERSION_KEY)) {
		                cachedTheme = ds.getValue(DATA_KEY);
		            }
		        }
		        catch (exReadCache) {
		        }
		        return cachedTheme;
		    };
		    /**
		     * Updates the theme data in the cache.
		     * @param {IThemeData} themeData The new theme data to cache.
		     */
		    ThemeCache.updateThemeCache = function (themeData, cacheToken) {
		        "use strict";
		        var ds = ThemeCache.getThemeDataStore();
		        ds.setValue(DATA_KEY, themeData);
		        ds.setValue(TOKEN_KEY, cacheToken || themeData.cacheToken);
		        ds.setValue(VERSION_KEY, THEME_CACHE_VERSION);
		    };
		    /**
		     * Returns an instance of the supporting data store for this cache.
		     */
		    ThemeCache.getThemeDataStore = function () {
		        "use strict";
		        return new BaseDataStore_1.default(THEME_CACHE_PREFIX, DataStoreCachingType_1.default.local);
		    };
		    return ThemeCache;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = ThemeCache;
	
	
	/***/ },
	/* 74 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var ObjectUtil_1 = __webpack_require__(11);
		var StringHelper_1 = __webpack_require__(54);
		(function (UriPartial) {
		    /** The scheme segment of the URI */
		    UriPartial[UriPartial["scheme"] = 0] = "scheme";
		    /** The scheme and authority segments of the URI */
		    UriPartial[UriPartial["authority"] = 1] = "authority";
		    /** The scheme, authority, and path segments of the URI */
		    UriPartial[UriPartial["path"] = 2] = "path";
		    /** The scheme, authority, path, and query segments of the URI */
		    UriPartial[UriPartial["query"] = 3] = "query";
		})(exports.UriPartial || (exports.UriPartial = {}));
		var UriPartial = exports.UriPartial;
		/**
		 * Partial port of groove\Misc\URI.cpp, which was based on RFC2396 and RFC3986 (http://www.ietf.org/rfc/rfc2396.txt).
		 * There are a few differences between this implementation and the RFC:
		 *  - Implementation does not support parameters (we don't use them, and partial implementation was incorrect)
		 *  - Implementation supports some relative URIs at a glance but more investigation required
		 *
		 *   foo://example.com:8042/over/there?name=ferret#nose
		 *   \_/   \______________/\_________/ \_________/ \__/
		 *    |           |            |            |        |
		 * scheme     authority       path        query   fragment
		 *
		 * Possible improvements:
		 *  - Support path parameters
		 *  - Fully support and test relative URLs based on RFC
		 *  - Allow changing/removing remaining URI components (i.e. user, host, port, parameters)
		 *  - URI.equals could allow ?foo=1&bar=2 equals ?bar=2&foo=1
		 *  - URI.parseURI should have better error handling rather than just setting it as path
		 *  - URI.getQueryAsObject should have better error handling for query of "a=1&a=2"
		 */
		var Uri = (function () {
		    function Uri(uriString, options) {
		        this._queryCaseInsensitive = false;
		        this._pathCaseInsensitive = false;
		        // All of these are decoded (if relevant) unless specified as encoded.
		        this._scheme = "";
		        this._user = "";
		        this._host = "";
		        this._port = "";
		        this._path = "";
		        this._pathSegments = [];
		        this._pathEncoded = "";
		        this._query = {};
		        this._fragment = "";
		        if (Boolean(options)) {
		            this._queryCaseInsensitive = Boolean(options.queryCaseInsensitive);
		            this._pathCaseInsensitive = Boolean(options.pathCaseInsensitive);
		        }
		        this._parseURI(uriString);
		    }
		    Uri.concatenate = function () {
		        var uriParts = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            uriParts[_i - 0] = arguments[_i];
		        }
		        var result = '';
		        for (var i = 0; i < uriParts.length; i++) {
		            var part = uriParts[i];
		            if (i > 0) {
		                part = Uri.ensureNoPrecedingSlash(part);
		            }
		            if (i < uriParts.length - 1) {
		                part = Uri.ensureTrailingSlash(part);
		            }
		            result += part;
		        }
		        return result;
		    };
		    Uri.ensureNoPrecedingSlash = function (part) {
		        return part[0] === "/" ? part.substr(1) : part;
		    };
		    Uri.ensureTrailingSlash = function (part) {
		        return part[part.length - 1] !== "/" ? (part + "/") : part;
		    };
		    Uri.prototype.getScheme = function () {
		        return this._scheme;
		    };
		    Uri.prototype.setScheme = function (scheme) {
		        this._scheme = scheme;
		    };
		    Uri.prototype.getAuthority = function () {
		        return this._getAuthority(false);
		    };
		    Uri.prototype.setAuthority = function (authority) {
		        this._parseAuthority(authority);
		    };
		    Uri.prototype.getUser = function () {
		        return this._user;
		    };
		    Uri.prototype.getHost = function () {
		        return this._host;
		    };
		    Uri.prototype.getPort = function () {
		        return this._port;
		    };
		    Uri.prototype.getPath = function (trimTrailingSlash) {
		        var retPath = this._path;
		        if (Boolean(trimTrailingSlash)) {
		            // If the last character is a slash
		            if (retPath !== null && retPath.lastIndexOf("/") === (retPath.length - 1)) {
		                retPath = retPath.slice(0, -1); //trim last character
		            }
		        }
		        return retPath;
		    };
		    /**
		     * Returns a string containing the leftmost portion of the URI string, ending with the portion specified by part
		     */
		    Uri.prototype.getLeftPart = function (part) {
		        var ret = this._scheme + "://"; // default value is UriPartial.scheme
		        if (part === UriPartial.authority) {
		            ret += this.getAuthority();
		        }
		        if (part === UriPartial.path) {
		            ret += this.getPath();
		        }
		        if (part === UriPartial.query) {
		            ret += this.getQuery();
		        }
		        return ret;
		    };
		    Uri.prototype.setPath = function (path) {
		        if (path && path[0] !== "/") {
		            path = "/" + path;
		        }
		        this._parsePath(path);
		    };
		    Uri.prototype.getPathSegments = function () {
		        return this._pathSegments;
		    };
		    Uri.prototype.getLastPathSegment = function () {
		        if (this._pathSegments.length === 0) {
		            return "";
		        }
		        return this._pathSegments[this._pathSegments.length - 1];
		    };
		    Uri.prototype.getQuery = function (encoded) {
		        return this._serializeQuery(encoded);
		    };
		    /**
		     * Query is not well-defined but is commonly formatted as key=value and delimited with & or ;
		     * (http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.2.2)
		     *  - URI with query "a=1&b=2" or "a=1;b=2" will return {a: "1", b: "2"}
		     *  - Mixed-mode will also work: "a=1&b=2;c=3" will return {a: "1", b: "2", c: "3"}
		     *  - Assumes that parameters will be unique (i.e. "a=1&a=2" is not allowed and will produce unexpected results)
		     */
		    Uri.prototype.setQuery = function (query) {
		        var queryObject = this._deserializeQuery(query);
		        this.setQueryFromObject(queryObject);
		    };
		    Uri.prototype.getQueryAsObject = function () {
		        return this._query;
		    };
		    Uri.prototype.setQueryFromObject = function (queryObj) {
		        this._query = {};
		        for (var queryKey in queryObj) {
		            if (queryObj.hasOwnProperty(queryKey)) {
		                this.setQueryParameter(queryKey, queryObj[queryKey]);
		            }
		        }
		    };
		    Uri.prototype.getQueryParameter = function (queryKey) {
		        var ret = null;
		        var query = this._query;
		        if (this._queryCaseInsensitive) {
		            queryKey = queryKey.toLowerCase();
		            for (var key in query) {
		                if (this._query.hasOwnProperty(key) && key.toLowerCase() === queryKey) {
		                    ret = query[key];
		                }
		            }
		        }
		        else {
		            ret = query[queryKey];
		        }
		        return ret || null;
		    };
		    /**
		     * Adds query parameter to the end if queryKey does not exist, or
		     * overwrites existing query value if queryKey already exists.
		     */
		    Uri.prototype.setQueryParameter = function (queryKey, queryValue, ignoreEmptyValues) {
		        if (ignoreEmptyValues === void 0) { ignoreEmptyValues = true; }
		        var queryKeyDecoded = this._decodeQueryString(queryKey);
		        var queryValueDecoded = this._decodeQueryString(queryValue);
		        // there is no point adding undefined or modifying existing values to undefined or null.
		        if (!!queryValueDecoded || ignoreEmptyValues) {
		            this._query[queryKeyDecoded] = queryValueDecoded;
		        }
		    };
		    Uri.prototype.removeQueryParameter = function (queryKey) {
		        var queryKeyDecoded = this._decodeQueryString(queryKey);
		        delete this._query[queryKeyDecoded];
		    };
		    Uri.prototype.getFragment = function () {
		        return this._fragment;
		    };
		    Uri.prototype.setFragment = function (fragment) {
		        if (fragment[0] === "#") {
		            fragment = fragment.substring(1);
		        }
		        // Treat the fragment as a query string (decode + as space) because we pass in
		        // query parameters using the fragment on page load.
		        this._fragment = this._decodeQueryString(fragment);
		    };
		    /**
		     * Does a strict equality check of URIs (including same query parameters
		     * in the same order, and most comparisons case-sensitive).
		     * According to RFC3986: scheme and host should be case-insensitive.
		     * Note: This does not follow RFC2616's URI Comparison since it is not HTTP-specific.
		     *
		     * KNOWN ISSUE: Depending on your definition of "incorrect," this could return
		     * incorrect results for URI parts that get decoded.
		     * For example: http://somewhere/my%2fpath and http://somewhere/my/path
		     * will compare as equal because the comparisons are done to decoded versions.
		     */
		    Uri.prototype.equals = function (uri) {
		        return StringHelper_1.equalsCaseInsensitive(this._scheme, uri.getScheme()) &&
		            this._user === uri.getUser() &&
		            StringHelper_1.equalsCaseInsensitive(this._host, uri.getHost()) &&
		            this._port === uri.getPort() &&
		            this._fragment === uri.getFragment() &&
		            this._equalsCaseAppropriate(this.getPath(/*trimTrailingSlash*/ true), uri.getPath(true), this._pathCaseInsensitive) &&
		            this._equalsCaseAppropriate(this.getQuery(), uri.getQuery(), this._queryCaseInsensitive);
		    };
		    /**
		     * Does an equivalence check of two URIs. Checks to see if the URIs are
		     * equivalent, but they may not be exact! Strings are compared case
		     * insensitive and query parameters can be in any order.
		     *
		     * KNOWN ISSUE: Depending on your definition of "incorrect," this could return
		     * incorrect results for URI parts that get decoded.
		     * For example: http://somewhere/my%2fpath and http://somewhere/my/path
		     * will compare as equal because the comparisons are done to decoded versions.
		     */
		    Uri.prototype.equivalent = function (uri) {
		        var queryToLower = function (queryObj) {
		            var newQuery = {};
		            for (var key in queryObj) {
		                if (queryObj.hasOwnProperty(key)) {
		                    newQuery[key.toLowerCase()] = queryObj[key].toLowerCase();
		                }
		            }
		            return newQuery;
		        };
		        return StringHelper_1.equalsCaseInsensitive(this._scheme, uri.getScheme()) &&
		            StringHelper_1.equalsCaseInsensitive(this._user, uri.getUser()) &&
		            StringHelper_1.equalsCaseInsensitive(this._host, uri.getHost()) &&
		            StringHelper_1.equalsCaseInsensitive(this._port, uri.getPort()) &&
		            StringHelper_1.equalsCaseInsensitive(this.getPath(/*trimTrailingSlash*/ true), uri.getPath(true)) &&
		            ObjectUtil_1.default.deepCompare(queryToLower(this.getQueryAsObject()), queryToLower(uri.getQueryAsObject())) &&
		            StringHelper_1.equalsCaseInsensitive(this._fragment, uri.getFragment());
		    };
		    /**
		     * Note that this returns the URL encoded/escaped while the getXXX() methods
		     * for the individual components return the unescaped strings. Returning a
		     * concatenation of the decoded components would change the semantics of the
		     * URL. See section 2.4.2 of RFC 2396 (http://www.ietf.org/rfc/rfc2396.txt).
		     *
		     * Use doNotPercentEncodeHost to indicate that the output should not have a
		     * percent-encoded host, such as when passing to the url parameter of
		     * XmlHttpRequest.open(). Section 3.2.2 of RFC 2396 only allows alphanumeric
		     * characters and hyphen in the host of a URL, so percent-encoded hosts are
		     * not allowed. While section 3.2.2 of RFC 3986 does not restrict the host
		     * character set anymore, not all browsers can handle a percent-encoded host
		     * - DNS lookup fails.  But, they will convert the unencoded Unicode to the
		     * IDNA encoding (punycode), so leaving the host as-is in this case is preferred.
		     */
		    Uri.prototype.toString = function (outputOptions) {
		        return this._getStringInternal(/*encoded*/ true, outputOptions);
		    };
		    /**
		     * This method should be used to obtain a string for display purposes only,
		     * because as mentioned above, a decoded URL may have different semantics than
		     * the encoded version.
		     */
		    Uri.prototype.getDecodedStringForDisplay = function () {
		        return this._getStringInternal(/*encoded*/ false);
		    };
		    /*
		     * Input URI of "foo://user:pass@host.com/alpha/beta/gamma/delta;p;a;r;a;m;s?q=1&u=2&e=3&r=4&y=5#fragment"
		     * would return "foo://user:pass@host.com/alpha/beta/gamma/delta;p;a;r;a;m;s";
		     */
		    Uri.prototype.getStringWithoutQueryAndFragment = function () {
		        return this._getStringWithoutQueryAndFragmentInternal(/*encoded=*/ true);
		    };
		    Uri.prototype._equalsCaseAppropriate = function (a, b, isCaseInsensitive) {
		        if (isCaseInsensitive) {
		            return StringHelper_1.equalsCaseInsensitive(a, b);
		        }
		        return a === b;
		    };
		    Uri.prototype._getStringInternal = function (encoded, outputOptions) {
		        var ret = this._getStringWithoutQueryAndFragmentInternal(encoded, outputOptions);
		        var query = this.getQuery(encoded);
		        if (query) {
		            ret += "?" + query;
		        }
		        if (this._fragment) {
		            ret += "#" + (encoded ? encodeURIComponent(this._fragment) : this._fragment);
		        }
		        return ret;
		    };
		    Uri.prototype._getStringWithoutQueryAndFragmentInternal = function (encoded, outputOptions) {
		        var ret = "";
		        if (this._scheme) {
		            ret += (encoded ? encodeURIComponent(this._scheme) : this._scheme) + ":";
		        }
		        // Authority includes user, host, and port
		        var authority = this._getAuthority(/*encoded=*/ encoded, outputOptions);
		        if (authority) {
		            ret += "//" + authority;
		        }
		        if (this._pathEncoded) {
		            ret += (encoded ? this._pathEncoded : this._path);
		        }
		        return ret;
		    };
		    Uri.prototype._deserializeQuery = function (queryStr) {
		        var queryObj = {};
		        if (queryStr.indexOf("?") === 0) {
		            queryStr = queryStr.substring(1);
		        }
		        var queryParts = queryStr.split(/[;&]+/);
		        for (var queryIdx = 0; queryIdx < queryParts.length; queryIdx++) {
		            var queryPart = queryParts[queryIdx];
		            var queryPartSegments = queryPart.split("=");
		            if (queryPartSegments.length > 0) {
		                var queryKey = queryPartSegments[0];
		                if (queryKey.length > 0) {
		                    var queryValue = queryPartSegments.slice(1).join('=');
		                    queryObj[queryKey] = queryValue;
		                }
		            }
		        }
		        return queryObj;
		    };
		    Uri.prototype._serializeQuery = function (encoded) {
		        encoded = Boolean(encoded);
		        var queryStr = "";
		        for (var queryKey in this._query) {
		            if (this._query.hasOwnProperty(queryKey)) {
		                var key = queryKey;
		                var value = this._query[queryKey];
		                if (encoded) {
		                    key = encodeURIComponent(key);
		                    value = encodeURIComponent(value);
		                }
		                if (value === null || value === "") {
		                    queryStr += key + "=&";
		                }
		                else {
		                    queryStr += key + "=" + value + "&";
		                }
		            }
		        }
		        if (queryStr !== "") {
		            queryStr = queryStr.slice(0, -1); //trim extra & at the end
		        }
		        return queryStr;
		    };
		    Uri.prototype._parseURI = function (uriString) {
		        var remainingString = uriString;
		        // Find fragment
		        var fragmentBeginPos = remainingString.indexOf("#");
		        if (fragmentBeginPos >= 0) {
		            var fragment = remainingString.substring(fragmentBeginPos + 1);
		            this.setFragment(fragment);
		            remainingString = remainingString.substring(0, fragmentBeginPos); //remove fragment
		        }
		        // Find scheme
		        var schemeEndPos = StringHelper_1.findOneOf(remainingString, Uri.DELIMITERS);
		        if (schemeEndPos >= 0) {
		            var firstColonPos = remainingString.indexOf(":");
		            if (firstColonPos >= 0 && firstColonPos === schemeEndPos) {
		                this.setScheme(remainingString.substring(0, schemeEndPos));
		                remainingString = remainingString.substring(schemeEndPos + 1); //remove scheme
		            }
		        }
		        else {
		            this.setPath(remainingString);
		            return;
		        }
		        // Find authority
		        var authority = "";
		        var doubleSlashPos = remainingString.indexOf("//");
		        if (doubleSlashPos >= 0 && doubleSlashPos === 0) {
		            remainingString = remainingString.substring(2); //skip the //
		            var authorityEndPos = StringHelper_1.findOneOf(remainingString, Uri.AUTHORITY_TERMINATORS);
		            if (authorityEndPos >= 0) {
		                authority = remainingString.substring(0, authorityEndPos);
		                remainingString = remainingString.substring(authorityEndPos); //remove authority
		            }
		            else {
		                authority = remainingString;
		                remainingString = null;
		            }
		            this.setAuthority(authority);
		            if (!remainingString) {
		                this.setPath("");
		                return;
		            }
		        }
		        // Find query
		        var queryBeginPos = remainingString.indexOf("?");
		        if (queryBeginPos >= 0) {
		            this.setQuery(remainingString.substring(queryBeginPos + 1));
		            remainingString = remainingString.substring(0, queryBeginPos);
		        }
		        this.setPath(remainingString);
		    };
		    Uri.prototype._parseAuthority = function (authority) {
		        this._host = authority;
		        var userNameEndPos = authority.lastIndexOf("@");
		        if (userNameEndPos >= 0) {
		            this._host = this._host.substring(userNameEndPos + 1);
		        }
		        var hostPortSeparatorPos = this._host.indexOf(":");
		        if (userNameEndPos < 0 && hostPortSeparatorPos < 0) {
		            return;
		        }
		        var authorityComponents = authority;
		        if (userNameEndPos < 0) {
		            this._host = authorityComponents;
		        }
		        else {
		            this._user = authorityComponents.substring(0, userNameEndPos);
		            this._host = authorityComponents.substring(userNameEndPos + 1);
		        }
		        if (hostPortSeparatorPos >= 0) {
		            this._port = this._host.substring(hostPortSeparatorPos + 1);
		            this._host = this._host.substring(0, hostPortSeparatorPos);
		        }
		        this._user = decodeURIComponent(this._user);
		        this._host = decodeURIComponent(this._host);
		    };
		    Uri.prototype._parsePath = function (remainingString) {
		        this._path = decodeURIComponent(remainingString);
		        this._pathSegments = [];
		        this._pathEncoded = remainingString;
		        // We have to split the path BEFORE decoding so that encoded / characters
		        // don't get interpreted as path separators.
		        var encodedPathSegments = remainingString.split("/");
		        for (var i = 0; i < encodedPathSegments.length; ++i) {
		            var decodedSegment = decodeURIComponent(encodedPathSegments[i]);
		            this._pathSegments[i] = decodedSegment;
		        }
		        // Trims first/last element if empty
		        if (this._pathSegments[0] === "") {
		            this._pathSegments.shift(); // remove first element
		        }
		        if (this._pathSegments[this._pathSegments.length - 1] === "") {
		            this._pathSegments.pop(); // remove last element
		        }
		    };
		    Uri.prototype._getAuthority = function (encoded, outputOptions) {
		        if (outputOptions === void 0) { outputOptions = {}; }
		        // Note that if encoded is false, doNotPercentEncodeHost doesn't matter - the whole URI (including host) will not be encoded.
		        var doNotPercentEncodeHost = outputOptions && outputOptions.doNotPercentEncodeHost;
		        var authority = "";
		        var user;
		        var host;
		        var port;
		        if (encoded) {
		            // While technically a reserved character, ':' is commonly used in the
		            // username to denote username:password, so we special case not encoding
		            // the first occurence of this character.
		            user = encodeURIComponent(this._user).replace("%3A", ":");
		            if (doNotPercentEncodeHost) {
		                host = this._host;
		            }
		            else {
		                host = encodeURIComponent(this._host);
		            }
		            port = encodeURIComponent(this._port);
		        }
		        else {
		            user = this._user;
		            host = this._host;
		            port = this._port;
		        }
		        if (user !== "") {
		            authority = user + "@";
		        }
		        if (this._host !== "") {
		            authority += host;
		        }
		        if (this._port !== "") {
		            authority += ":" + port;
		        }
		        return authority;
		    };
		    Uri.prototype._decodeQueryString = function (component) {
		        // For query strings only, "+" is a valid substitute for a space, but decodeURIComponent
		        // doesn't take this into account. (Note that replace("+", " ") only replaces one +.)
		        var result = component;
		        try {
		            result = decodeURIComponent(component.replace(/\+/g, " "));
		        }
		        catch (e) {
		        }
		        return result;
		    };
		    Uri.DELIMITERS = ";/?:@&=$,";
		    Uri.AUTHORITY_TERMINATORS = "/?";
		    return Uri;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Uri;
	
	
	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {
	
		// OneDrive:IgnoreCodeCoverage
		"use strict";
		var FabricTheming_1 = __webpack_require__(63);
		var RgbaColor_1 = __webpack_require__(65);
		var UriEncoding_1 = __webpack_require__(12);
		/**
		 * Utility methods which can be used to load the theme of a SharePoint site.
		 */
		var WebTheme = (function () {
		    function WebTheme() {
		    }
		    /**
		     * Constructs the URL of a REST endpoint which will return the web theme.
		     * @param {IWebContextInfo} webContextInfo Context information about the web.
		     * @param {string} cultureName Current UI culture.
		     * @param {string} themeOverride URL to a temporary override theme (e.g. preview).
		     */
		    WebTheme.makeWebThemeRestUrl = function (webServerRelativeUrl, cultureName, themeOverride) {
		        "use strict";
		        var webUrl = webServerRelativeUrl;
		        if (webUrl && webUrl[webUrl.length - 1] === '/') {
		            // Trim trailing slash.
		            webUrl = webUrl.substring(0, webUrl.length - 1);
		        }
		        webUrl = UriEncoding_1.default.escapeUrlForCallback(webUrl);
		        var webThemeRestEndpoint = UriEncoding_1.default.escapeUrlForCallback(webUrl) +
		            '/_api/SP.Web.GetContextWebThemeData?noImages=true&lcid=' +
		            UriEncoding_1.default.encodeURIComponent(cultureName);
		        if (themeOverride) {
		            webThemeRestEndpoint += "&ThemeOverride=" + UriEncoding_1.default.encodeURIComponent(themeOverride);
		        }
		        return webThemeRestEndpoint;
		    };
		    /**
		     * Constructs the URL of a REST endpoint which will return the web theme.
		     * @param {IWebContextInfo} webContextInfo Context information about the web.
		     */
		    WebTheme.processWebThemeRestResponse = function (responseText) {
		        // This could throw if the handler returns an HTML error page or invalis JSON.
		        // DataSource will count that as an error and call the error callback.
		        "use strict";
		        var response = JSON.parse(responseText);
		        var rawThemeData;
		        if (response && response.d && response.d.GetContextWebThemeData) {
		            rawThemeData = JSON.parse(response.d.GetContextWebThemeData);
		        }
		        var themeData = WebTheme.processRawThemeData(rawThemeData);
		        return themeData;
		    };
		    /**
		     * Converts an IThemeDataRaw into an IThemeData.
		     * @param {IThemeDataRaw} themeData Raw theme data to process.
		     */
		    WebTheme.processRawThemeData = function (themeData) {
		        "use strict";
		        if (themeData) {
		            var coerceToColor = WebTheme.coerceToColor;
		            var colors = {};
		            var inputColors = themeData.Palette ? themeData.Palette.Colors : {};
		            for (var colorKey in inputColors) {
		                if (inputColors.hasOwnProperty(colorKey)) {
		                    var colorValue = coerceToColor(inputColors[colorKey]);
		                    // TODO: console.warn if colorValue is undefined?
		                    if (colorValue) {
		                        colors[colorKey] = colorValue;
		                    }
		                }
		            }
		            var fabricColors = FabricTheming_1.default.generateFabricColors(colors['ContentAccent1'], themeData.IsInverted);
		            var pageBG = coerceToColor(colors['PageBackground']) || null;
		            var bgOverlay = coerceToColor(colors['BackgroundOverlay']) || null;
		            var alpha40 = Math.round(0.4 * RgbaColor_1.default.maxComponent);
		            fabricColors['white'] = pageBG;
		            // RgbaColor.fromRgba and RgbaColor.clone both return new objects.
		            // This is important for avoiding duplicate filtering logic in the caching layer.
		            fabricColors['primaryBackground'] = RgbaColor_1.default.clone(pageBG);
		            fabricColors['primaryText'] = fabricColors['primaryText'] || coerceToColor('#333');
		            fabricColors['whiteTranslucent40'] = pageBG && RgbaColor_1.default.fromRgba(pageBG.R, pageBG.G, pageBG.B, alpha40);
		            fabricColors['backgroundOverlay'] = bgOverlay;
		            fabricColors['suiteBarBackground'] = coerceToColor(colors['SuiteBarBackground']) || null;
		            fabricColors['suiteBarText'] = coerceToColor(colors['SuiteBarText']) || null;
		            fabricColors['suiteBarDisabledText'] = coerceToColor(colors['SuiteBarDisabledText']) || null;
		            fabricColors['topBarBackground'] = coerceToColor(colors['TopBarBackground']) || null;
		            fabricColors['topBarText'] = coerceToColor(colors['TopBarText']) || null;
		            fabricColors['topBarHoverText'] = coerceToColor(colors['TopBarHoverText']) || null;
		            fabricColors['dialogBorder'] = coerceToColor(colors['DialogBorder']) || null;
		            return {
		                backgroundImageUri: themeData.BackgroundImageUri,
		                cacheToken: themeData.ThemeCacheToken,
		                isDefault: themeData.IsDefault,
		                isInverted: themeData.IsInverted,
		                palette: fabricColors,
		                version: themeData.Version
		            };
		        }
		        return {
		            backgroundImageUri: "",
		            cacheToken: "",
		            isDefault: true,
		            isInverted: false,
		            palette: {},
		            version: ""
		        };
		    };
		    /**
		     * Coerces an HTML color string or a color object in raw web theme data into an RgbaColor.
		     * @param {any} toColor Object to be converted into an RgbaColor.
		     */
		    WebTheme.coerceToColor = function (toColor) {
		        "use strict";
		        var resultColor;
		        // Use duck typing to extract a color
		        if (!toColor) {
		            resultColor = null;
		        }
		        else if (typeof toColor === "string" || toColor instanceof String) {
		            resultColor = RgbaColor_1.default.fromHtmlColor(String(toColor));
		        }
		        else if ("DefaultColor" in toColor) {
		            resultColor = WebTheme.coerceToColor(toColor["DefaultColor"]);
		        }
		        else if ("R" in toColor && "G" in toColor && "B" in toColor) {
		            resultColor = RgbaColor_1.default.fromRgba(toColor.R, toColor.G, toColor.B, toColor.A);
		        }
		        return resultColor;
		    };
		    return WebTheme;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = WebTheme;
	
	
	/***/ },
	/* 76 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_76__;
	
	/***/ },
	/* 77 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_77__;
	
	/***/ },
	/* 78 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var decorators_1 = __webpack_require__(4);
		var odsp_utilities_bundle_1 = __webpack_require__(6);
		var sp_core_library_1 = __webpack_require__(77);
		var Strings_resx_1 = __webpack_require__(79);
		(function (SPWebPartErrorCode) {
		    SPWebPartErrorCode[SPWebPartErrorCode["ModuleUndefined"] = 0] = "ModuleUndefined";
		    SPWebPartErrorCode[SPWebPartErrorCode["ModuleNotLoaded"] = 1] = "ModuleNotLoaded";
		    SPWebPartErrorCode[SPWebPartErrorCode["IncorrectBoostrapModule"] = 2] = "IncorrectBoostrapModule";
		    SPWebPartErrorCode[SPWebPartErrorCode["MissingExpectedWebPartMemberError"] = 3] = "MissingExpectedWebPartMemberError";
		    SPWebPartErrorCode[SPWebPartErrorCode["NonBaseWebPart"] = 4] = "NonBaseWebPart";
		    SPWebPartErrorCode[SPWebPartErrorCode["ScriptLoadError"] = 5] = "ScriptLoadError";
		    SPWebPartErrorCode[SPWebPartErrorCode["LoaderNotFound"] = 6] = "LoaderNotFound";
		    SPWebPartErrorCode[SPWebPartErrorCode["ManifestNull"] = 7] = "ManifestNull";
		    SPWebPartErrorCode[SPWebPartErrorCode["ManifestInvalid"] = 8] = "ManifestInvalid";
		    SPWebPartErrorCode[SPWebPartErrorCode["BaseConstructError"] = 9] = "BaseConstructError";
		    SPWebPartErrorCode[SPWebPartErrorCode["MustOverrideRender"] = 10] = "MustOverrideRender";
		    SPWebPartErrorCode[SPWebPartErrorCode["NotInitializedError"] = 11] = "NotInitializedError";
		    SPWebPartErrorCode[SPWebPartErrorCode["PropertyBagNull"] = 12] = "PropertyBagNull";
		    SPWebPartErrorCode[SPWebPartErrorCode["OnAfterDeserializeReturnedNull"] = 13] = "OnAfterDeserializeReturnedNull";
		    SPWebPartErrorCode[SPWebPartErrorCode["OnInitReturnedNullPromise"] = 14] = "OnInitReturnedNullPromise";
		    SPWebPartErrorCode[SPWebPartErrorCode["ReadOnlyProperty"] = 15] = "ReadOnlyProperty";
		    SPWebPartErrorCode[SPWebPartErrorCode["SerializationFailed"] = 16] = "SerializationFailed";
		    SPWebPartErrorCode[SPWebPartErrorCode["FirstTimeRenderCalledMoreThanOnce"] = 17] = "FirstTimeRenderCalledMoreThanOnce";
		    SPWebPartErrorCode[SPWebPartErrorCode["RenderCompletedCallNotCalled"] = 18] = "RenderCompletedCallNotCalled";
		})(exports.SPWebPartErrorCode || (exports.SPWebPartErrorCode = {}));
		var SPWebPartErrorCode = exports.SPWebPartErrorCode;
		var SPWebPartError = (function (_super) {
		    __extends(SPWebPartError, _super);
		    function SPWebPartError(errorCode, logProperties) {
		        var params = [];
		        for (var _i = 2; _i < arguments.length; _i++) {
		            params[_i - 2] = arguments[_i];
		        }
		        _super.call(this, SPWebPartErrorCode[errorCode], odsp_utilities_bundle_1.StringHelper.format(SPWebPartError._errorCodeToMessageMap.get(errorCode), params), logProperties);
		        this._id = errorCode;
		    }
		    Object.defineProperty(SPWebPartError.prototype, "id", {
		        get: function () {
		            return this._id;
		        },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(SPWebPartError.prototype, "category", {
		        get: function () {
		            return 'SPWebPartErrorCode';
		        },
		        enumerable: true,
		        configurable: true
		    });
		    SPWebPartError.create = function (errorCode) {
		        var params = [];
		        for (var _i = 1; _i < arguments.length; _i++) {
		            params[_i - 1] = arguments[_i];
		        }
		        return new SPWebPartError(errorCode, undefined, params);
		    };
		    SPWebPartError.createWithLogProperties = function (errorCode, logProperties) {
		        var params = [];
		        for (var _i = 2; _i < arguments.length; _i++) {
		            params[_i - 2] = arguments[_i];
		        }
		        return new SPWebPartError(errorCode, logProperties, params);
		    };
		    SPWebPartError._errorCodeToMessageMap = new Map([
		        [SPWebPartErrorCode.ModuleUndefined, Strings_resx_1.default.UndefinedModuleError],
		        [SPWebPartErrorCode.ModuleNotLoaded, Strings_resx_1.default.ModuleNotLoadedError],
		        [SPWebPartErrorCode.IncorrectBoostrapModule, Strings_resx_1.default.IncorrectBoostrapModuleError],
		        [SPWebPartErrorCode.MissingExpectedWebPartMemberError, Strings_resx_1.default.MissingExpectedWebPartMemberError],
		        [SPWebPartErrorCode.NonBaseWebPart, Strings_resx_1.default.NonBaseWebPartError],
		        [SPWebPartErrorCode.ScriptLoadError, Strings_resx_1.default.ScriptLoadErrorTemplate],
		        [SPWebPartErrorCode.ManifestNull, Strings_resx_1.default.ManifestNullError],
		        [SPWebPartErrorCode.ManifestInvalid, Strings_resx_1.default.ManifestInvalidError],
		        [SPWebPartErrorCode.BaseConstructError, Strings_resx_1.default.BaseConstructError],
		        [SPWebPartErrorCode.MustOverrideRender, Strings_resx_1.default.MustOverrideRenderError],
		        [SPWebPartErrorCode.NotInitializedError, Strings_resx_1.default.NotIntializedError],
		        [SPWebPartErrorCode.PropertyBagNull, Strings_resx_1.default.PropertyBagNullError],
		        [SPWebPartErrorCode.OnAfterDeserializeReturnedNull, Strings_resx_1.default.OnAfterDeserializeReturnedNull],
		        [SPWebPartErrorCode.OnInitReturnedNullPromise, Strings_resx_1.default.OnInitReturnedNullPromise],
		        [SPWebPartErrorCode.ReadOnlyProperty, Strings_resx_1.default.ReadOnlyPropertyError],
		        [SPWebPartErrorCode.SerializationFailed, Strings_resx_1.default.SerializationFailedError],
		        [SPWebPartErrorCode.FirstTimeRenderCalledMoreThanOnce, Strings_resx_1.default.FirstTimeRenderCalledMoreThanOnceError],
		        [SPWebPartErrorCode.RenderCompletedCallNotCalled, Strings_resx_1.default.RenderCompletedCallNotCalledError]
		    ]);
		    SPWebPartError = __decorate([
		        decorators_1.sealed
		    ], SPWebPartError);
		    return SPWebPartError;
		}(sp_core_library_1.SPError));
		exports.SPWebPartError = SPWebPartError;
	
	
	/***/ },
	/* 79 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var strings =  false
		    ? require('../../resx-strings/en-us.json')
		    : __webpack_require__(80);
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = (strings['_cUY5i3OR5M46pep9mRCR0g'] || {});
	
	
	/***/ },
	/* 80 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_80__;
	
	/***/ },
	/* 81 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var lodash = __webpack_require__(5);
		function deepFreeze(obj) {
		    if (!obj) {
		        return undefined;
		    }
		    if (!Object.isFrozen(obj)) {
		        Object.freeze(obj);
		    }
		    var depth = 0;
		    var func = function (o) {
		        if (++depth > 5) {
		            return;
		        }
		        var propNames = Object.getOwnPropertyNames(o);
		        propNames.forEach(function (name) {
		            var prop = o[name];
		            if (typeof prop === 'object' && !!prop && !lodash.isElement(prop) && !Object.isFrozen(prop)) {
		                func(prop);
		            }
		        });
		    };
		    func(obj);
		    return obj;
		}
		exports.deepFreeze = deepFreeze;
	
	
	/***/ },
	/* 82 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var sp_telemetry_1 = __webpack_require__(76);
		var sp_core_library_1 = __webpack_require__(77);
		function executeAndReThrow(method, errorToThrow, logSource) {
		    sp_core_library_1.Validate.isNotNullOrUndefined(method, 'method');
		    try {
		        method();
		    }
		    catch (e) {
		        if (logSource) {
		            sp_telemetry_1._TraceLogger.logError(logSource, new Error('Error: ' + e));
		        }
		        errorToThrow.innerError = e;
		        throw errorToThrow;
		    }
		}
		exports.executeAndReThrow = executeAndReThrow;
	
	
	/***/ },
	/* 83 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var sp_core_library_1 = __webpack_require__(77);
		var ClassicPageFixupUtils = (function () {
		    function ClassicPageFixupUtils() {
		    }
		    ClassicPageFixupUtils.disableAutomaticPostbacks = function (domElement, env) {
		        sp_core_library_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
		        if (env === sp_core_library_1.EnvironmentType.ClassicSharePoint) {
		            var buttons = domElement.getElementsByTagName('button');
		            if (buttons && buttons.length) {
		                for (var i = 0; i < buttons.length; i++) {
		                    if (buttons[i]) {
		                        buttons[i].onclick = function () { return false; };
		                    }
		                }
		            }
		            var inputs = domElement.getElementsByTagName('input');
		            if (inputs && inputs.length) {
		                for (var i = 0; i < inputs.length; i++) {
		                    if (inputs[i]) {
		                        inputs[i].onkeydown = function (e) { if (e.keyCode === 13) {
		                            return false;
		                        } };
		                    }
		                }
		            }
		        }
		    };
		    ClassicPageFixupUtils.removeFabricLinks = function () {
		        var links = document.getElementsByTagName('link');
		        if (links && links.length) {
		            for (var i = 0; i < links.length; i++) {
		                if (links[i] && links[i].href.indexOf('fabric.min.css') !== -1) {
		                    var parentNode = links[i].parentNode;
		                    parentNode.removeChild(links[i]);
		                }
		            }
		        }
		    };
		    return ClassicPageFixupUtils;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = ClassicPageFixupUtils;
	
	
	/***/ },
	/* 84 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		__webpack_require__(85);
		var styles = {
		    errorBox: 'errorBox_7aa33b51',
		    errorBoxText: 'errorBoxText_100201c7',
		    screenReaderOnly: 'screenReaderOnly_cd5378bd',
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = styles;
	
	
	/***/ },
	/* 85 */
	/***/ function(module, exports, __webpack_require__) {
	
		var content = __webpack_require__(86);
		var loader = __webpack_require__(88);
		
		if(typeof content === "string") content = [[module.id, content]];
		
		// add the styles to the DOM
		for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
		
		if(content.locals) module.exports = content.locals;
	
	/***/ },
	/* 86 */
	/***/ function(module, exports, __webpack_require__) {
	
		exports = module.exports = __webpack_require__(87)();
		// imports
		
		
		// module
		exports.push([module.id, ".errorBox_7aa33b51{color:#333;font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",Tahoma,Arial,sans-serif;font-size:15px;font-weight:400;color:#ff3a46;padding:12px 0;overflow:hidden;position:relative;top:0;left:0;right:0;z-index:1}.errorBoxText_100201c7{text-align:left;position:relative;padding-right:28px;display:inline-block}.screenReaderOnly_cd5378bd{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}", ""]);
		
		// exports
	
	
	/***/ },
	/* 87 */
	/***/ function(module, exports) {
	
		/*
			MIT License http://www.opensource.org/licenses/mit-license.php
			Author Tobias Koppers @sokra
		*/
		// css base code, injected by the css-loader
		module.exports = function() {
			var list = [];
		
			// return the list of modules as css string
			list.toString = function toString() {
				var result = [];
				for(var i = 0; i < this.length; i++) {
					var item = this[i];
					if(item[2]) {
						result.push("@media " + item[2] + "{" + item[1] + "}");
					} else {
						result.push(item[1]);
					}
				}
				return result.join("");
			};
		
			// import a list of modules into the list
			list.i = function(modules, mediaQuery) {
				if(typeof modules === "string")
					modules = [[null, modules, ""]];
				var alreadyImportedModules = {};
				for(var i = 0; i < this.length; i++) {
					var id = this[i][0];
					if(typeof id === "number")
						alreadyImportedModules[id] = true;
				}
				for(i = 0; i < modules.length; i++) {
					var item = modules[i];
					// skip already imported module
					// this implementation is not 100% perfect for weird media query combinations
					//  when a module is imported multiple times with different media queries.
					//  I hope this will never occur (Hey this way we have smaller bundles)
					if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
						if(mediaQuery && !item[2]) {
							item[2] = mediaQuery;
						} else if(mediaQuery) {
							item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
						}
						list.push(item);
					}
				}
			};
			return list;
		};
	
	
	/***/ },
	/* 88 */
	/***/ function(module, exports) {
	
		/* WEBPACK VAR INJECTION */(function(global) {/**
		 * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value
		 * to use if that slot is not specified by the theme.
		 */
		"use strict";
		// IE needs to inject styles using cssText. However, we need to evaluate this lazily, so this
		// value will initialize as undefined, and later will be set once on first loadStyles injection.
		var _injectStylesWithCssText;
		// Store the theming state in __themeState__ global scope for reuse in the case of duplicate
		// load-themed-styles hosted on the page.
		var _root = (typeof window === 'undefined') ? global : window; // tslint:disable-line:no-any
		var _themeState = _root.__themeState__ = _root.__themeState__ || {
		    theme: undefined,
		    lastStyleElement: undefined,
		    registeredStyles: []
		};
		/**
		 * Matches theming tokens. For example, "[theme: themeSlotName, default: #FFF]" (including the quotes).
		 */
		/* tslint:disable: max-line-length */
		var _themeTokenRegex = /[\'\"]\[theme:\s*(\w+)\s*(?:\,\s*default:\s*([\\"\']?[\.\,\(\)\#\-\s\w]*[\.\,\(\)\#\-\w][\"\']?))?\s*\][\'\"]/g;
		/* tslint:enable: max-line-length */
		/** Maximum style text length, for supporting IE style restrictions. */
		var MAX_STYLE_CONTENT_SIZE = 10000;
		/**
		 * Loads a set of style text. If it is registered too early, we will register it when the window.load
		 * event is fired.
		 * @param {string | ThemableArray} styles Themable style text to register.
		 */
		function loadStyles(styles) {
		    var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);
		    if (_injectStylesWithCssText === undefined) {
		        _injectStylesWithCssText = shouldUseCssText();
		    }
		    applyThemableStyles(styleParts);
		}
		exports.loadStyles = loadStyles;
		/**
		 * Allows for customizable loadStyles logic. e.g. for server side rendering application
		 * @param {(styles: string) => void} a loadStyles callback that gets called when styles are loaded or reloaded
		 */
		function configureLoadStyles(callback) {
		    _themeState.loadStyles = callback;
		}
		exports.configureLoadStyles = configureLoadStyles;
		/**
		 * Loads a set of style text. If it is registered too early, we will register it when the window.load event
		 * is fired.
		 * @param {string} styleText Style to register.
		 * @param {IStyleRecord} styleRecord Existing style record to re-apply.
		 */
		function applyThemableStyles(stylesArray, styleRecord) {
		    if (_themeState.loadStyles) {
		        var styles = resolveThemableArray(stylesArray);
		        _themeState.loadStyles(styles);
		    }
		    else {
		        _injectStylesWithCssText ?
		            registerStylesIE(stylesArray, styleRecord) :
		            registerStyles(stylesArray, styleRecord);
		    }
		}
		/**
		 * Registers a set theme tokens to find and replace. If styles were already registered, they will be
		 * replaced.
		 * @param {theme} theme JSON object of theme tokens to values.
		 */
		function loadTheme(theme) {
		    _themeState.theme = theme;
		    // reload styles.
		    reloadStyles();
		}
		exports.loadTheme = loadTheme;
		/**
		 * Reloads styles.
		 */
		function reloadStyles() {
		    if (_themeState.theme) {
		        for (var _i = 0, _a = _themeState.registeredStyles; _i < _a.length; _i++) {
		            var styleRecord = _a[_i];
		            applyThemableStyles(styleRecord.themableStyle, styleRecord);
		        }
		    }
		}
		/**
		 * Find theme tokens and replaces them with provided theme values.
		 * @param {string} styles Tokenized styles to fix.
		 */
		function detokenize(styles) {
		    if (styles) {
		        styles = resolveThemableArray(splitStyles(styles));
		    }
		    return styles;
		}
		exports.detokenize = detokenize;
		/**
		 * Resolves ThemingInstruction objects in an array and joins the result into a string.
		 * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.
		 */
		function resolveThemableArray(splitStyleArray) {
		    var theme = _themeState.theme;
		    var resolvedCss;
		    if (splitStyleArray) {
		        // Resolve the array of theming instructions to an array of strings.
		        // Then join the array to produce the final CSS string.
		        var resolvedArray = splitStyleArray.map(function (currentValue) {
		            var themeSlot = currentValue.theme;
		            if (themeSlot) {
		                // A theming annotation. Resolve it.
		                var themedValue = theme ? theme[themeSlot] : undefined;
		                var defaultValue = currentValue.defaultValue;
		                // Warn to console if we hit an unthemed value even when themes are provided.
		                // Allow the themedValue to be undefined to explicitly request the default value.
		                if (theme && !themedValue && console && !(themeSlot in theme)) {
		                    /* tslint:disable: max-line-length */
		                    console.warn("Theming value not provided for \"" + themeSlot + "\". Falling back to \"" + (defaultValue || 'inherit') + "\".");
		                }
		                return themedValue || defaultValue || 'inherit';
		            }
		            else {
		                // A non-themable string. Preserve it.
		                return currentValue.rawString;
		            }
		        });
		        resolvedCss = resolvedArray.join('');
		    }
		    return resolvedCss;
		}
		/**
		 * Split tokenized CSS into an array of strings and theme specification objects
		 * @param {string} styles Tokenized styles to split.
		 */
		function splitStyles(styles) {
		    var result = [];
		    if (styles) {
		        var pos = 0; // Current position in styles.
		        var tokenMatch = void 0;
		        while (tokenMatch = _themeTokenRegex.exec(styles)) {
		            var matchIndex = tokenMatch.index;
		            if (matchIndex > pos) {
		                result.push({
		                    rawString: styles.substring(pos, matchIndex)
		                });
		            }
		            result.push({
		                theme: tokenMatch[1],
		                defaultValue: tokenMatch[2] // May be undefined
		            });
		            // index of the first character after the current match
		            pos = _themeTokenRegex.lastIndex;
		        }
		        // Push the rest of the string after the last match.
		        result.push({
		            rawString: styles.substring(pos)
		        });
		    }
		    return result;
		}
		exports.splitStyles = splitStyles;
		/**
		 * Registers a set of style text. If it is registered too early, we will register it when the
		 * window.load event is fired.
		 * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
		 * @param {IStyleRecord} styleRecord May specify a style Element to update.
		 */
		function registerStyles(styleArray, styleRecord) {
		    var head = document.getElementsByTagName('head')[0];
		    var styleElement = document.createElement('style');
		    styleElement.type = 'text/css';
		    styleElement.appendChild(document.createTextNode(resolveThemableArray(styleArray)));
		    if (styleRecord) {
		        head.replaceChild(styleElement, styleRecord.styleElement);
		        styleRecord.styleElement = styleElement;
		    }
		    else {
		        head.appendChild(styleElement);
		    }
		    if (!styleRecord) {
		        _themeState.registeredStyles.push({
		            styleElement: styleElement,
		            themableStyle: styleArray
		        });
		    }
		}
		/**
		 * Registers a set of style text, for IE 9 and below, which has a ~30 style element limit so we need
		 * to register slightly differently.
		 * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
		 * @param {IStyleRecord} styleRecord May specify a style Element to update.
		 */
		function registerStylesIE(styleArray, styleRecord) {
		    var head = document.getElementsByTagName('head')[0];
		    var lastStyleElement = _themeState.lastStyleElement, registeredStyles = _themeState.registeredStyles;
		    var stylesheet = lastStyleElement ? lastStyleElement.styleSheet : undefined;
		    var lastStyleContent = stylesheet ? stylesheet.cssText : '';
		    var lastRegisteredStyle = registeredStyles[registeredStyles.length - 1];
		    var resolvedStyleText = resolveThemableArray(styleArray);
		    if (!lastStyleElement || (lastStyleContent.length + resolvedStyleText.length) > MAX_STYLE_CONTENT_SIZE) {
		        lastStyleElement = document.createElement('style');
		        lastStyleElement.type = 'text/css';
		        if (styleRecord) {
		            head.replaceChild(lastStyleElement, styleRecord.styleElement);
		            styleRecord.styleElement = lastStyleElement;
		        }
		        else {
		            head.appendChild(lastStyleElement);
		        }
		        if (!styleRecord) {
		            lastRegisteredStyle = {
		                styleElement: lastStyleElement,
		                themableStyle: styleArray
		            };
		            registeredStyles.push(lastRegisteredStyle);
		        }
		    }
		    lastStyleElement.styleSheet.cssText += detokenize(resolvedStyleText);
		    Array.prototype.push.apply(lastRegisteredStyle.themableStyle, styleArray); // concat in-place
		    // Preserve the theme state.
		    _themeState.lastStyleElement = lastStyleElement;
		}
		/**
		 * Checks to see if styleSheet exists as a property off of a style element.
		 * This will determine if style registration should be done via cssText (<= IE9) or not
		 */
		function shouldUseCssText() {
		    var useCSSText = false;
		    if (typeof document !== 'undefined') {
		        var emptyStyle = document.createElement('style');
		        emptyStyle.type = 'text/css';
		        useCSSText = !!emptyStyle.styleSheet;
		    }
		    return useCSSText;
		}
		
		
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))
	
	/***/ },
	/* 89 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var decorators_1 = __webpack_require__(4);
		var lodash = __webpack_require__(5);
		var odsp_utilities_bundle_1 = __webpack_require__(6);
		var sp_loader_1 = __webpack_require__(90);
		var sp_http_1 = __webpack_require__(91);
		var sp_telemetry_1 = __webpack_require__(76);
		var sp_core_library_1 = __webpack_require__(77);
		var sp_page_context_1 = __webpack_require__(92);
		var BaseClientSideWebPart_1 = __webpack_require__(3);
		var ClientSideWebPartStatusRenderer_1 = __webpack_require__(93);
		var EventAggregator_1 = __webpack_require__(101);
		var ExecuteWithoutFailing_1 = __webpack_require__(103);
		var SPWebPartError_1 = __webpack_require__(78);
		var PropertyPaneDefinitions_1 = __webpack_require__(2);
		var PropertyPaneController_1 = __webpack_require__(104);
		var WebPartContext_1 = __webpack_require__(133);
		var ClassicPageUtils_1 = __webpack_require__(83);
		var Strings_resx_1 = __webpack_require__(79);
		var ClientSideWebPartManager = (function () {
		    function ClientSideWebPartManager(host) {
		        this._webparts = new Map();
		        this._logSource = sp_telemetry_1._LogSource.create('ClientSideWebPartManager');
		        this._eventAggregator = new EventAggregator_1.default();
		        this._statusRenderer = new ClientSideWebPartStatusRenderer_1.default();
		        sp_core_library_1.Validate.isNotNullOrUndefined(host, 'host');
		        this._host = host;
		        this._pageContext = host.serviceScope.consume(sp_page_context_1.PageContext.serviceKey);
		        this.setPropertyPaneState = this.setPropertyPaneState.bind(this);
		        this.isPropertyPaneRenderedByWebPart = this.isPropertyPaneRenderedByWebPart.bind(this);
		    }
		    ClientSideWebPartManager.prototype.loadWebPart = function (context) {
		        var _this = this;
		        return new Promise(function (resolve, reject) {
		            _this._validateInput(context);
		            var webPartTag = _this._createWebPartTag(context.manifest, context.instanceId);
		            if (!_this._validateManifest(context.manifest, context.displayMode, webPartTag)) {
		                _this.renderError(context.domElement, SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.ManifestInvalid, webPartTag));
		                return;
		            }
		            var manifest = context.manifest; 
		            var instanceId = context.instanceId;
		            var domElement = context.domElement;
		            var qosMonitor = _this._createLoadQosMonitor(manifest);
		            sp_telemetry_1._PerformanceLogger.addComponent(webPartTag);
		            sp_telemetry_1._PerformanceLogger.startMarkForComponent(webPartTag);
		            sp_telemetry_1._TraceLogger.logVerboseData({
		                source: _this._logSource,
		                message: odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.StartedLoadingWebPart, webPartTag),
		                serviceScope: _this._host.serviceScope
		            });
		            var title = context.webPartData
		                ? context.webPartData.title
		                : (manifest.title && manifest.title.default 
		                    ? manifest.title.default 
		                    : manifest.preconfiguredEntries[0].title.default);
		            _this._statusRenderer.displayLoadingIndicator(domElement, title);
		            var modulePromise = sp_loader_1.SPComponentLoader.loadComponent(manifest);
		            if (modulePromise) {
		                modulePromise.then(function (moduleLibrary) {
		                    sp_telemetry_1._PerformanceLogger.markComponentModuleLoaded(webPartTag);
		                    sp_telemetry_1._TraceLogger.logVerboseData({
		                        source: _this._logSource,
		                        message: odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.ModulesLoadedForWebPart, webPartTag),
		                        serviceScope: _this._host.serviceScope
		                    });
		                    if (!moduleLibrary) {
		                        throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.ModuleUndefined, webPartTag);
		                    }
		                    try {
		                        var wp = moduleLibrary; 
		                        if (wp && wp.default) {
		                            wp = wp.default;
		                        }
		                        if (!wp) {
		                            throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.ModuleNotLoaded, webPartTag, _this._getLoadedModuleList(moduleLibrary));
		                        }
		                        if (typeof (wp) !== 'function' && wp.default) {
		                            wp = wp.default;
		                        }
		                        if (typeof (wp) !== 'function') {
		                            throw SPWebPartError_1.SPWebPartError.createWithLogProperties(SPWebPartError_1.SPWebPartErrorCode.IncorrectBoostrapModule, { actualType: typeof (wp), wp: wp }, webPartTag);
		                        }
		                        var typedWebPartClass = wp;
		                        var wpi = new typedWebPartClass();
		                        if (!wpi._internalInitialize) {
		                            throw SPWebPartError_1.SPWebPartError.createWithLogProperties(SPWebPartError_1.SPWebPartErrorCode.MissingExpectedWebPartMemberError, { actualType: typeof (wp), wp: wp }, webPartTag, '_internalInitialize');
		                        }
		                        wpi._internalInitialize(_this._getWebPartContext(context));
		                        _this._webparts.set(instanceId, wpi);
		                        _this._startDirtyBitTimer(context.displayMode);
		                        if (_this._instanceOfBase(wpi)) {
		                            return wpi._internalFirstTimeRender(context.addedFromPersistedData, context.displayMode, qosMonitor, context.webPartData).then(function () {
		                                var extraData = _this._createSuccessExtraData(manifest.alias, manifest.isInternal, manifest.id);
		                                qosMonitor.writeSuccess(extraData);
		                                sp_telemetry_1._PerformanceLogger.endMarkForComponent(webPartTag);
		                                ClassicPageUtils_1.default.removeFabricLinks();
		                                sp_telemetry_1._TraceLogger.logVerboseData({
		                                    source: _this._logSource,
		                                    message: odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.ModulesLoadedForWebPart, webPartTag),
		                                    serviceScope: _this._host.serviceScope
		                                });
		                                resolve();
		                            });
		                        }
		                        else {
		                            throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.NonBaseWebPart, webPartTag);
		                        }
		                    }
		                    catch (ex) {
		                        var wpi_1 = _this._webparts.get(instanceId);
		                        if (wpi_1) {
		                            ExecuteWithoutFailing_1.executeWithoutFailing(function () { _this._statusRenderer.clearLoadingIndicator(domElement); }, _this._logSource);
		                            ExecuteWithoutFailing_1.executeWithoutFailing(function () { wpi_1._internalDispose(); }, _this._logSource);
		                            ExecuteWithoutFailing_1.executeWithoutFailing(function () { _this._webparts.delete(instanceId); }, _this._logSource);
		                        }
		                        ExecuteWithoutFailing_1.executeWithoutFailing(function () {
		                            var extraData = _this._createUnexpectedFailureExtraData(manifest.alias, instanceId, manifest.isInternal, manifest.id);
		                            qosMonitor.writeUnexpectedFailure('UnhandledLoadError', ex, extraData);
		                        }, _this._logSource);
		                        _this.renderError(domElement, ex);
		                        reject();
		                    }
		                }).catch(function (errorMsg) {
		                    var err = SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.ScriptLoadError, webPartTag, errorMsg);
		                    ExecuteWithoutFailing_1.executeWithoutFailing(function () {
		                        var extraData = _this._createUnexpectedFailureExtraData(manifest.alias, instanceId, manifest.isInternal, manifest.id);
		                        qosMonitor.writeUnexpectedFailure('ScriptLoad', err, extraData);
		                    }, _this._logSource);
		                    _this.renderError(domElement, err);
		                    reject();
		                });
		            }
		            else {
		                var error = SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.LoaderNotFound, webPartTag);
		                _this.renderError(domElement, error);
		                reject();
		            }
		        });
		    };
		    ClientSideWebPartManager.prototype.fetchWebPartManifests = function () {
		        var _this = this;
		        if (!this._toolboxManifestsPromise) {
		            var qosMonitor_1 = new sp_telemetry_1._QosMonitor('ClientSideWebPartManager.FetchWebParts');
		            this._toolboxManifestsPromise = new Promise(function (resolve, reject) {
		                if (_this._pageContext.web &&
		                    _this._pageContext.web.serverRelativeUrl &&
		                    sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.Local &&
		                    sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.Test) {
		                    var requestUrl_1 = sp_core_library_1.UrlUtilities.removeEndSlash(_this._pageContext.web.serverRelativeUrl) + "/_api/web/GetClientSideWebParts";
		                    _this._host.serviceScope.whenFinished(function () {
		                        var httpClient = _this._host.serviceScope.consume(sp_http_1.SPHttpClient.serviceKey);
		                        httpClient.get(requestUrl_1, sp_http_1.SPHttpClientConfigurations.v1)
		                            .then(function (response) {
		                            return response.json();
		                        })
		                            .then(function (value) {
		                            var manifests = value.value.map(function (manifestObject) { return JSON.parse(manifestObject.Manifest); });
		                            _this._disambiguateWebPartManifestLocales(manifests);
		                            sp_loader_1.SPComponentLoader.registerManifests(manifests);
		                            sp_telemetry_1._TraceLogger.logVerboseData({
		                                source: _this._logSource,
		                                message: Strings_resx_1.default.CompletedLoadingWebPartManifests,
		                                serviceScope: _this._host.serviceScope
		                            });
		                            qosMonitor_1.writeSuccess();
		                            resolve();
		                        })
		                            .catch(function (error) {
		                            _this._toolboxManifestsPromise = undefined;
		                            sp_telemetry_1._TraceLogger.logErrorData({
		                                source: _this._logSource,
		                                error: error,
		                                serviceScope: _this._host.serviceScope
		                            });
		                            qosMonitor_1.writeUnexpectedFailure('Rejected', error);
		                            reject(error);
		                        });
		                    });
		                }
		                else {
		                    resolve();
		                }
		            });
		        }
		        return this._toolboxManifestsPromise;
		    };
		    ClientSideWebPartManager.prototype.getWebPartManifests = function () {
		        var manifests = sp_loader_1.SPComponentLoader.getManifests();
		        var result = []; 
		        if (manifests) {
		            for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
		                var manifest = manifests_1[_i];
		                if (manifest && manifest.componentType === 'WebPart') {
		                    result.push(manifest); 
		                }
		            }
		        }
		        return result;
		    };
		    ClientSideWebPartManager.prototype.setDisplayMode = function (displayMode, instanceId) {
		        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (wp) {
		            wp._internalSetDisplayMode(displayMode);
		        });
		        this._startDirtyBitTimer(displayMode);
		    };
		    ClientSideWebPartManager.prototype.serialize = function (instanceId) {
		        var sd = new Map();
		        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (wp, _instanceId) {
		            sd.set(_instanceId, wp._internalSerialize());
		        });
		        return sd;
		    };
		    ClientSideWebPartManager.prototype.dispose = function (instanceId) {
		        var _this = this;
		        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (wp, _instanceId) {
		            ExecuteWithoutFailing_1.executeWithoutFailing(function () { wp._internalDispose(); }, _this._logSource);
		            _this._deleteWebPart(_instanceId);
		        });
		    };
		    ClientSideWebPartManager.prototype.tryGeneratePreviewImageUrl = function (instanceIds) {
		        var previewImageUrl = undefined;
		        this._executeForIdsOrAll(instanceIds, function (wp, id) {
		            if (!previewImageUrl) {
		                previewImageUrl = wp.previewImageUrl;
		            }
		        });
		        return previewImageUrl;
		    };
		    ClientSideWebPartManager.prototype.setPropertyPaneState = function (instanceId, propertyPaneState, renderedByWebPart) {
		        var _this = this;
		        if (propertyPaneState === void 0) { propertyPaneState = PropertyPaneDefinitions_1.PropertyPaneState.Default; }
		        if (!this._propertyPaneController) {
		            this._propertyPaneController =
		                new PropertyPaneController_1.default(function (wpId) {
		                    return _this._webparts.get(wpId);
		                }, this._host.webPartConfigurationEventCallback);
		        }
		        this._propertyPaneController.setPropertyPaneState(instanceId, propertyPaneState, renderedByWebPart);
		    };
		    ClientSideWebPartManager.prototype.isPropertyPaneRenderedByWebPart = function () {
		        return this._propertyPaneController.isRenderedByWebPart();
		    };
		    ClientSideWebPartManager.prototype.onWebPartDelete = function (instanceId) {
		        this.dispose(instanceId);
		    };
		    ClientSideWebPartManager.prototype.renderError = function (domElement, error) {
		        var _this = this;
		        ExecuteWithoutFailing_1.executeWithoutFailing(function () {
		            _this._statusRenderer.renderError(domElement, error);
		            sp_telemetry_1._TraceLogger.logErrorData({
		                source: _this._logSource,
		                error: error,
		                serviceScope: _this._host.serviceScope
		            });
		        }, this._logSource);
		    };
		    ClientSideWebPartManager.prototype._disambiguateWebPartManifestLocales = function (manifests) {
		        var currentLocale = this._pageContext.cultureInfo.currentUICultureName
		            ? this._pageContext.cultureInfo.currentUICultureName.toLowerCase()
		            : undefined;
		        if (currentLocale) {
		            var disambiguateLocale_1 = function (values) {
		                var foundMatch = undefined;
		                for (var locale in values) {
		                    if (locale && locale.toLowerCase() === currentLocale && values[locale]) {
		                        foundMatch = values[locale];
		                        break;
		                    }
		                }
		                return {
		                    default: foundMatch || values['default']
		                };
		            };
		            manifests.forEach(function (manifest) {
		                if (manifest.componentType === 'WebPart') {
		                    var wpManifest = manifest;
		                    wpManifest.preconfiguredEntries.forEach(function (entry) {
		                        entry.title = disambiguateLocale_1(entry.title);
		                        entry.description = disambiguateLocale_1(entry.description);
		                        entry.group = disambiguateLocale_1(entry.group);
		                    });
		                }
		            });
		        }
		    };
		    ClientSideWebPartManager.prototype._validateInput = function (context) {
		        sp_core_library_1.Validate.isNotNullOrUndefined(context, 'web part manager context');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.domElement, 'web part element');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.instanceId, 'web part instanceId');
		        sp_core_library_1.Validate.isNotNullOrUndefined(context.manifest, 'web part manifest');
		        sp_core_library_1.Validate.isTrue(!this._webparts.get(context.instanceId), 'Duplicate web part id not allowed');
		    };
		    ClientSideWebPartManager.prototype._validateManifest = function (manifest,  mode, webPartTag) {
		        if (!manifest) {
		            if (mode === sp_core_library_1.DisplayMode.Read) {
		                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.ManifestNull, webPartTag);
		            }
		            else {
		                return false;
		            }
		        }
		        var cm = lodash.cloneDeep(manifest);
		        sp_core_library_1.Validate.isTrue(cm.manifestVersion == 2, 'Only version 2 manifests are currently supported');
		        sp_core_library_1.Validate.isTrue(!!cm.id, 'web part id cannot be null or undefined');
		        sp_core_library_1.Validate.isNotNullOrUndefined(sp_core_library_1.Guid.tryParse(cm.id), 'web part id has to be a GUID');
		        sp_core_library_1.Validate.isTrue(!!cm.version, 'webp art version cannot be null or undefined');
		        return true;
		    };
		    ClientSideWebPartManager.prototype._executeForIdsOrAll = function (instanceIds, cb) {
		        var _this = this;
		        if (instanceIds) {
		            instanceIds.forEach(function (id) {
		                var wp = _this._webparts.get(id);
		                if (wp) {
		                    cb(wp, id);
		                }
		            });
		        }
		        else {
		            this._webparts.forEach(function (wp, id) {
		                if (wp) {
		                    cb(wp, id);
		                }
		            });
		        }
		    };
		    ClientSideWebPartManager.prototype._getWebPartContext = function (context) {
		        var webPartTag = this._createWebPartTag(context.manifest, context.instanceId);
		        var parameters = {
		            parentServiceScope: this._host.serviceScope,
		            manifest: this._getManifestInstance(context),
		            instanceId: context.instanceId,
		            webPartTag: webPartTag,
		            domElement: context.domElement,
		            statusRenderer: this._statusRenderer,
		            eventAggregator: this._eventAggregator,
		            isPropertyPaneRenderedByWebPart: this.isPropertyPaneRenderedByWebPart,
		            host: this._host,
		            setPropertyPaneState: this.setPropertyPaneState
		        };
		        return new WebPartContext_1.default(parameters);
		    };
		    ClientSideWebPartManager.prototype._instanceOfBase = function (wpi) {
		        return wpi instanceof BaseClientSideWebPart_1.default || wpi['__type'] === 'BaseClientSideWebPart';
		    };
		    ClientSideWebPartManager.prototype._getLoadedModuleList = function (moduleLibrary) {
		        var loadedModulesString = '';
		        for (var m in moduleLibrary) {
		            if (moduleLibrary.hasOwnProperty(m)) {
		                if (loadedModulesString) {
		                    loadedModulesString += ',';
		                }
		                loadedModulesString += "" + m;
		            }
		        }
		        return loadedModulesString;
		    };
		    ClientSideWebPartManager.prototype._startDirtyBitTimer = function (mode) {
		        var _this = this;
		        if (mode === sp_core_library_1.DisplayMode.Read) {
		            if (this._dirtyBitTimer && sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.ClassicSharePoint) {
		                window.clearInterval(this._dirtyBitTimer);
		                this._dirtyBitTimer = undefined;
		            }
		        }
		        else if (!this._dirtyBitTimer) {
		            this._dirtyBitTimer = window.setInterval(function () {
		                _this._executeForIdsOrAll(undefined, function (wp) {
		                    wp._internalSetDirtyBit();
		                });
		            }, 1000);
		        }
		    };
		    ClientSideWebPartManager.prototype._createSuccessExtraData = function (alias, isInternal, manifestId) {
		        var successExtraData = {
		            alias: alias,
		            isInternal: isInternal,
		            manifestId: manifestId
		        };
		        return successExtraData;
		    };
		    ClientSideWebPartManager.prototype._createUnexpectedFailureExtraData = function (alias, instanceId, isInternal, manifestId) {
		        var unexpectedFailureExtraData = {
		            alias: alias,
		            instanceId: instanceId,
		            isInternal: isInternal,
		            manifestId: manifestId
		        };
		        return unexpectedFailureExtraData;
		    };
		    ClientSideWebPartManager.prototype._createLoadQosMonitor = function (manifest) {
		        return new sp_telemetry_1._QosMonitor("WebPart.Load");
		    };
		    ClientSideWebPartManager.prototype._createWebPartTag = function (manifest, instanceId) {
		        return "WebPart." + manifest.alias + "." + instanceId;
		    };
		    ClientSideWebPartManager.prototype._deleteWebPart = function (id) {
		        sp_core_library_1.Validate.isNotNullOrUndefined(id, 'id');
		        if (this._propertyPaneController) {
		            this._propertyPaneController.onWebPartDelete(id);
		        }
		        this._webparts.delete(id);
		    };
		    ClientSideWebPartManager.prototype._getManifestInstance = function (context) {
		        var manifest = context.manifest;
		        var manifestClone = lodash.cloneDeep(manifest);
		        delete manifestClone.preconfiguredEntries;
		        return manifestClone;
		    };
		    ClientSideWebPartManager.prototype._getArrayOrUndefined = function (instanceId) {
		        return instanceId ? [instanceId] : undefined;
		    };
		    ClientSideWebPartManager = __decorate([
		        decorators_1.sealed
		    ], ClientSideWebPartManager);
		    return ClientSideWebPartManager;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = ClientSideWebPartManager;
	
	
	/***/ },
	/* 90 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_90__;
	
	/***/ },
	/* 91 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_91__;
	
	/***/ },
	/* 92 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_92__;
	
	/***/ },
	/* 93 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var ReactDOM = __webpack_require__(94);
		var React = __webpack_require__(95);
		var decorators_1 = __webpack_require__(4);
		var odsp_utilities_bundle_1 = __webpack_require__(6);
		var sp_telemetry_1 = __webpack_require__(76);
		var sp_core_library_1 = __webpack_require__(77);
		var PlaceholderSpinner_1 = __webpack_require__(96);
		var Strings_resx_1 = __webpack_require__(79);
		var cswp_base_module_scss_1 = __webpack_require__(84);
		var ClientSideWebPartStatusRenderer = (function () {
		    function ClientSideWebPartStatusRenderer() {
		        this._errorId = 'cswp-error';
		        this._logSource = sp_telemetry_1._LogSource.create('ClientSideWebPartStatusRenderer');
		        this._activeIndicatorCache = new Map();
		    }
		    ClientSideWebPartStatusRenderer.prototype.displayLoadingIndicator = function (domElement, loadingMessage, timeout) {
		        var _this = this;
		        sp_core_library_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
		        if (!this._activeIndicatorCache.has(domElement)) {
		            if (!isNaN(timeout)) {
		                timeout = 900; 
		            }
		            var loadingTimer = window.setTimeout(function () {
		                if (!_this._isErrorBeingRendered) {
		                    sp_telemetry_1._TraceLogger.logVerbose(_this._logSource, Strings_resx_1.default.DisplayLoadingIndicator);
		                    var el = React.createElement(PlaceholderSpinner_1.default, { label: odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.LoadingStatus, loadingMessage) });
		                    _this._placeholder = ReactDOM.render(el, domElement);
		                }
		            }, timeout);
		            this._activeIndicatorCache.set(domElement, loadingTimer);
		        }
		    };
		    ClientSideWebPartStatusRenderer.prototype.clearLoadingIndicator = function (domElement) {
		        sp_core_library_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
		        var loadingTimer = this._activeIndicatorCache.get(domElement);
		        if (loadingTimer) {
		            sp_telemetry_1._TraceLogger.logVerbose(this._logSource, Strings_resx_1.default.ClearLoadingIndicator);
		            window.clearTimeout(loadingTimer);
		            this._activeIndicatorCache.delete(domElement);
		            if (this._placeholder) {
		                this._placeholder.showSpinner(false);
		            }
		        }
		    };
		    ClientSideWebPartStatusRenderer.prototype.renderError = function (domElement, error) {
		        this._isErrorBeingRendered = true;
		        sp_core_library_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
		        sp_core_library_1.Validate.isNotNullOrUndefined(error, 'error');
		        var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
		        if (divErr) {
		            divErr.style.display = 'block';
		        }
		        else {
		            if (!this._errorHtml) {
		                this._errorHtml =
		                    ("<div class='" + cswp_base_module_scss_1.default.errorBox + "' role='alert' aria-live='assertive'>") +
		                        ("<span class='" + cswp_base_module_scss_1.default.errorBoxText + "'></span>") +
		                        "</div>";
		            }
		            divErr = document.createElement('div');
		            divErr.setAttribute('data-sp-id', this._errorId);
		            divErr.setAttribute('data-automation-id', 'webPartError');
		            divErr.innerHTML = this._errorHtml;
		            domElement.appendChild(divErr);
		        }
		        var text = divErr.getElementsByTagName('span')[0];
		        var errorText = '';
		        if (error instanceof sp_core_library_1.SPError) {
		            errorText = error.toStringForUI();
		        }
		        else {
		            errorText += "" + (error.message || error);
		            if ((true) && error.stack) {
		                errorText += " CALLSTACK:: " + error.stack;
		            }
		        }
		        text.textContent = errorText;
		    };
		    ClientSideWebPartStatusRenderer.prototype.clearError = function (domElement) {
		        this._isErrorBeingRendered = false;
		        sp_core_library_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
		        var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
		        if (divErr) {
		            divErr.style.display = 'none';
		            divErr.removeAttribute('data-automation-id');
		        }
		    };
		    ClientSideWebPartStatusRenderer = __decorate([
		        decorators_1.sealed
		    ], ClientSideWebPartStatusRenderer);
		    return ClientSideWebPartStatusRenderer;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = ClientSideWebPartStatusRenderer;
	
	
	/***/ },
	/* 94 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_94__;
	
	/***/ },
	/* 95 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_95__;
	
	/***/ },
	/* 96 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var decorators_1 = __webpack_require__(4);
		var React = __webpack_require__(95);
		var office_ui_fabric_react_1 = __webpack_require__(97);
		__webpack_require__(98);
		var PlaceholderSpinner = (function (_super) {
		    __extends(PlaceholderSpinner, _super);
		    function PlaceholderSpinner(props) {
		        _super.call(this, props);
		        this.showSpinner = this.showSpinner.bind(this);
		        this.state = { showSpinner: true };
		    }
		    PlaceholderSpinner.prototype.render = function () {
		        return (React.createElement(office_ui_fabric_react_1.Overlay, {className: 'Placeholder-overlay'}, this.state.showSpinner && (React.createElement("div", {className: 'Placeholder-spinnerContainer'}, 
		            React.createElement(office_ui_fabric_react_1.Spinner, {type: office_ui_fabric_react_1.SpinnerType.large, label: this.props.label})
		        ))));
		    };
		    PlaceholderSpinner.prototype.showSpinner = function (showSpinner) {
		        this.setState({ showSpinner: showSpinner });
		    };
		    PlaceholderSpinner = __decorate([
		        decorators_1.sealed
		    ], PlaceholderSpinner);
		    return PlaceholderSpinner;
		}(React.Component));
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = PlaceholderSpinner;
	
	
	/***/ },
	/* 97 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_97__;
	
	/***/ },
	/* 98 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(99);
	
	
	/***/ },
	/* 99 */
	/***/ function(module, exports, __webpack_require__) {
	
		var content = __webpack_require__(100);
		var loader = __webpack_require__(88);
		
		if(typeof content === "string") content = [[module.id, content]];
		
		// add the styles to the DOM
		for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
		
		if(content.locals) module.exports = content.locals;
	
	/***/ },
	/* 100 */
	/***/ function(module, exports, __webpack_require__) {
	
		exports = module.exports = __webpack_require__(87)();
		// imports
		
		
		// module
		exports.push([module.id, ".Placeholder{display:-webkit-box;display:-ms-flexbox;display:flex}.Placeholder .Placeholder-container{-webkit-box-align:center;-ms-flex-align:center;-ms-grid-row-align:center;align-items:center;color:\"[theme:neutralSecondary, default: #666666]\";background-color:\"[theme:neutralLighter, default: #f4f4f4]\";width:100%;padding:80px 0}.Placeholder .Placeholder-container .Placeholder-head{color:\"[theme:neutralPrimary, default: #333333]\"}.Placeholder .Placeholder-container .Placeholder-head .Placeholder-headContainer{height:100%;white-space:nowrap;text-align:center}.Placeholder .Placeholder-container .Placeholder-head .Placeholder-icon{display:inline-block;vertical-align:middle;white-space:normal}.Placeholder .Placeholder-container .Placeholder-head .Placeholder-text{display:inline-block;vertical-align:middle;white-space:normal}[dir=ltr] .Placeholder .Placeholder-container .Placeholder-head .Placeholder-text{padding-left:20px}[dir=rtl] .Placeholder .Placeholder-container .Placeholder-head .Placeholder-text{padding-right:20px}.Placeholder .Placeholder-container .Placeholder-description{width:65%;vertical-align:middle;margin:0 auto;text-align:center}.Placeholder .Placeholder-container .Placeholder-description .Placeholder-descriptionText{color:\"[theme:neutralSecondary, default: #666666]\";font-size:17px;display:inline-block;margin:24px 0;font-weight:100}.Placeholder-overlay{position:relative;height:100%;z-index:1}.Placeholder-overlay .Placeholder-spinnerContainer{position:relative;width:100%;margin:164px 0}", ""]);
		
		// exports
	
	
	/***/ },
	/* 101 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var decorators_1 = __webpack_require__(4);
		var sp_core_library_1 = __webpack_require__(77);
		var ReservedEventNames_1 = __webpack_require__(102);
		var EventAggregator = (function () {
		    function EventAggregator() {
		        this._events = new Map();
		        this._sources = new Map();
		    }
		    EventAggregator.prototype.subscribeByEventName = function (eventName, subscriberId, callback) {
		        sp_core_library_1.Validate.isNotNullOrUndefined(eventName, 'eventName');
		        this._validateEvent(eventName);
		        this._setSubscription(eventName, subscriberId, callback, this._events);
		    };
		    EventAggregator.prototype.subscribeBySourceId = function (sourceId, subscriberId, callback) {
		        sp_core_library_1.Validate.isNotNullOrUndefined(sourceId, 'sourceId');
		        this._setSubscription(sourceId, subscriberId, callback, this._sources);
		    };
		    EventAggregator.prototype.raiseEvent = function (eventName, eventObject) {
		        sp_core_library_1.Validate.isNotNullOrUndefined(eventName, 'eventName');
		        sp_core_library_1.Validate.isNotNullOrUndefined(eventObject, 'eventObject');
		        sp_core_library_1.Validate.isNotNullOrUndefined(eventObject.sourceId, 'eventObject.sourceId');
		        var targets = {};
		        this._validateEvent(eventName);
		        this._processEvent(eventName, eventObject, targets, this._events.get(eventName));
		        this._processEvent(eventName, eventObject, targets, this._sources.get(eventObject.sourceId));
		    };
		    EventAggregator.prototype._validateEvent = function (eventName) {
		        var e = eventName.split(ReservedEventNames_1.default.delimitor);
		        if (e.length !== 2) {
		            throw new Error('Event ' + eventName + ' not in eventName:action format');
		        }
		    };
		    EventAggregator.prototype._processEvent = function (eventName, eventObject, targets, map) {
		        if (map) {
		            map.forEach(function (callback, targetId) {
		                if (!targets[targetId]) {
		                    targets[targetId] = true;
		                    callback(eventName, eventObject);
		                }
		            });
		        }
		    };
		    EventAggregator.prototype._setSubscription = function (id, subscriberId, callback, eventBucket) {
		        sp_core_library_1.Validate.isNotNullOrUndefined(subscriberId, 'subscriberId');
		        sp_core_library_1.Validate.isNotNullOrUndefined(callback, 'callback');
		        if (!eventBucket.get(id)) {
		            eventBucket.set(id, new Map());
		        }
		        var map = eventBucket.get(id);
		        map.set(subscriberId, callback);
		    };
		    EventAggregator = __decorate([
		        decorators_1.sealed
		    ], EventAggregator);
		    return EventAggregator;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = EventAggregator;
	
	
	/***/ },
	/* 102 */
	/***/ function(module, exports) {
	
		"use strict";
		var ReservedEventNames = (function () {
		    function ReservedEventNames() {
		    }
		    ReservedEventNames.delimitor = ':';
		    ReservedEventNames.configure = 'configure';
		    ReservedEventNames.start = 'start';
		    ReservedEventNames.end = 'end';
		    ReservedEventNames.configureStart = ReservedEventNames.configure
		        + ReservedEventNames.delimitor + ReservedEventNames.start;
		    ReservedEventNames.configureEnd = ReservedEventNames.configure
		        + ReservedEventNames.delimitor + ReservedEventNames.end;
		    ReservedEventNames.classicToolpane = 'ClassicToolpane';
		    ReservedEventNames.classicToolpaneId = '121ff297-293c-4d66-a24b-916156760cab';
		    return ReservedEventNames;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = ReservedEventNames;
	
	
	/***/ },
	/* 103 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var sp_telemetry_1 = __webpack_require__(76);
		var sp_core_library_1 = __webpack_require__(77);
		function executeWithoutFailing(method, logSource) {
		    sp_core_library_1.Validate.isNotNullOrUndefined(method, 'method');
		    try {
		        method();
		    }
		    catch (e) {
		        if (logSource) {
		            sp_telemetry_1._TraceLogger.logError(logSource, new Error('Error: ' + e));
		        }
		    }
		}
		exports.executeWithoutFailing = executeWithoutFailing;
	
	
	/***/ },
	/* 104 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var ReactDOM = __webpack_require__(94);
		var React = __webpack_require__(95);
		var odsp_utilities_bundle_1 = __webpack_require__(6);
		var sp_core_library_1 = __webpack_require__(77);
		var sp_telemetry_1 = __webpack_require__(76);
		var PropertyPaneDefinitions_1 = __webpack_require__(2);
		var Strings_resx_1 = __webpack_require__(105);
		var PropertyPaneController_module_scss_1 = __webpack_require__(106);
		__webpack_require__(105);
		__webpack_require__(97);
		__webpack_require__(109);
		var PropertyPaneController = (function () {
		    function PropertyPaneController(webPartGetter, callback) {
		        this._logSource = sp_telemetry_1._LogSource.create('PropertyPaneController');
		        sp_core_library_1.Validate.isNotNullOrUndefined(webPartGetter, 'webPartGetter');
		        this._webPartGetter = webPartGetter;
		        this._configurationEventCallback = callback;
		        this._onPropertyPaneFieldChanged = this._onPropertyPaneFieldChanged.bind(this);
		        this._onConfigurationEvent = this._onConfigurationEvent.bind(this);
		        this._fireConfigurationEvent = this._fireConfigurationEvent.bind(this);
		    }
		    PropertyPaneController.prototype.setPropertyPaneState = function (id, propertyPaneState, renderedByWebPart) {
		        var noOp = renderedByWebPart &&
		            propertyPaneState === PropertyPaneDefinitions_1.PropertyPaneState.Refresh &&
		            id !== this._currentlyConfiguredWebPartId;
		        if (!noOp) {
		            var toBeConfiguredWebPart = this._webPartGetter(id);
		            this._resolvePropertyPaneElements();
		            var paneWillOpen = !this._isOpen &&
		                (propertyPaneState === PropertyPaneDefinitions_1.PropertyPaneState.Open || propertyPaneState === PropertyPaneDefinitions_1.PropertyPaneState.Toggle);
		            if (id && this._currentlyConfiguredWebPartId && (id !== this._currentlyConfiguredWebPartId || paneWillOpen)) {
		                this._fireConfigurationEvent(id, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneWebPartsSwitched);
		            }
		            this._isRenderedByWebPart = !!renderedByWebPart;
		            this._setPropertyPaneState(toBeConfiguredWebPart, id, propertyPaneState);
		            this._currentlyConfiguredWebPartId = id;
		        }
		        else {
		            sp_telemetry_1._TraceLogger.logVerbose(this._logSource, odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.NoOpOnRefreshPropertyPaneText, id));
		        }
		    };
		    PropertyPaneController.prototype.isRenderedByWebPart = function () {
		        return this._isRenderedByWebPart;
		    };
		    ;
		    PropertyPaneController.prototype.onWebPartDelete = function (id) {
		        sp_core_library_1.Validate.isNonemptyString(id, 'id');
		        if (id === this._currentlyConfiguredWebPartId) {
		            if (this._isOpen) {
		                this._renderPropertyPane(undefined, true);
		            }
		            this._currentlyConfiguredWebPartId = undefined;
		        }
		    };
		    PropertyPaneController.prototype._setPropertyPaneState = function (wp, id, propertyPaneState) {
		        switch (propertyPaneState) {
		            case PropertyPaneDefinitions_1.PropertyPaneState.Open:
		                var paneOpenBeforeRender = this._isOpen;
		                this._renderPropertyPane(wp, true, true);
		                if (paneOpenBeforeRender) {
		                    this._fireNoToggleConfigurationEvents(id);
		                }
		                break;
		            case PropertyPaneDefinitions_1.PropertyPaneState.Close:
		                if (this._isOpen) {
		                    this._renderPropertyPane(undefined);
		                    this._togglePropertyPanePositionAndFireConfigurationEvents();
		                }
		                break;
		            case PropertyPaneDefinitions_1.PropertyPaneState.Toggle:
		                if (!this._isOpen) {
		                    this._renderPropertyPane(wp, true, true);
		                }
		                else {
		                    this._renderPropertyPane(undefined);
		                    this._togglePropertyPanePositionAndFireConfigurationEvents();
		                }
		                break;
		            case PropertyPaneDefinitions_1.PropertyPaneState.Default:
		                if (this._isOpen) {
		                    this._fireNoToggleConfigurationEvents(id);
		                    if (this._isCurrentlyConfiguredPropertyPaneReactive) {
		                        this._renderPropertyPane(wp, true, true);
		                    }
		                    else {
		                        this._renderPropertyPane(wp, true, true);
		                    }
		                }
		                break;
		            case PropertyPaneDefinitions_1.PropertyPaneState.Refresh:
		                if (this._isOpen) {
		                    this._renderPropertyPane(wp, true, false);
		                }
		                break;
		        }
		        if (this._isOpen !== false && wp) {
		            var wpContext = wp._context; 
		            var wpAlias = wpContext && wpContext._manifest && wpContext._manifest.alias;
		            var isInternal = wpContext && wpContext._manifest && wpContext._manifest.isInternal || false;
		            var logEntry = new sp_telemetry_1._LogEntry(this._logSource.id, 'PropertyPaneOpened', sp_telemetry_1._LogType.Event, {
		                'alias': wpAlias,
		                'isInternal': isInternal.toString()
		            });
		            sp_telemetry_1._EngagementLogger.logEventWithLogEntry(logEntry);
		        }
		    };
		    PropertyPaneController.prototype._renderPropertyPane = function (currentWebpart, shouldRecreatePropertyPaneElement, resetPropertyPaneState) {
		        var _this = this;
		        if (currentWebpart) {
		            this._currentPropertyPaneData = currentWebpart._internalGetPropertyPaneData();
		            this._currentPropertyPaneData.onPropertyPaneFieldChanged = this._onPropertyPaneFieldChanged;
		            this._currentPropertyPaneData.onConfigurationEvent = this._onConfigurationEvent;
		            this._currentPropertyPaneData.render = function () { _this._render(); };
		            this._currentPropertyPaneData.shouldResetState = resetPropertyPaneState;
		            if (this._currentPropertyPaneData.configuration &&
		                this._currentPropertyPaneData.configuration.showLoadingIndicator) {
		                var delay = this._currentPropertyPaneData.configuration.loadingIndicatorDelayTime === undefined ?
		                    500 :
		                    this._currentPropertyPaneData.configuration.loadingIndicatorDelayTime;
		                setTimeout(function () {
		                    if (_this._currentPropertyPaneData.configuration.showLoadingIndicator) {
		                        _this._loadPropertyPaneComponent(true);
		                    }
		                }, delay);
		            }
		            else {
		                this._loadPropertyPaneComponent(true);
		            }
		        }
		        else {
		            this._currentPropertyPaneData = this._getEmptyPropertyPaneData();
		            this._loadPropertyPaneComponent(shouldRecreatePropertyPaneElement);
		        }
		    };
		    PropertyPaneController.prototype._loadPropertyPaneComponent = function (shouldRecreatePropertyPaneElement) {
		        var _this = this;
		        __webpack_require__.e/* nsure */(1, function (require) {
		            var propertyPane = __webpack_require__(110)['default'];
		            var insertIntoDom = false;
		            if (shouldRecreatePropertyPaneElement) {
		                if (!_this._propertyPaneElement) {
		                    _this._propertyPaneElement = document.createElement('div');
		                    insertIntoDom = true;
		                }
		            }
		            _this._propertyPaneElement.className = _this._currentPropertyPaneData.webPartId;
		            var el = React.createElement(propertyPane, { data: _this._currentPropertyPaneData });
		            ReactDOM.render(el, _this._propertyPaneElement);
		            if (_this._propertyPaneContainer) {
		                if (insertIntoDom) {
		                    _this._clearPropertyPaneContainer();
		                    _this._propertyPaneContainer.appendChild(_this._propertyPaneElement);
		                }
		                if (!_this._isOpen) {
		                    _this._togglePropertyPanePositionAndFireConfigurationEvents();
		                }
		            }
		            else {
		                if (insertIntoDom) {
		                    document.body.insertBefore(_this._propertyPaneElement, document.body.lastChild.nextSibling);
		                }
		            }
		        });
		    };
		    PropertyPaneController.prototype._render = function () {
		        var wp = this._webPartGetter(this._currentPropertyPaneData.webPartId);
		        if (wp) {
		            this._renderPropertyPane(wp);
		        }
		    };
		    PropertyPaneController.prototype._onPropertyPaneFieldChanged = function (propertyName, newValue) {
		        sp_core_library_1.Validate.isNonemptyString(propertyName, 'propertyName');
		        sp_core_library_1.Validate.isNotNullOrUndefined(newValue, 'newValue');
		        if (!this._currentPropertyPaneData.webPartId) {
		            throw new Error('onPropertyPaneFieldChanged event is not expected when no web part is being configured');
		        }
		        var wp = this._webPartGetter(this._currentPropertyPaneData.webPartId);
		        if (wp) {
		            wp._internalOnPropertyPaneFieldChanged(propertyName, newValue);
		            this._renderPropertyPane(wp);
		        }
		        if (this._isCurrentlyConfiguredPropertyPaneReactive()) {
		            this._resetConfigurationCompleteTimeout();
		        }
		    };
		    PropertyPaneController.prototype._onConfigurationEvent = function (configurationEvent) {
		        switch (configurationEvent) {
		            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneClosed:
		                this._togglePropertyPanePositionAndFireConfigurationEvents();
		                break;
		            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneApplyClicked:
		            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneLostFocus:
		                this._fireConfigurationEvent(this._currentlyConfiguredWebPartId, configurationEvent);
		                this._fireConfigurationEvent(this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationComplete);
		                break;
		        }
		    };
		    PropertyPaneController.prototype._togglePropertyPanePositionAndFireConfigurationEvents = function () {
		        if (this._isOpen) {
		            if (this._pageContentElement) {
		                this._pageContentElement.classList.remove(PropertyPaneController_module_scss_1.default.shrinkContent);
		            }
		            else {
		                ReactDOM.unmountComponentAtNode(this._propertyPaneElement);
		            }
		            if (this._workbenchCommandBarElement) {
		                this._workbenchCommandBarElement.classList.remove(PropertyPaneController_module_scss_1.default.shrinkContent);
		            }
		            this._propertyPaneContainer.classList.remove(PropertyPaneController_module_scss_1.default.showPane);
		        }
		        else {
		            if (this._pageContentElement) {
		                this._pageContentElement.classList.add(PropertyPaneController_module_scss_1.default.shrinkContent);
		            }
		            else {
		                this._propertyPaneContainer.style.top = '50px';
		                this._propertyPaneContainer.style.zIndex = '999';
		            }
		            if (this._workbenchCommandBarElement) {
		                this._workbenchCommandBarElement.classList.add(PropertyPaneController_module_scss_1.default.shrinkContent);
		            }
		            this._propertyPaneContainer.classList.add(PropertyPaneController_module_scss_1.default.showPane);
		        }
		        this._isOpen = !this._isOpen;
		        this._firePostToggleConfigurationEvents();
		    };
		    PropertyPaneController.prototype._firePostToggleConfigurationEvents = function () {
		        var _this = this;
		        if (this._isOpen) {
		            window.setTimeout(function () {
		                _this._fireConfigurationEvent(_this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneOpened);
		                _this._fireConfigurationEvent(_this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationStart);
		                window.postMessage('Property pane toggled', window.location.origin);
		            }, PropertyPaneController.ANIMATION_TIMEOUT);
		        }
		        else {
		            this._fireConfigurationEvent(this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationComplete);
		            window.setTimeout(function () {
		                _this._fireConfigurationEvent(_this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneClosed);
		                window.postMessage('Property pane toggled', window.location.origin);
		            }, PropertyPaneController.ANIMATION_TIMEOUT);
		        }
		    };
		    PropertyPaneController.prototype._fireNoToggleConfigurationEvents = function (id) {
		        this._fireConfigurationEvent(this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationComplete);
		        this._fireConfigurationEvent(id, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationStart);
		    };
		    PropertyPaneController.prototype._fireConfigurationEvent = function (webpartId, configurationEvent) {
		        this._clearConfigurationCompleteTimeout();
		        var wp = this._webPartGetter(webpartId);
		        if (wp) {
		            if (this._configurationEventCallback) {
		                this._configurationEventCallback(configurationEvent, wp._internalSerialize());
		            }
		            wp._internalOnConfigurationEvent(configurationEvent);
		        }
		    };
		    PropertyPaneController.prototype._resolvePropertyPaneElements = function () {
		        var workbenchElement = document.getElementById('workbenchPageContent');
		        if (workbenchElement) {
		            this._pageContentElement = workbenchElement;
		            this._workbenchCommandBarElement = document.getElementById('workbenchCommandBar');
		        }
		        else {
		            this._pageContentElement = document.getElementById('spPageChromeAppDiv');
		        }
		        if (!this._pageContentElement) {
		            if (!this._propertyPaneContainer) {
		                this._propertyPaneContainer = document.createElement('div');
		                this._propertyPaneContainer.id = PropertyPaneController.PROPERTY_PANE_CONTAINER_ID;
		                this._propertyPaneContainer.className = PropertyPaneController.PROPERTY_PANE_CONTAINER_ID;
		                document.body.appendChild(this._propertyPaneContainer);
		            }
		        }
		        else {
		            this._propertyPaneContainer = document.getElementById(PropertyPaneController.PROPERTY_PANE_CONTAINER_ID);
		        }
		    };
		    PropertyPaneController.prototype._clearPropertyPaneContainer = function () {
		        while (this._propertyPaneContainer && this._propertyPaneContainer.firstChild) {
		            this._propertyPaneContainer.removeChild(this._propertyPaneContainer.firstChild);
		        }
		    };
		    PropertyPaneController.prototype._resetConfigurationCompleteTimeout = function () {
		        this._clearConfigurationCompleteTimeout();
		        this._configurationCompletionTimeout = window.setTimeout(this._fireConfigurationEvent, PropertyPaneController.CONFIGURATION_COMPLETE_TIMEOUT, this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationComplete);
		    };
		    PropertyPaneController.prototype._clearConfigurationCompleteTimeout = function () {
		        if (this._configurationCompletionTimeout) {
		            window.clearTimeout(this._configurationCompletionTimeout);
		            this._configurationCompletionTimeout = undefined;
		        }
		    };
		    PropertyPaneController.prototype._isCurrentlyConfiguredPropertyPaneReactive = function () {
		        if (this._currentlyConfiguredWebPartId) {
		            var currentlyConfiguredWebPart = this._webPartGetter(this._currentlyConfiguredWebPartId);
		            return currentlyConfiguredWebPart._internalGetPropertyPaneData().isReactive;
		        }
		        return false;
		    };
		    PropertyPaneController.prototype._getEmptyPropertyPaneData = function () {
		        return {
		            webPartId: undefined,
		            title: undefined,
		            shouldResetState: true,
		            onPropertyPaneFieldChanged: undefined,
		            onConfigurationEvent: this._onConfigurationEvent,
		            onRendered: undefined,
		            properties: undefined,
		            configuration: undefined
		        };
		    };
		    PropertyPaneController.ANIMATION_TIMEOUT = 400;
		    PropertyPaneController.CONFIGURATION_COMPLETE_TIMEOUT = 5000;
		    PropertyPaneController.PROPERTY_PANE_CONTAINER_ID = 'spPropertyPaneContainer';
		    return PropertyPaneController;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = PropertyPaneController;
	
	
	/***/ },
	/* 105 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var strings =  false
		    ? require('../../resx-strings/en-us.json')
		    : __webpack_require__(80);
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = (strings['_ZRJdhh/Ht8a/UwYAwPqP9Q'] || {});
	
	
	/***/ },
	/* 106 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		__webpack_require__(107);
		var styles = {
		    spPropertyPaneContainer: 'spPropertyPaneContainer_b12abd02',
		    showPane: 'showPane_d3482ad8',
		    shrinkContent: 'shrinkContent_c60d2df3',
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = styles;
	
	
	/***/ },
	/* 107 */
	/***/ function(module, exports, __webpack_require__) {
	
		var content = __webpack_require__(108);
		var loader = __webpack_require__(88);
		
		if(typeof content === "string") content = [[module.id, content]];
		
		// add the styles to the DOM
		for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
		
		if(content.locals) module.exports = content.locals;
	
	/***/ },
	/* 108 */
	/***/ function(module, exports, __webpack_require__) {
	
		exports = module.exports = __webpack_require__(87)();
		// imports
		
		
		// module
		exports.push([module.id, "[id^=spPropertyPaneContainer].spPropertyPaneContainer_b12abd02{position:absolute;top:50px;bottom:0;z-index:999}html[dir=ltr] [id^=spPropertyPaneContainer].spPropertyPaneContainer_b12abd02{right:-340px}html[dir=rtl] [id^=spPropertyPaneContainer].spPropertyPaneContainer_b12abd02{left:-340px}html[dir=ltr] [id^=spPropertyPaneContainer].showPane_d3482ad8{right:0}html[dir=rtl] [id^=spPropertyPaneContainer].showPane_d3482ad8{left:0}html[dir=ltr] [id^=spPageChromeAppDiv].shrinkContent_c60d2df3{right:340px}html[dir=rtl] [id^=spPageChromeAppDiv].shrinkContent_c60d2df3{left:340px}html[dir=ltr] [id^=workbenchPageContent].shrinkContent_c60d2df3{right:340px}html[dir=rtl] [id^=workbenchPageContent].shrinkContent_c60d2df3{left:340px}html[dir=ltr] [id^=workbenchCommandBar].shrinkContent_c60d2df3{padding-right:340px}html[dir=rtl] [id^=workbenchCommandBar].shrinkContent_c60d2df3{padding-left:340px}", ""]);
		
		// exports
	
	
	/***/ },
	/* 109 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_109__;
	
	/***/ },
	/* 110 */,
	/* 111 */,
	/* 112 */,
	/* 113 */,
	/* 114 */
	/***/ function(module, exports) {
	
		"use strict";
		(function (PropertyPaneFieldType) {
		    PropertyPaneFieldType[PropertyPaneFieldType["Custom"] = 1] = "Custom";
		    PropertyPaneFieldType[PropertyPaneFieldType["CheckBox"] = 2] = "CheckBox";
		    PropertyPaneFieldType[PropertyPaneFieldType["TextField"] = 3] = "TextField";
		    PropertyPaneFieldType[PropertyPaneFieldType["Toggle"] = 5] = "Toggle";
		    PropertyPaneFieldType[PropertyPaneFieldType["Dropdown"] = 6] = "Dropdown";
		    PropertyPaneFieldType[PropertyPaneFieldType["Label"] = 7] = "Label";
		    PropertyPaneFieldType[PropertyPaneFieldType["Slider"] = 8] = "Slider";
		    PropertyPaneFieldType[PropertyPaneFieldType["Heading"] = 9] = "Heading";
		    PropertyPaneFieldType[PropertyPaneFieldType["ChoiceGroup"] = 10] = "ChoiceGroup";
		    PropertyPaneFieldType[PropertyPaneFieldType["Button"] = 11] = "Button";
		    PropertyPaneFieldType[PropertyPaneFieldType["HorizontalRule"] = 12] = "HorizontalRule";
		    PropertyPaneFieldType[PropertyPaneFieldType["Link"] = 13] = "Link";
		})(exports.PropertyPaneFieldType || (exports.PropertyPaneFieldType = {}));
		var PropertyPaneFieldType = exports.PropertyPaneFieldType;
	
	
	/***/ },
	/* 115 */,
	/* 116 */,
	/* 117 */,
	/* 118 */,
	/* 119 */,
	/* 120 */,
	/* 121 */,
	/* 122 */,
	/* 123 */,
	/* 124 */,
	/* 125 */,
	/* 126 */,
	/* 127 */,
	/* 128 */,
	/* 129 */,
	/* 130 */,
	/* 131 */,
	/* 132 */,
	/* 133 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var decorators_1 = __webpack_require__(4);
		var sp_http_1 = __webpack_require__(91);
		var sp_telemetry_1 = __webpack_require__(76);
		var sp_page_context_1 = __webpack_require__(92);
		var sp_component_base_1 = __webpack_require__(134);
		var PropertyPaneDefinitions_1 = __webpack_require__(2);
		var PropertyPaneAccessor_1 = __webpack_require__(135);
		var WebPartContext = (function (_super) {
		    __extends(WebPartContext, _super);
		    function WebPartContext(parameters) {
		        var _this = this;
		        _super.call(this, parameters);
		        this._instanceId = parameters.instanceId;
		        this._webPartTag = parameters.webPartTag;
		        this._domElement = parameters.domElement;
		        this._host = parameters.host;
		        this._statusRenderer = parameters.statusRenderer;
		        this._eventAggregator = parameters.eventAggregator;
		        this._setPropertyPaneState = parameters.setPropertyPaneState;
		        this._isPropertyPaneRenderedByWebPart = parameters.isPropertyPaneRenderedByWebPart;
		        this._propertyPaneAccessor = new PropertyPaneAccessor_1.default(function () { _this._setPropertyPaneState(_this._instanceId, PropertyPaneDefinitions_1.PropertyPaneState.Open, true); }, function () { _this._setPropertyPaneState(_this._instanceId, PropertyPaneDefinitions_1.PropertyPaneState.Refresh, true); }, function () { return _this._isPropertyPaneRenderedByWebPart(); });
		    }
		    Object.defineProperty(WebPartContext.prototype, "manifest", {
		        get: function () {
		            return _super.prototype.getBaseManifest.call(this);
		        },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(WebPartContext.prototype, "instanceId", {
		        get: function () { return this._instanceId; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(WebPartContext.prototype, "webPartTag", {
		        get: function () { return this._webPartTag; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(WebPartContext.prototype, "domElement", {
		        get: function () { return this._domElement; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(WebPartContext.prototype, "spHttpClient", {
		        get: function () { return this._spHttpClient; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(WebPartContext.prototype, "httpClient", {
		        get: function () { return this._httpClient; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(WebPartContext.prototype, "pageContext", {
		        get: function () { return this._pageContext; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(WebPartContext.prototype, "statusRenderer", {
		        get: function () { return this._statusRenderer; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(WebPartContext.prototype, "eventAggregator", {
		        get: function () { return this._eventAggregator; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(WebPartContext.prototype, "propertyPane", {
		        get: function () { return this._propertyPaneAccessor; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(WebPartContext.prototype, "host", {
		        get: function () { return this._host; },
		        enumerable: true,
		        configurable: true
		    });
		    WebPartContext.prototype.onProvideServices = function (parameters) {
		        _super.prototype.onProvideServices.call(this, parameters);
		        this._httpClient = this.serviceScope.createDefaultAndProvide(sp_http_1.HttpClient.serviceKey);
		        this._spHttpClient = this.serviceScope.createDefaultAndProvide(sp_http_1.SPHttpClient.serviceKey);
		        this.serviceScope.provide(sp_telemetry_1._logSourceServiceKey, sp_telemetry_1._LogSource.create(parameters.webPartTag));
		    };
		    WebPartContext.prototype.onConsumeServices = function () {
		        _super.prototype.onConsumeServices.call(this);
		        this._pageContext = this.serviceScope.consume(sp_page_context_1.PageContext.serviceKey);
		    };
		    __decorate([
		        decorators_1.override
		    ], WebPartContext.prototype, "manifest", null);
		    __decorate([
		        decorators_1.override
		    ], WebPartContext.prototype, "onProvideServices", null);
		    __decorate([
		        decorators_1.override
		    ], WebPartContext.prototype, "onConsumeServices", null);
		    WebPartContext = __decorate([
		        decorators_1.sealed
		    ], WebPartContext);
		    return WebPartContext;
		}(sp_component_base_1._ClientSideComponentContext));
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = WebPartContext;
	
	
	/***/ },
	/* 134 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_134__;
	
	/***/ },
	/* 135 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var decorators_1 = __webpack_require__(4);
		var PropertyPaneAccessor = (function () {
		    function PropertyPaneAccessor(openProperytPane, refresh, isRenderedByWebPart) {
		        this._open = openProperytPane;
		        this._refresh = refresh;
		        this._isRenderedByWebPart = isRenderedByWebPart;
		        this.open = this.open.bind(this);
		        this.refresh = this.refresh.bind(this);
		        this.isRenderedByWebPart = this.isRenderedByWebPart.bind(this);
		    }
		    PropertyPaneAccessor.prototype.open = function () {
		        this._open();
		    };
		    PropertyPaneAccessor.prototype.refresh = function () {
		        this._refresh();
		    };
		    PropertyPaneAccessor.prototype.isRenderedByWebPart = function () {
		        return this._isRenderedByWebPart();
		    };
		    PropertyPaneAccessor = __decorate([
		        decorators_1.sealed
		    ], PropertyPaneAccessor);
		    return PropertyPaneAccessor;
		}());
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = PropertyPaneAccessor;
	
	
	/***/ },
	/* 136 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var React = __webpack_require__(95);
		var ReactDOM = __webpack_require__(94);
		var BaseClientSideWebPart_1 = __webpack_require__(3);
		var ReactWebPart = (function (_super) {
		    __extends(ReactWebPart, _super);
		    function ReactWebPart(componentType) {
		        _super.call(this);
		        this._componentType = componentType;
		    }
		    ReactWebPart.prototype.onDispose = function () {
		        ReactDOM.unmountComponentAtNode(this.domElement);
		    };
		    ReactWebPart.prototype.render = function () {
		        var element = this.domElement;
		        this._componentInstance = React.createElement(this._componentType, {
		            mode: this.displayMode
		        });
		        ReactDOM.render(this._componentInstance, element);
		    };
		    return ReactWebPart;
		}(BaseClientSideWebPart_1.default));
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = ReactWebPart;
	
	
	/***/ },
	/* 137 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var decorators_1 = __webpack_require__(4);
		var lodash = __webpack_require__(5);
		var ISerializedServerProcessedData_1 = __webpack_require__(138);
		var WebPartDataConverter = (function () {
		    function WebPartDataConverter() {
		    }
		    WebPartDataConverter.prototype.convertServerProcessedDataToHtml = function (serverContent) {
		        var result = '';
		        if (serverContent) {
		            if (serverContent.htmlStrings) {
		                for (var propPath in serverContent.htmlStrings) {
		                    var value = serverContent.htmlStrings[propPath];
		                    result +=
		                        this._getHtmlString(propPath, ISerializedServerProcessedData_1.ServerProcessedDataType.htmlString, value);
		                }
		            }
		            if (serverContent.links) {
		                for (var propPath in serverContent.links) {
		                    var value = serverContent.links[propPath];
		                    result +=
		                        this._getHtmlString(propPath, ISerializedServerProcessedData_1.ServerProcessedDataType.link, value);
		                }
		            }
		            if (serverContent.imageSources) {
		                for (var propPath in serverContent.imageSources) {
		                    var value = serverContent.imageSources[propPath];
		                    result +=
		                        this._getHtmlString(propPath, ISerializedServerProcessedData_1.ServerProcessedDataType.imageSource, value);
		                }
		            }
		        }
		        return result;
		    };
		    WebPartDataConverter.prototype.convertServerProcessedHtmlToData = function (htmlString) {
		        var serverContent = {
		            htmlStrings: {},
		            links: {},
		            imageSources: {}
		        };
		        if (!htmlString || htmlString === '') {
		            return serverContent;
		        }
		        var tempNode = document.createElement('DIV');
		        tempNode.innerHTML = htmlString;
		        var nodes = tempNode.childNodes;
		        for (var i = 0; i < nodes.length; i++) {
		            var node = nodes[i];
		            var key = lodash.unescape(node.getAttribute('data-sp-prop-name'));
		            if (key) {
		                switch (node.tagName) {
		                    case 'DIV':
		                        serverContent.htmlStrings[key] = node.innerHTML;
		                        break;
		                    case 'LINK':
		                        serverContent.links[key] = node.getAttribute('href');
		                        break;
		                    case 'IMG':
		                        serverContent.imageSources[key] = node.getAttribute('src');
		                        if (serverContent.imageSources[key] === undefined || serverContent.imageSources[key] === null) {
		                            serverContent.imageSources[key] = node.getAttribute('href');
		                        }
		                        break;
		                }
		            }
		        }
		        return serverContent;
		    };
		    WebPartDataConverter.prototype._getHtmlString = function (propName, propType, propValue) {
		        var htmlPropString = '';
		        if (propName && typeof propValue === 'string' && propValue) {
		            var sanitizedValue = this._normalizeHTML(lodash.unescape(propValue));
		            switch (propType) {
		                case ISerializedServerProcessedData_1.ServerProcessedDataType.htmlString:
		                    htmlPropString = "<div data-sp-prop-name='" + lodash.escape(propName) + "'>" + sanitizedValue + "</div>";
		                    break;
		                case ISerializedServerProcessedData_1.ServerProcessedDataType.link:
		                    htmlPropString = "<link data-sp-prop-name='" + lodash.escape(propName) + "' href='" + sanitizedValue + "' />";
		                    break;
		                case ISerializedServerProcessedData_1.ServerProcessedDataType.imageSource:
		                    htmlPropString = "<img data-sp-prop-name='" + lodash.escape(propName) + "' src='" + sanitizedValue + "' />";
		                    break;
		            }
		        }
		        return (htmlPropString);
		    };
		    WebPartDataConverter.prototype._normalizeHTML = function (htmlString) {
		        if (!htmlString || htmlString === '') {
		            return htmlString;
		        }
		        var tempDiv = document.createElement('DIV');
		        tempDiv.innerHTML =
		            "<div class='child1'></div>" +
		                ("<div class='main'>" + htmlString + "</div>") +
		                "<div class='child3'></div>";
		        var children = tempDiv.children;
		        if (!children[0] || children[0].className !== 'child1' ||
		            !children[1] || children[1].className !== 'main' ||
		            !children[2] || children[2].className !== 'child3') {
		            return '';
		        }
		        var mainDiv = children[1];
		        var scriptTags = mainDiv.querySelectorAll('script');
		        for (var i = 0; i < scriptTags.length; i++) {
		            var scriptTag = scriptTags[0];
		            if (scriptTag) {
		                scriptTag.parentElement.removeChild(scriptTag);
		            }
		        }
		        return mainDiv.innerHTML;
		    };
		    WebPartDataConverter = __decorate([
		        decorators_1.sealed
		    ], WebPartDataConverter);
		    return WebPartDataConverter;
		}());
		exports.WebPartDataConverter = WebPartDataConverter;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = new WebPartDataConverter();
	
	
	/***/ },
	/* 138 */
	/***/ function(module, exports) {
	
		"use strict";
		(function (ServerProcessedDataType) {
		    ServerProcessedDataType[ServerProcessedDataType["htmlString"] = 1] = "htmlString";
		    ServerProcessedDataType[ServerProcessedDataType["link"] = 2] = "link";
		    ServerProcessedDataType[ServerProcessedDataType["imageSource"] = 3] = "imageSource";
		})(exports.ServerProcessedDataType || (exports.ServerProcessedDataType = {}));
		var ServerProcessedDataType = exports.ServerProcessedDataType;
	
	
	/***/ },
	/* 139 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var decorators_1 = __webpack_require__(4);
		var React = __webpack_require__(95);
		var Button_1 = __webpack_require__(140);
		var css_1 = __webpack_require__(141);
		__webpack_require__(98);
		var Placeholder = (function (_super) {
		    __extends(Placeholder, _super);
		    function Placeholder() {
		        _super.apply(this, arguments);
		    }
		    Placeholder.prototype.render = function () {
		        this._descriptionId = "description-" + Math.random().toString();
		        return (React.createElement("div", {className: css_1.css('Placeholder', this.props.contentClassName)}, 
		            React.createElement("div", {className: 'Placeholder-container ms-Grid'}, 
		                React.createElement("div", {className: 'Placeholder-head ms-Grid-row'}, 
		                    React.createElement("div", {className: 'ms-Grid-col ms-u-hiddenSm ms-u-md3'}), 
		                    React.createElement("div", {className: 'Placeholder-headContainer ms-Grid-col ms-u-sm12 ms-u-md6'}, 
		                        React.createElement("i", {className: 'Placeholder-icon ms-fontSize-su ms-Icon ' + this.props.icon}), 
		                        React.createElement("span", {className: 'Placeholder-text ms-fontWeight-light ms-fontSize-xxl'}, this.props.iconText)), 
		                    React.createElement("div", {className: 'ms-Grid-col ms-u-hiddenSm ms-u-md3'})), 
		                React.createElement("div", {className: 'Placeholder-description ms-Grid-row'}, 
		                    React.createElement("span", {className: 'Placeholder-descriptionText', id: this._descriptionId}, this.props.description)
		                ), 
		                React.createElement("div", {className: 'Placeholder-description ms-Grid-row'}, this.buttonElement))
		        ));
		    };
		    Object.defineProperty(Placeholder.prototype, "buttonElement", {
		        get: function () {
		            var _this = this;
		            return this.props.buttonLabel
		                ? (React.createElement(Button_1.Button, {ref: function (c) { return _this._placeholderButton = c; }, buttonType: Button_1.ButtonType.primary, onClick: this.props.onAdd, ariaLabel: this.props.buttonLabel, ariaDescription: this.props.description}, this.props.buttonLabel))
		                : undefined;
		        },
		        enumerable: true,
		        configurable: true
		    });
		    Placeholder.prototype.focusOnPlaceHolderButton = function () {
		        if (this._placeholderButton) {
		            this._placeholderButton.focus();
		        }
		    };
		    Placeholder = __decorate([
		        decorators_1.sealed
		    ], Placeholder);
		    return Placeholder;
		}(React.Component));
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = Placeholder;
	
	
	/***/ },
	/* 140 */
	/***/ function(module, exports, __webpack_require__) {
	
		// Loading office-ui-fabric-react/components/Button/index.js
		var package = __webpack_require__(97);
		module.exports = package;
	
	/***/ },
	/* 141 */
	/***/ function(module, exports, __webpack_require__) {
	
		// Loading office-ui-fabric-react/utilities/css.js
		var package = __webpack_require__(97);
		module.exports = package;
	
	/***/ },
	/* 142 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var __assign = (this && this.__assign) || Object.assign || function(t) {
		    for (var s, i = 1, n = arguments.length; i < n; i++) {
		        s = arguments[i];
		        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
		            t[p] = s[p];
		    }
		    return t;
		};
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var decorators_1 = __webpack_require__(4);
		var React = __webpack_require__(95);
		var office_ui_fabric_react_1 = __webpack_require__(97);
		var WebPartForm = (function (_super) {
		    __extends(WebPartForm, _super);
		    function WebPartForm(props) {
		        _super.call(this, props);
		        this._handleKeyDown = this._handleKeyDown.bind(this);
		        this._handleClick = this._handleClick.bind(this);
		    }
		    WebPartForm.prototype.render = function () {
		        var _this = this;
		        var nativeProps = office_ui_fabric_react_1.getNativeProps(this.props, office_ui_fabric_react_1.divProperties);
		        return (this.props.isClassicSharePointPage
		            ? (React.createElement("div", __assign({ref: function (ref) { return _this._webpartDiv = ref; }, role: 'form'}, nativeProps, {onKeyDown: this._handleKeyDown, onClick: this._handleClick}), this.props.children))
		            : (React.createElement("form", __assign({}, nativeProps), this.props.children)));
		    };
		    WebPartForm.prototype._handleKeyDown = function (evt) {
		        if (this.props.onKeyDown) {
		            this.props.onKeyDown(evt);
		        }
		        if (evt.keyCode === office_ui_fabric_react_1.KeyCodes.enter && this.props.onSubmit) {
		            this.props.onSubmit(evt);
		        }
		    };
		    WebPartForm.prototype._handleClick = function (event) {
		        if (this.props.onSubmit && document.activeElement === this._submitElement) {
		            this.props.onSubmit(event);
		        }
		    };
		    Object.defineProperty(WebPartForm.prototype, "_submitElement", {
		        get: function () {
		            return this._webpartDiv.querySelector('input[type="submit"], button:not([type="reset"]):not([type="button"]):not([type="menu"])');
		        },
		        enumerable: true,
		        configurable: true
		    });
		    WebPartForm = __decorate([
		        decorators_1.sealed
		    ], WebPartForm);
		    return WebPartForm;
		}(React.Component));
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = WebPartForm;
	
	
	/***/ },
	/* 143 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var IPropertyPaneField_1 = __webpack_require__(114);
		function PropertyPaneCustomField(properties) {
		    return {
		        type: IPropertyPaneField_1.PropertyPaneFieldType.Custom,
		        targetProperty: undefined,
		        properties: properties
		    };
		}
		exports.PropertyPaneCustomField = PropertyPaneCustomField;
	
	
	/***/ },
	/* 144 */
	/***/ function(module, exports) {
	
		"use strict";
		(function (PropertyPaneButtonType) {
		    PropertyPaneButtonType[PropertyPaneButtonType["Normal"] = 0] = "Normal";
		    PropertyPaneButtonType[PropertyPaneButtonType["Primary"] = 1] = "Primary";
		    PropertyPaneButtonType[PropertyPaneButtonType["Hero"] = 2] = "Hero";
		    PropertyPaneButtonType[PropertyPaneButtonType["Compound"] = 3] = "Compound";
		    PropertyPaneButtonType[PropertyPaneButtonType["Command"] = 4] = "Command";
		    PropertyPaneButtonType[PropertyPaneButtonType["Icon"] = 5] = "Icon";
		})(exports.PropertyPaneButtonType || (exports.PropertyPaneButtonType = {}));
		var PropertyPaneButtonType = exports.PropertyPaneButtonType;
	
	
	/***/ },
	/* 145 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var IPropertyPaneField_1 = __webpack_require__(114);
		function PropertyPaneButton(targetProperty, properties) {
		    return {
		        type: IPropertyPaneField_1.PropertyPaneFieldType.Button,
		        targetProperty: targetProperty,
		        properties: properties
		    };
		}
		exports.PropertyPaneButton = PropertyPaneButton;
	
	
	/***/ },
	/* 146 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var IPropertyPaneField_1 = __webpack_require__(114);
		function PropertyPaneCheckbox(targetProperty, properties) {
		    return {
		        type: IPropertyPaneField_1.PropertyPaneFieldType.CheckBox,
		        targetProperty: targetProperty,
		        properties: properties
		    };
		}
		exports.PropertyPaneCheckbox = PropertyPaneCheckbox;
	
	
	/***/ },
	/* 147 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var IPropertyPaneField_1 = __webpack_require__(114);
		function PropertyPaneChoiceGroup(targetProperty, properties) {
		    return {
		        type: IPropertyPaneField_1.PropertyPaneFieldType.ChoiceGroup,
		        targetProperty: targetProperty,
		        properties: properties
		    };
		}
		exports.PropertyPaneChoiceGroup = PropertyPaneChoiceGroup;
	
	
	/***/ },
	/* 148 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var IPropertyPaneField_1 = __webpack_require__(114);
		function PropertyPaneDropdown(targetProperty, properties) {
		    return {
		        type: IPropertyPaneField_1.PropertyPaneFieldType.Dropdown,
		        targetProperty: targetProperty,
		        properties: properties
		    };
		}
		exports.PropertyPaneDropdown = PropertyPaneDropdown;
	
	
	/***/ },
	/* 149 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var IPropertyPaneField_1 = __webpack_require__(114);
		function PropertyPaneHorizontalRule() {
		    return {
		        type: IPropertyPaneField_1.PropertyPaneFieldType.HorizontalRule,
		        targetProperty: undefined,
		        properties: undefined
		    };
		}
		exports.PropertyPaneHorizontalRule = PropertyPaneHorizontalRule;
	
	
	/***/ },
	/* 150 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var IPropertyPaneField_1 = __webpack_require__(114);
		function PropertyPaneLabel(targetProperty, properties) {
		    return {
		        type: IPropertyPaneField_1.PropertyPaneFieldType.Label,
		        targetProperty: targetProperty,
		        properties: properties
		    };
		}
		exports.PropertyPaneLabel = PropertyPaneLabel;
	
	
	/***/ },
	/* 151 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var IPropertyPaneField_1 = __webpack_require__(114);
		function PropertyPaneLink(targetProperty, properties) {
		    return {
		        type: IPropertyPaneField_1.PropertyPaneFieldType.Link,
		        targetProperty: undefined,
		        properties: properties
		    };
		}
		exports.PropertyPaneLink = PropertyPaneLink;
	
	
	/***/ },
	/* 152 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var IPropertyPaneField_1 = __webpack_require__(114);
		function PropertyPaneSlider(targetProperty, properties) {
		    return {
		        type: IPropertyPaneField_1.PropertyPaneFieldType.Slider,
		        targetProperty: targetProperty,
		        properties: properties
		    };
		}
		exports.PropertyPaneSlider = PropertyPaneSlider;
	
	
	/***/ },
	/* 153 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var IPropertyPaneField_1 = __webpack_require__(114);
		function PropertyPaneTextField(targetProperty, properties) {
		    return {
		        type: IPropertyPaneField_1.PropertyPaneFieldType.TextField,
		        targetProperty: targetProperty,
		        properties: properties
		    };
		}
		exports.PropertyPaneTextField = PropertyPaneTextField;
	
	
	/***/ },
	/* 154 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var IPropertyPaneField_1 = __webpack_require__(114);
		function PropertyPaneToggle(targetProperty, properties) {
		    return {
		        type: IPropertyPaneField_1.PropertyPaneFieldType.Toggle,
		        targetProperty: targetProperty,
		        properties: properties
		    };
		}
		exports.PropertyPaneToggle = PropertyPaneToggle;
	

	/***/ }
	/******/ ])}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));;


/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	  var strings = {
	    "_cUY5i3OR5M46pep9mRCR0g": {
	      "ManifestNullError": "Manifest for the web part {0} is null.",
	      "ManifestInvalidError": "Manifest for the web part {0} is invalid.",
	      "ReadOnlyPropertyError": "This is a read-only property.",
	      "BaseConstructError": "BaseClientSideWebPart is an abstract class and must be extended before use.",
	      "ConstructLog": "Constructed web part: {0}.",
	      "DisposeLog": "Disposed web part: {0}.",
	      "MustOverrideRenderError": "Render method needs to be overriden in the derived class of web part {0}.",
	      "NonBaseWebPartError": "Web part {0} must inherit from the BaseClientSideWebPart class.",
	      "NotIntializedError": "Web part {0} was not initialized properly. Web parts must be instantiated using the ClientSideWebPartManager. Many web part features cannot be used till the initialization is complete.",
	      "PropertyBagNullError": "Null property bag is not allowed for web part {0}. Empty property bag is supported.",
	      "UndefinedModuleError": "Module is not loaded or not defined in the manifest for web part {0}.",
	      "ModuleNotLoadedError": "Bootstrap module for web part {0} is not loaded. Module names exported by the bundle are '{1}'.",
	      "IncorrectBoostrapModuleError": "Bootstrap module for web part {0} not of the correct type. Make sure to export your web part as 'export default WebPartName'.",
	      "MissingExpectedWebPartMemberError": "The class for web part {0} is missing an expected member '{1}'.",
	      "ScriptLoadErrorTemplate": "Unable to load web part {0} script resources due to: {1}.",
	      "LoaderNotFoundError": "No loader could be found, unable to load web part {0}. Please contact Microsoft developer support to resolve this.",
	      "SerializationFailedError": "Serialization failed for web part {0}.",
	      "RenderCompletedCallNotCalledError": "renderCompleted is not called for an asynchronously rendered web part {0}.",
	      "FirstTimeRenderCalledMoreThanOnceError": "Attempted to call first time render more than once for the web part {0}. Please contact Microsoft developer support to resolve this.",
	      "LoadingStatus": "Loading {0}...",
	      "DisplayLoadingIndicator": "Displaying loading indicator",
	      "ClearLoadingIndicator": "Clear loading indicator",
	      "OnAfterDeserializeReturnedNull": "onAfterDeserialize for web part {0} returned null or undefined.",
	      "OnInitReturnedNullPromise": "onInit method for web part {0} returned null or undefined Promise.",
	      "OnDisplayModeChangedInvalidInvocation": "onDisplayModeChanged method should only be called if there is a change in the display mode.",
	      "GenericAccessibleLabelTemplate": "{0} web part",
	      "StartedLoadingWebPart": "Started loading web part {0}.",
	      "ModulesLoadingFailedForWebPart": "Failed loading web part {0} due to incorrect bootstrap module. The actual manifest type is {1}.",
	      "ModulesLoadedForWebPart": "Successfully loaded modules for web part {0}.",
	      "CompletedLoadingWebPart": "Successfully loaded web part {0}.",
	      "CompletedLoadingWebPartManifests": "Successfully loaded webpart manifests.",
	      "OnInitCompleted": "onInit method completed for web part {0}.",
	      "StartedFirstTimeRender": "Started first time render for web part {0}.",
	      "CompletedAsyncRender": "Completed async render for web part {0}.",
	      "CompletedSyncRender": "Completed sync render for web part {0}."
	    },
	    "_ZRJdhh/Ht8a/UwYAwPqP9Q": {
	      "Save": "Apply",
	      "Close": "Close",
	      "SaveConfirmation": "We saved your changes in the property pane.",
	      "PropertyPaneBackPage": "Back",
	      "PropertyPaneNextPage": "Next",
	      "PropertyPanePageOfPages": "{0} of {1}",
	      "PropertyPaneTitle": "{0} settings",
	      "PropertyPaneEmptyStateDescription": "No settings to change for this web part.",
	      "PropertyPaneFetchingSettingsDataLabel": "Loading data...",
	      "NoOpOnRefreshPropertyPaneText": "refreshPropertyPane is a No Op, because the property pane is currently not attached to the web part {0}."
	    }
	  };
	
	  strings.default = strings;
	  return strings;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_6__;

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_9__;

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_10__;

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_11__;

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_12__;

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_13__;

/***/ }
/******/ ])});;
//# sourceMappingURL=sp-webpart-base_en-us.js.map
(function(){
if (!window.__setWebpackPublicPathLoaderSrcRegistry__) window.__setWebpackPublicPathLoaderSrcRegistry__={};
var scripts = document.getElementsByTagName('script');
if (scripts && scripts.length) {
  for (var i = 0; i < scripts.length; i++) {
    if (!scripts[i]) continue;
    var path = scripts[i].getAttribute('src');
    if (path) window.__setWebpackPublicPathLoaderSrcRegistry__[path]=true;
  }
}
})();