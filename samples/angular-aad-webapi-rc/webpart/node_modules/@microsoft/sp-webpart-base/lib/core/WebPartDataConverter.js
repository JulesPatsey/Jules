'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var decorators_1 = require('@microsoft/decorators');
var lodash = require('@microsoft/sp-lodash-subset');
var ISerializedServerProcessedData_1 = require('./ISerializedServerProcessedData');
var WebPartDataConverter = (function () {
    function WebPartDataConverter() {
    }
    WebPartDataConverter.prototype.convertServerProcessedDataToHtml = function (serverContent) {
        var result = '';
        if (serverContent) {
            if (serverContent.htmlStrings) {
                for (var propPath in serverContent.htmlStrings) {
                    var value = serverContent.htmlStrings[propPath];
                    result +=
                        this._getHtmlString(propPath, ISerializedServerProcessedData_1.ServerProcessedDataType.htmlString, value);
                }
            }
            if (serverContent.links) {
                for (var propPath in serverContent.links) {
                    var value = serverContent.links[propPath];
                    result +=
                        this._getHtmlString(propPath, ISerializedServerProcessedData_1.ServerProcessedDataType.link, value);
                }
            }
            if (serverContent.imageSources) {
                for (var propPath in serverContent.imageSources) {
                    var value = serverContent.imageSources[propPath];
                    result +=
                        this._getHtmlString(propPath, ISerializedServerProcessedData_1.ServerProcessedDataType.imageSource, value);
                }
            }
        }
        return result;
    };
    WebPartDataConverter.prototype.convertServerProcessedHtmlToData = function (htmlString) {
        var serverContent = {
            htmlStrings: {},
            links: {},
            imageSources: {}
        };
        if (!htmlString || htmlString === '') {
            return serverContent;
        }
        var tempNode = document.createElement('DIV');
        tempNode.innerHTML = htmlString;
        var nodes = tempNode.childNodes;
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var key = lodash.unescape(node.getAttribute('data-sp-prop-name'));
            if (key) {
                switch (node.tagName) {
                    case 'DIV':
                        serverContent.htmlStrings[key] = node.innerHTML;
                        break;
                    case 'LINK':
                        serverContent.links[key] = node.getAttribute('href');
                        break;
                    case 'IMG':
                        serverContent.imageSources[key] = node.getAttribute('src');
                        if (serverContent.imageSources[key] === undefined || serverContent.imageSources[key] === null) {
                            serverContent.imageSources[key] = node.getAttribute('href');
                        }
                        break;
                }
            }
        }
        return serverContent;
    };
    WebPartDataConverter.prototype._getHtmlString = function (propName, propType, propValue) {
        var htmlPropString = '';
        if (propName && typeof propValue === 'string' && propValue) {
            var sanitizedValue = this._normalizeHTML(lodash.unescape(propValue));
            switch (propType) {
                case ISerializedServerProcessedData_1.ServerProcessedDataType.htmlString:
                    htmlPropString = "<div data-sp-prop-name='" + lodash.escape(propName) + "'>" + sanitizedValue + "</div>";
                    break;
                case ISerializedServerProcessedData_1.ServerProcessedDataType.link:
                    htmlPropString = "<link data-sp-prop-name='" + lodash.escape(propName) + "' href='" + sanitizedValue + "' />";
                    break;
                case ISerializedServerProcessedData_1.ServerProcessedDataType.imageSource:
                    htmlPropString = "<img data-sp-prop-name='" + lodash.escape(propName) + "' src='" + sanitizedValue + "' />";
                    break;
            }
        }
        return (htmlPropString);
    };
    WebPartDataConverter.prototype._normalizeHTML = function (htmlString) {
        if (!htmlString || htmlString === '') {
            return htmlString;
        }
        var tempDiv = document.createElement('DIV');
        tempDiv.innerHTML =
            "<div class='child1'></div>" +
                ("<div class='main'>" + htmlString + "</div>") +
                "<div class='child3'></div>";
        var children = tempDiv.children;
        if (!children[0] || children[0].className !== 'child1' ||
            !children[1] || children[1].className !== 'main' ||
            !children[2] || children[2].className !== 'child3') {
            return '';
        }
        var mainDiv = children[1];
        var scriptTags = mainDiv.querySelectorAll('script');
        for (var i = 0; i < scriptTags.length; i++) {
            var scriptTag = scriptTags[0];
            if (scriptTag) {
                scriptTag.parentElement.removeChild(scriptTag);
            }
        }
        return mainDiv.innerHTML;
    };
    WebPartDataConverter = __decorate([
        decorators_1.sealed
    ], WebPartDataConverter);
    return WebPartDataConverter;
}());
exports.WebPartDataConverter = WebPartDataConverter;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = new WebPartDataConverter();
