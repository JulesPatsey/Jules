import { ICanvasLayoutControlsState, IControlPosition, ILayoutItem, ILayoutPart } from './ICanvasLayout';
import CanvasZonePart from './CanvasZonePart';
import ICanvasControl, { CanvasControlComponent } from '../canvasControl/ICanvasControl';
/**
 * Represents the Canvas Layout
 */
export default class CanvasLayout implements ILayoutPart {
    static readonly firstLayoutIndex: number;
    static readonly undefinedControlPosition: IControlPosition;
    private _activeControlsState;
    private _zonePartMap;
    private _controlComponentMap;
    /**
     * Utility function that creates the smallest index closest to the input index
     * @param sortedChildren is a sorted Array
     * @param currentIdx is the current entry index
     * @returns the index closest to the current index
     */
    static _generateNewLayoutIndex(sortedChildren: ILayoutItem[], currentIdx: number): number;
    /**
     * Creates a new instance of a CanvasLayout
     */
    constructor();
    /**
     * Gets the zones associated with the current layout
     * @returns the zones associated with the layout
     */
    readonly zones: CanvasZonePart[];
    /**
     * Gets the state information of specific layout controls
     */
    readonly controlsState: ICanvasLayoutControlsState;
    /**
     * Fetch the control component
     * @param controlId represents the controlId
     * @returns the control component
     */
    fetchControlComponentById(controlId: string): CanvasControlComponent;
    /**
     * Fetch the control position
     * @param controlId represents the controlId
     * @returns the control component
     */
    fetchControlPositionById(controlId: string): IControlPosition;
    /**
     * Add the control component
     * @param controlId represents the controlId
     * @returns the control component
     */
    addControlComponent(controlId: string, controlComponent: CanvasControlComponent): void;
    /**
     * Adds a new canvas control to the layout
     * If zone doesn't exist, then create a new zone
     * @param canvasControl represents the control to add
     * @returns Id of control that was added
     */
    addControl(canvasControl: ICanvasControl): string;
    /**
     * Removes a control from the layout
     * @param controlPosition represents the control to remove
     * @returns Id of control that was removed
     */
    removeControl(controlPosition: IControlPosition): string;
    /**
     * Fetches a control from the layout
     * @param controlPosition represents the position of the control
     * @returns the underlying control if available
     */
    fetchControl(controlPosition: IControlPosition): ICanvasControl;
    /**
     * Fetch all controls that are available in the canvas
     * @returns all the controls associated with that layout
     */
    fetchAllControls(): ICanvasControl[];
    /**
     * Determines if the underlying layout is empty
     * @returns true if the pertinent layout is empty
     */
    isEmpty(): boolean;
    /**
     * Disposes the layout.
     */
    dispose(): void;
    private _initialize();
    private _resetActiveControlState();
}
