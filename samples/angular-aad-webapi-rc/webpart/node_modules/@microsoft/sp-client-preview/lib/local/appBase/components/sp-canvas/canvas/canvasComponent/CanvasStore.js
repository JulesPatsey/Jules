"use strict";
var sp_telemetry_1 = require('@ms/sp-telemetry');
var sp_core_library_1 = require('@microsoft/sp-core-library');
var sp_webpart_base_1 = require('@microsoft/sp-webpart-base');
var CanvasComponent_1 = require('../canvasComponent/CanvasComponent');
var CanvasControlType_1 = require('../canvasControl/CanvasControlType');
var CanvasSectionPart_1 = require('../canvasLayout/CanvasSectionPart');
var CanvasWebPartHost_1 = require('../CanvasWebPartHost/CanvasWebPartHost');
var CanvasLayout_1 = require('../canvasLayout/CanvasLayout');
var CanvasStrings_resx_1 = require('../../loc/CanvasStrings.resx');
var CanvasStore = (function () {
    function CanvasStore(serviceScope, render, mode, serializedCanvas, handleCanvasChanged, scrollThreshold) {
        sp_core_library_1.Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        sp_core_library_1.Validate.isNotNullOrUndefined(render, 'render');
        sp_core_library_1.Validate.isNotNullOrUndefined(mode, 'mode');
        this._addReference = this._addReference.bind(this);
        this._notifyChanged = this._notifyChanged.bind(this);
        this.handleToolboxItemClick = this.handleToolboxItemClick.bind(this);
        this.closeToolbox = this.closeToolbox.bind(this);
        this.createQosScope = this.createQosScope.bind(this);
        this.deleteControl = this.deleteControl.bind(this);
        this.handleConfigureButtonClicked = this.handleConfigureButtonClicked.bind(this);
        this.handleDeleteButtonClicked = this.handleDeleteButtonClicked.bind(this);
        this.handleDeleteDialogConfirmation = this.handleDeleteDialogConfirmation.bind(this);
        this.handleDeleteDialogDismiss = this.handleDeleteDialogDismiss.bind(this);
        this.handleWindowBlur = this.handleWindowBlur.bind(this);
        this.reclaimFocus = this.reclaimFocus.bind(this);
        this.scrollIntoView = this.scrollIntoView.bind(this);
        this.openToolbox = this.openToolbox.bind(this);
        this._render = render;
        this._controlComponentMap = new Map();
        this._controlsProps = [];
        this._displayMode = mode;
        this._handleCanvasChanged = handleCanvasChanged;
        this._isDeleteDialogOpen = false;
        this._pollActiveElement = this._pollActiveElement.bind(this);
        this._scrollThreshold = scrollThreshold || 0;
        this._webPartManager = new sp_webpart_base_1.ClientSideWebPartManager(new CanvasWebPartHost_1.default(serviceScope, this.scrollIntoView.bind(this, 'full'), handleCanvasChanged, this.reclaimFocus));
        var defaultLayout = undefined;
        if (CanvasStore.isLayoutSupported) {
            this._canvasLayout = new CanvasLayout_1.default();
            defaultLayout = CanvasLayout_1.default.undefinedControlPosition;
        }
        this._toolboxProps = {
            isLoading: true,
            isOpen: false,
            onItemClick: this.handleToolboxItemClick.bind(this, CanvasStore.isLayoutSupported ? defaultLayout : 0),
            row: undefined,
            toolboxItems: [],
            verticalPosition: undefined,
            controlPosition: defaultLayout
        };
        this._fetchWebParts();
    }
    Object.defineProperty(CanvasStore, "_isCanvasJsonFlightEnabled", {
        get: function () {
            return sp_core_library_1._SPFlight.isEnabled(957 );
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore, "isLayoutSupported", {
        get: function () {
            return sp_core_library_1._SPFlight.isEnabled(963 );
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "addReference", {
        get: function () {
            return this._addReference;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "a11yManager", {
        get: function () {
            return this._a11yManager;
        },
        set: function (elem) {
            this._a11yManager = elem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "canvasElement", {
        get: function () {
            return this._canvasElement;
        },
        set: function (elem) {
            this._canvasElement = elem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "controlsProps", {
        get: function () {
            return this._canvasControls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "canvasLayout", {
        get: function () {
            return this._canvasLayout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "deletedRow", {
        get: function () {
            return this._deletedRow;
        },
        set: function (row) {
            this._deletedRow = row;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "deletedControlLayout", {
        get: function () {
            return CanvasStore.isLayoutSupported ?
                this._canvasLayout.controlsState.deletedControlLayout :
                undefined;
        },
        set: function (layout) {
            if (CanvasStore.isLayoutSupported) {
                this._canvasLayout.controlsState.deletedControlLayout = layout;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "displayMode", {
        get: function () {
            return this._displayMode;
        },
        set: function (newMode) {
            if (this._displayMode !== newMode) {
                this._displayMode = newMode;
                for (var _i = 0, _a = this._canvasControls; _i < _a.length; _i++) {
                    var control = _a[_i];
                    var controlComponent = this._getControlComponentById(control.id);
                    if (controlComponent) {
                        controlComponent.setDisplayMode(newMode);
                    }
                }
                if (this._displayMode === sp_core_library_1.DisplayMode.Read) {
                    this._selectedControlIdInternal = undefined;
                    this.webPartManager.setPropertyPaneState(undefined, sp_webpart_base_1.PropertyPaneState.Close);
                    this._toolboxProps.isOpen = false;
                }
                this._fetchWebParts();
                this._render();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "isDeleteDialogOpen", {
        get: function () {
            return this._isDeleteDialogOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "notifyChanged", {
        get: function () {
            return this._notifyChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "scrollableParent", {
        get: function () {
            return this._scrollableParentElement;
        },
        set: function (elem) {
            this._scrollableParentElement = elem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "scrollThreshold", {
        get: function () {
            return this._scrollThreshold;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "hoveredControlId", {
        get: function () {
            return CanvasStore.isLayoutSupported ?
                this._canvasLayout.controlsState.hoveredControlId :
                this._hoveredControlId;
        },
        set: function (id) {
            if (CanvasStore.isLayoutSupported) {
                this._canvasLayout.controlsState.hoveredControlId = id;
            }
            else {
                this._hoveredControlId = id;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "selectedControlId", {
        get: function () {
            return this._selectedControlIdInternal;
        },
        set: function (id) {
            if (this._selectedControlIdInternal !== id) {
                this._selectedControlIdInternal = id;
                var controlComponent = this._getControlComponentById(id);
                if (controlComponent && controlComponent.props.controlType !== CanvasControlType_1.default.WebPartZone) {
                    this._webPartManager.setPropertyPaneState(undefined);
                }
                else {
                    this._webPartManager.setPropertyPaneState(id);
                }
                this._render();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "toolboxProps", {
        get: function () {
            return this._toolboxProps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "webPartManager", {
        get: function () {
            return this._webPartManager;
        },
        enumerable: true,
        configurable: true
    });
    CanvasStore.prototype.handleToolboxItemClick = function (position, itemProps) {
        var qos = this.createQosScope('ToolboxItemClicked');
        if (this._displayMode === sp_core_library_1.DisplayMode.Edit) {
            this._selectedControlIdInternal = itemProps.id = sp_core_library_1.Guid.newGuid().toString();
            this._addControlToCanvas(position, itemProps);
            if (itemProps.controlType === CanvasControlType_1.default.WebPartZone) {
                var webPartZoneProps = itemProps;
                if (webPartZoneProps.webPartManifest) {
                    var logEntry = new sp_telemetry_1._LogEntry('CanvasStore', 'AddWebPart', sp_telemetry_1._LogType.Event, {
                        'manifestId': webPartZoneProps.webPartManifest.id
                    });
                    sp_telemetry_1._EngagementLogger.logEventWithLogEntry(logEntry);
                }
            }
            else if (itemProps.controlType === CanvasControlType_1.default.RTE) {
                sp_telemetry_1._EngagementLogger.logEvent('AddRTE.Click');
            }
            this._render();
            this._notifyChanged();
            qos.writeSuccess();
        }
        else {
            qos.writeUnexpectedFailure('ReadMode');
        }
    };
    CanvasStore.prototype.deleteControl = function (row, layout) {
        this.deletedRow = row;
        this.deletedControlLayout = layout;
        if (CanvasStore.isLayoutSupported) {
            this._canvasLayout.removeControl(this.deletedControlLayout);
        }
        else {
            this._controlsProps.splice(row, 1);
        }
        if (this._canvasControls.length === 0) {
            this._webPartManager.setPropertyPaneState(undefined, sp_webpart_base_1.PropertyPaneState.Close);
        }
        this._render();
        this._notifyChanged();
    };
    CanvasStore.prototype.getControl = function (id) {
        return this._getControlComponentById(id);
    };
    CanvasStore.prototype.openToolbox = function (position, verticalPosition, horizontalPosition) {
        if (this._toolboxProps.isOpen) {
            this.closeToolbox();
        }
        this._fillToolboxItems();
        this._toolboxProps.isOpen = true;
        this._toolboxProps.onItemClick = this.handleToolboxItemClick.bind(this, position);
        this._toolboxProps.verticalPosition = verticalPosition;
        this._toolboxProps.horizontalPosition = horizontalPosition;
        if (CanvasStore.isLayoutSupported) {
            var pos = position;
            this._toolboxProps.controlPosition = pos;
            this._toolboxProps.row = pos.zoneIndex - 1;
        }
        else {
            this._toolboxProps.row = position;
        }
        document.addEventListener('click', this.closeToolbox);
        this._render();
    };
    CanvasStore.prototype.closeToolbox = function () {
        this._toolboxProps.isOpen = false;
        this._toolboxProps.row = undefined;
        if (CanvasStore.isLayoutSupported) {
            this._toolboxProps.controlPosition = CanvasLayout_1.default.undefinedControlPosition;
        }
        document.removeEventListener('click', this.closeToolbox);
        this._render();
    };
    CanvasStore.prototype.createQosScope = function (scope) {
        return new sp_telemetry_1._QosMonitor("Canvas" + scope);
    };
    CanvasStore.prototype.handleConfigureButtonClicked = function (id) {
        var isCurrentlySelected = this._selectedControlIdInternal === id;
        var controlComponent = this._getControlComponentById(id);
        if (controlComponent) {
            controlComponent.handleConfigureButtonClicked(isCurrentlySelected);
            this._selectedControlIdInternal = id;
            this._render();
        }
    };
    CanvasStore.prototype.handleDeleteButtonClicked = function (row, layout) {
        this._rowToBeDeleted = row;
        this._positionCandidateForDeletion = layout;
        var selectedControl = CanvasStore.isLayoutSupported ?
            this._canvasLayout.fetchControl(this._positionCandidateForDeletion) :
            this._controlsProps[this._rowToBeDeleted];
        this._selectedControlIdInternal = selectedControl.id;
        this._webPartManager.setPropertyPaneState(selectedControl.controlType === CanvasControlType_1.default.WebPartZone ? this._selectedControlIdInternal : undefined);
        this._isDeleteDialogOpen = true;
        this._render();
    };
    CanvasStore.prototype.handleDeleteDialogConfirmation = function () {
        var qos = this.createQosScope('DeleteWebPart');
        var selectedControl;
        try {
            selectedControl = CanvasStore.isLayoutSupported ?
                this._canvasLayout.fetchControl(this._positionCandidateForDeletion) :
                this._controlsProps[this._rowToBeDeleted];
            if (selectedControl.controlType === CanvasControlType_1.default.WebPartZone) {
                var controlComponent = this._getControlComponentById(selectedControl.id);
                controlComponent.handleDeleteButtonClicked();
            }
            this._isDeleteDialogOpen = false;
            this.deleteControl(this._rowToBeDeleted, this._positionCandidateForDeletion);
            qos.writeSuccess();
        }
        catch (err) {
            this._handleMonitoredException(qos, err, selectedControl);
        }
    };
    CanvasStore.prototype.handleDeleteDialogDismiss = function () {
        this._rowToBeDeleted = undefined;
        this._positionCandidateForDeletion = CanvasLayout_1.default.undefinedControlPosition;
        this._isDeleteDialogOpen = false;
        this._render();
    };
    CanvasStore.prototype.handleWindowBlur = function (e) {
        if (this._hoveredControlId && document.activeElement && document.activeElement.tagName === 'IFRAME') {
            this.selectedControlId = this.hoveredControlId;
            this._oldActiveElement = document.activeElement;
            window.clearInterval(this._pollId);
            this._pollId = window.setInterval(this._pollActiveElement, 250);
        }
    };
    CanvasStore.prototype.deserialize = function (serializedCanvas) {
        var qos = this.createQosScope('Deserialize');
        var controlProps;
        try {
            this._controlsProps = [];
            this._controlComponentMap = new Map();
            if (CanvasStore.isLayoutSupported) {
                this._canvasLayout.dispose();
            }
            if (serializedCanvas) {
                var controlAttribute = 'data-sp-canvascontrol';
                var tryJson = true;
                if (serializedCanvas.indexOf(controlAttribute) !== -1) {
                    var wrapper = document.createElement('div');
                    wrapper.innerHTML = serializedCanvas;
                    var rows = wrapper.querySelectorAll("[" + controlAttribute + "]");
                    var rowLength = rows.length;
                    if (rowLength > 0) {
                        tryJson = false;
                        for (var i = 0; i < rowLength; ++i) {
                            var row = rows[i];
                            controlProps = JSON.parse(decodeURI(row.getAttribute('data-sp-controldata')));
                            controlProps.displayMode = this._displayMode;
                            controlProps.addedFromPersistedData = true;
                            this._addControlToCanvas(CanvasStore.isLayoutSupported ? CanvasComponent_1.default.createEmptyZoneLayout(i + 1) : i, controlProps);
                        }
                    }
                }
                if (tryJson && CanvasStore._isCanvasJsonFlightEnabled) {
                    this._processCanvasContent(serializedCanvas);
                }
            }
            qos.writeSuccess();
        }
        catch (err) {
            this._handleMonitoredException(qos, err, controlProps);
        }
    };
    CanvasStore.prototype.reclaimFocus = function () {
        var controlComponent = this._getControlComponentById(this._selectedControlIdInternal);
        if (controlComponent) {
            controlComponent.focus();
        }
    };
    CanvasStore.prototype.scrollIntoView = function (type, element, duration, margin) {
        if (margin === void 0) { margin = 0; }
        if (!this.scrollableParent || !element) {
            return;
        }
        var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        var frameBottom = Math.min(viewportHeight, this.scrollableParent.getBoundingClientRect().bottom);
        var elementClientRect = element.getBoundingClientRect();
        if ((type === 'partial' ? elementClientRect.bottom : elementClientRect.top) > frameBottom) {
            this._scrollElementIntoView(frameBottom, element, duration, margin);
        }
    };
    CanvasStore.prototype.serialize = function () {
        return CanvasStore._isCanvasJsonFlightEnabled ?
            this._serializeAsJson() :
            this._serializeAsHtml();
    };
    CanvasStore.prototype.tryGeneratePreviewImageUrl = function () {
        var qos = this.createQosScope('GeneratePreviewImageUrl');
        try {
            var webpartIds = [];
            for (var _i = 0, _a = this._canvasControls; _i < _a.length; _i++) {
                var control = _a[_i];
                if (control.controlType === CanvasControlType_1.default.WebPartZone) {
                    webpartIds.push(control.id);
                }
            }
            var previewUrl = this.webPartManager.tryGeneratePreviewImageUrl(webpartIds);
            qos.writeSuccess();
            return previewUrl;
        }
        catch (err) {
            this._handleMonitoredException(qos, err);
        }
    };
    CanvasStore.prototype._getControlComponentById = function (id) {
        return CanvasStore.isLayoutSupported ?
            this._canvasLayout.fetchControlComponentById(id) :
            this._controlComponentMap.get(id);
    };
    CanvasStore.prototype._setControlComponentById = function (id, component) {
        if (CanvasStore.isLayoutSupported) {
            this._canvasLayout.addControlComponent(id, component);
        }
        else {
            this._controlComponentMap.set(id, component);
        }
    };
    Object.defineProperty(CanvasStore.prototype, "_canvasControls", {
        get: function () {
            return CanvasStore.isLayoutSupported ?
                this._canvasLayout.fetchAllControls() :
                this._controlsProps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "_selectedControlIdInternal", {
        get: function () {
            return CanvasStore.isLayoutSupported ?
                this._canvasLayout.controlsState.selectedControlId :
                this._selectedControlId;
        },
        set: function (id) {
            if (CanvasStore.isLayoutSupported) {
                this._canvasLayout.controlsState.selectedControlId = id;
            }
            else {
                this._selectedControlId = id;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "_positionCandidateForDeletion", {
        get: function () {
            return CanvasStore.isLayoutSupported ?
                this._canvasLayout.controlsState.deleteCandidateControlLayout :
                undefined;
        },
        set: function (layout) {
            if (CanvasStore.isLayoutSupported) {
                this._canvasLayout.controlsState.deleteCandidateControlLayout = layout;
            }
        },
        enumerable: true,
        configurable: true
    });
    CanvasStore.prototype._serializeAsHtml = function () {
        var qos = this.createQosScope('Serialize');
        var controlData;
        try {
            var body = document.createElement('div');
            var controlRow = document.createElement('div');
            controlRow.setAttribute('data-sp-canvascontrol', '');
            var componentIdElement = document.createElement('div');
            componentIdElement.setAttribute('data-sp-componentId', '');
            var htmlPropertiesElement = document.createElement('div');
            htmlPropertiesElement.setAttribute('data-sp-htmlproperties', '');
            for (var _i = 0, _a = this._canvasControls; _i < _a.length; _i++) {
                var control = _a[_i];
                var row = controlRow.cloneNode();
                if (control.id === CanvasSectionPart_1.default.emptySectionId) {
                    control.id = undefined;
                    controlData = control;
                }
                else {
                    var controlComponent = this._getControlComponentById(control.id);
                    controlData = controlComponent.serialize();
                    if (!CanvasStore.isLayoutSupported &&
                        controlData.position) {
                        controlData.position = undefined;
                    }
                    if (control.controlType === CanvasControlType_1.default.RTE) {
                        row.innerHTML = controlData.innerHTML;
                    }
                    else if (control.controlType === CanvasControlType_1.default.WebPartZone) {
                        var componentId = componentIdElement.cloneNode();
                        componentId.textContent = controlData.webPartId;
                        row.appendChild(componentId);
                        var webPartData = controlData.webPartData;
                        if (webPartData) {
                            var htmlProperties = htmlPropertiesElement.cloneNode();
                            htmlProperties.innerHTML = sp_webpart_base_1.WebPartDataConverter.convertServerProcessedDataToHtml(webPartData.serverProcessedContent);
                            row.appendChild(htmlProperties);
                        }
                    }
                }
                row.setAttribute('data-sp-controldata', encodeURI(JSON.stringify(controlData)));
                body.appendChild(row);
            }
            var wrapper = document.createElement('div');
            wrapper.appendChild(body);
            qos.writeSuccess();
            return wrapper.innerHTML;
        }
        catch (err) {
            this._handleMonitoredException(qos, err, controlData);
            throw err;
        }
    };
    CanvasStore.prototype._serializeAsJson = function () {
        var qos = this.createQosScope('SerializeAsJson');
        var controlDataCollection = [];
        var controlData;
        try {
            for (var _i = 0, _a = this._canvasControls; _i < _a.length; _i++) {
                var control = _a[_i];
                if (control.id === CanvasSectionPart_1.default.emptySectionId) {
                    control.id = undefined;
                    controlData = control;
                }
                else {
                    var controlComponent = this._getControlComponentById(control.id);
                    controlData = controlComponent.serialize();
                    if (!CanvasStore.isLayoutSupported &&
                        controlData.position) {
                        controlData.position = undefined;
                    }
                }
                controlDataCollection.push(controlData);
            }
            qos.writeSuccess();
        }
        catch (err) {
            this._handleMonitoredException(qos, err, controlData);
            throw err;
        }
        return encodeURI(JSON.stringify(controlDataCollection));
    };
    CanvasStore.prototype._processCanvasContent = function (serializedCanvas) {
        var _this = this;
        var canvasControls = JSON.parse(serializedCanvas);
        if (canvasControls) {
            canvasControls.forEach(function (control, index) {
                var controlProp = control;
                if (controlProp) {
                    controlProp.displayMode = _this.displayMode;
                    controlProp.addedFromPersistedData = true;
                    _this._addControlToCanvas(CanvasStore._isCanvasJsonFlightEnabled ? CanvasComponent_1.default.createEmptyZoneLayout(index) : index, controlProp);
                }
            });
        }
    };
    CanvasStore.prototype._addControlToCanvas = function (position, control) {
        if (!control.id) {
            control.id = sp_core_library_1.Guid.newGuid().toString();
        }
        if (control.controlType === CanvasControlType_1.default.WebPartZone &&
            !control.webPartManifest) {
            var webPartProps = control;
            webPartProps.webPartManifest = this._getManifestMap().get(webPartProps.webPartId);
            if (webPartProps.webPartData && webPartProps.webPartData.htmlProperties) {
                webPartProps.webPartData.serverProcessedContent = sp_webpart_base_1.WebPartDataConverter.convertServerProcessedHtmlToData(webPartProps.webPartData.htmlProperties);
            }
        }
        if (CanvasStore.isLayoutSupported) {
            control.position = control.position || position;
            this._canvasLayout.addControl(control);
        }
        else {
            this.controlsProps.splice(position, 0, control);
        }
    };
    CanvasStore.prototype._addReference = function (ref) {
        if (ref) {
            this._setControlComponentById(ref.props.id, ref);
        }
    };
    CanvasStore.prototype._calculateEasing = function (time, start, diff, duration) {
        time /= duration / 2;
        if (time < 1) {
            return diff / 2 * time * time + start;
        }
        else {
            --time;
            return -diff / 2 * (time * (time - 2) - 1) + start;
        }
    };
    CanvasStore.prototype._fetchWebParts = function () {
        var _this = this;
        if (!this._fetchedWebParts && sp_core_library_1.DisplayMode.Edit === this._displayMode) {
            this._webPartManager.fetchWebPartManifests().then(function () {
                _this._fetchedWebParts = true;
                _this._toolboxProps.errorMessage = undefined;
                _this._fillToolboxItems();
            }, function (error) {
                _this._toolboxProps.errorMessage = CanvasStrings_resx_1.default.ToolboxErrorMessage;
                _this._fillToolboxItems();
            });
        }
    };
    CanvasStore.prototype._fillToolboxItems = function () {
        var _this = this;
        var qos = this.createQosScope('LoadWebPartsInToolbox');
        this._toolboxProps.toolboxItems = [];
        try {
            this._getManifestMap().forEach(function (manifest, cid) {
                var i = 0;
                for (var _i = 0, _a = manifest.preconfiguredEntries; _i < _a.length; _i++) {
                    var entry = _a[_i];
                    var itemProps = {
                        controlType: CanvasControlType_1.default.WebPartZone,
                        displayMode: sp_core_library_1.DisplayMode.Edit,
                        id: undefined,
                        webPartId: cid,
                        webPartData: _this._extractWebPartData(manifest, entry),
                        webPartManifest: manifest
                    };
                    var toolboxItem = {
                        itemProps: itemProps,
                        description: entry.description.default,
                        displayName: entry.title.default,
                        msIconName: entry.officeFabricIconFontName,
                        key: manifest.id + "_" + i++
                    };
                    _this._toolboxProps.toolboxItems.push(toolboxItem);
                }
            });
            this._toolboxProps.isLoading = false;
            qos.writeSuccess();
        }
        catch (err) {
            this._handleMonitoredException(qos, err);
        }
        if (this._toolboxProps.isOpen) {
            this._render();
        }
    };
    CanvasStore.prototype._extractWebPartData = function (manifest, entry) {
        var webPartData = {
            id: manifest.id,
            instanceId: undefined,
            title: entry.title.default,
            description: entry.description.default,
            dataVersion: entry.dataVersion,
            properties: entry.properties
        };
        return webPartData;
    };
    CanvasStore.prototype._getManifestMap = function () {
        var tempMap = new Map();
        var manifests = this._webPartManager.getWebPartManifests();
        for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
            var manifest = manifests_1[_i];
            tempMap.set(manifest.id, manifest);
        }
        return tempMap;
    };
    CanvasStore.prototype._pollActiveElement = function () {
        var activeElement = document.activeElement;
        if (activeElement.tagName !== 'IFRAME') {
            window.clearInterval(this._pollId);
        }
        else if (this._oldActiveElement !== activeElement && this.hoveredControlId) {
            this._oldActiveElement = activeElement;
            this._selectedControlIdInternal = this.hoveredControlId;
        }
    };
    CanvasStore.prototype._scroll = function (start, end, duration, time) {
        var _this = this;
        if (time === void 0) { time = 0; }
        var diff = end - start;
        var deltaTime = 20;
        if (time < duration) {
            requestAnimationFrame(function () {
                time += deltaTime;
                _this.scrollableParent.scrollTop = _this._calculateEasing(time, start, diff, duration);
                _this._scroll(start, end, duration, time);
            });
        }
    };
    CanvasStore.prototype._scrollElementIntoView = function (frameBottom, element, duration, margin) {
        var elementClientRect = element.getBoundingClientRect();
        var scrollPosition = elementClientRect.bottom - this.canvasElement.getBoundingClientRect().top;
        var frameTop = Math.max(0, this.scrollableParent.getBoundingClientRect().top);
        var offset = frameTop - frameBottom + this._scrollThreshold + margin;
        var newScrollTop = scrollPosition + offset + this._scrollThreshold;
        this._scroll(this.scrollableParent.scrollTop, newScrollTop, duration);
    };
    CanvasStore.prototype._notifyChanged = function () {
        if (this._handleCanvasChanged) {
            this._handleCanvasChanged();
        }
    };
    CanvasStore.prototype._handleMonitoredException = function (qos, err, props) {
        var extraData; 
        if (props && props.controlType === CanvasControlType_1.default.WebPartZone) {
            extraData = { 'id': props.webPartId };
        }
        qos.writeUnexpectedFailure('Exception', err, extraData);
    };
    return CanvasStore;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasStore;
