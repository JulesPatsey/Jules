import SPHttpClientCommonConfiguration, { ISPHttpClientCommonConfiguration } from './SPHttpClientCommonConfiguration';
/**
 * Flags interface for SPHttpClientBatchConfiguration.
 *
 * @alpha
 */
export interface ISPHttpClientBatchConfiguration extends ISPHttpClientCommonConfiguration {
}
/**
 * The SPHttpClientBatchConfiguration object provides a set of switches for enabling/disabling
 * various features of the SPHttpClientBatch class.  Normally these switches are set
 * (e.g. when calling SPHttpClientBatch.fetch()) by providing one of the predefined defaults
 * from SPHttpClientBatchConfigurations, however switches can also be changed via the
 * SPHttpClientBatchConfiguration.overrideWith() method.
 *
 * @alpha
 */
export default class SPHttpClientBatchConfiguration extends SPHttpClientCommonConfiguration implements ISPHttpClientBatchConfiguration {
    protected flags: ISPHttpClientBatchConfiguration;
    /**
     * Constructs a new instance of SPHttpClientBatchConfiguration with the specified flags.
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.
     */
    constructor(flags: ISPHttpClientBatchConfiguration, overrideFlags?: ISPHttpClientBatchConfiguration);
    protected initializeFlags(): void;
    overrideWith(sourceFlags: ISPHttpClientBatchConfiguration): SPHttpClientBatchConfiguration;
}
/**
 * This interface provides standard predefined SPHttpClientBatchConfiguration objects for use with
 * the SPHttpClientBatch class.  In general, clients should choose the latest available
 * version number, which enables all the switches that are recommended for typical
 * scenarios.  (If new switches are introduced in the future, a new version number
 * will be introduced, which ensures that existing code will continue to function the
 * way it did at the time when it was tested.)
 *
 * @alpha
 */
export interface ISPHttpClientBatchConfigurations {
    /**
     * This configuration turns off every feature switch for HttpClient.  The fetch()
     * behavior will be essentially identical to the WHATWG standard API that
     * is documented here:
     * https://fetch.spec.whatwg.org/
     */
    readonly none: SPHttpClientBatchConfiguration;
    /**
     * Version 1 enables these switches:
     * consoleLogging = true;
     * jsonRequest = true;
     * jsonResponse = true
     */
    readonly v1: SPHttpClientBatchConfiguration;
}
/**
 * This class provides standard predefined SPHttpClientBatchConfiguration objects for use with
 * the SPHttpClientBatch class.  In general, clients should choose the latest available
 * version number, which enables all the switches that are recommended for typical
 * scenarios.  (If new switches are introduced in the future, a new version number
 * will be introduced, which ensures that existing code will continue to function the
 * way it did at the time when it was tested.)
 *
 * @deprecated Please use SPHttpClient.configurations to access these configurations.
 */
export declare class SPHttpClientBatchConfigurations {
    /**
     * This configuration turns off every feature switch for HttpClient.  The fetch()
     * behavior will be essentially identical to the WHATWG standard API that
     * is documented here:
     * https://fetch.spec.whatwg.org/
     */
    static readonlynone: SPHttpClientBatchConfiguration;
    /**
     * Version 1 enables these switches:
     * consoleLogging = true;
     * jsonRequest = true;
     * jsonResponse = true
     */
    static readonly v1: SPHttpClientBatchConfiguration;
}
export declare const predefinedConfigurations: ISPHttpClientBatchConfigurations;
