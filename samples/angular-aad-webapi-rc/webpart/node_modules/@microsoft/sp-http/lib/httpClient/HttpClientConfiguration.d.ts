/**
 * Flags interface for HttpClientConfiguration.
 *
 * @public
 */
export interface IHttpClientConfiguration {
    /**
     * Specifies whether HttpClient should log each request to the debugger console.
     */
    consoleLogging?: boolean;
}
/**
 * The HttpClientConfiguration object provides a set of switches for enabling/disabling
 * various features of the HttpClient class.  Normally these switches are set
 * (e.g. when calling HttpClient.fetch()) by providing one of the predefined defaults
 * from HttpClientConfigurations, however switches can also be changed via the
 * HttpClientConfiguration.overrideWith() method.
 *
 * @public
 */
export default class HttpClientConfiguration implements IHttpClientConfiguration {
    protected flags: IHttpClientConfiguration;
    /**
     * Constructs a new instance of HttpClientConfiguration with the specified flags.
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.   *
     */
    constructor(flags: IHttpClientConfiguration, overrideFlags?: IHttpClientConfiguration);
    /**
     * Child classes should override this method to construct the child class type,
     * rather than the base class type.
     */
    overrideWith(sourceFlags: IHttpClientConfiguration): HttpClientConfiguration;
    /**
     * {@inheritdoc IHttpClientConfiguration.consoleLogging}
     */
    readonly consoleLogging: boolean;
    /**
     * Child classes should override this method to initialize the flags
     * object.
     */
    protected initializeFlags(): void;
    private _mergeFlags(source);
}
/**
 * This interface provides standard predefined HttpClientConfiguration objects for use with
 * the HttpClient class.  In general, clients should choose the latest available
 * version number, which enables all the switches that are recommended for typical
 * scenarios.  (If new switches are introduced in the future, a new version number
 * will be introduced, which ensures that existing code will continue to function the
 * way it did at the time when it was tested.)
 *
 * @public
 */
export interface IHttpClientConfigurations {
    /**
     * This configuration turns off every feature switch for HttpClient.  The fetch()
     * behavior will be essentially identical to the WHATWG standard API that
     * is documented here:
     * https://fetch.spec.whatwg.org/
     */
    readonly none: HttpClientConfiguration;
    /**
     * Version 1 enables these switches:
     * consoleLogging=true
     */
    readonly v1: HttpClientConfiguration;
}
/**
 * This class provides standard predefined HttpClientConfiguration objects for use with
 * the HttpClient class.  In general, clients should choose the latest available
 * version number, which enables all the switches that are recommended for typical
 * scenarios.  (If new switches are introduced in the future, a new version number
 * will be introduced, which ensures that existing code will continue to function the
 * way it did at the time when it was tested.)
 *
 * @deprecated Please use HttpClient.configurations to access these configurations.
 */
export declare class HttpClientConfigurations {
    /**
     * This configuration turns off every feature switch for HttpClient.  The fetch()
     * behavior will be essentially identical to the WHATWG standard API that
     * is documented here:
     * https://fetch.spec.whatwg.org/
     */
    static readonly none: HttpClientConfiguration;
    /**
     * Version 1 enables these switches:
     * consoleLogging=true
     */
    static readonly v1: HttpClientConfiguration;
}
export declare const predefinedConfigurations: IHttpClientConfigurations;
